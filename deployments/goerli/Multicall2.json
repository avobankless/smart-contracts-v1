{
  "address": "0x589f005fFf335Ca35DbC823ADf4Ad959Eb9e2a60",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "blockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockCoinbase",
      "outputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gaslimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryAggregate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryBlockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x892b109b1cf7e9b8cac7cec594a1bc49a9d67506a89974d13cfa0cb3f4392da1",
  "receipt": {
    "to": null,
    "from": "0xfd94B585517d532BC4B80E35bC26383E7834f8b9",
    "contractAddress": "0x589f005fFf335Ca35DbC823ADf4Ad959Eb9e2a60",
    "transactionIndex": 49,
    "gasUsed": "590598",
    "logsBloom": "0x
    "blockHash": "0x9970292783b14864d67b7a3251375d3cd4e978db1b640b1f491f4e21691c8a0e",
    "transactionHash": "0x892b109b1cf7e9b8cac7cec594a1bc49a9d67506a89974d13cfa0cb3f4392da1",
    "logs": [],
    "blockNumber": 7651440,
    "cumulativeGasUsed": "16102351",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "553c135c329b8ea01e56e83e83aaa12c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"blockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryAggregate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryBlockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Multicall2 - Aggregate results from multiple read-only function calls\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Multicall.sol\":\"Multicall2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"src/Multicall.sol\":{\"content\":\"pragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @title Multicall2 - Aggregate results from multiple read-only function calls\\n/// @author Michael Elliot <mike@makerdao.com>\\n/// @author Joshua Levine <joshua@makerdao.com>\\n/// @author Nick Johnson <arachnid@notdot.net>\\n\\ncontract Multicall2 {\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n    struct Result {\\n        bool success;\\n        bytes returnData;\\n    }\\n\\n    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\\n        blockNumber = block.number;\\n        returnData = new bytes[](calls.length);\\n        for(uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\n            require(success, \\\"Multicall aggregate: call failed\\\");\\n            returnData[i] = ret;\\n        }\\n    }\\n    function blockAndAggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\\n        (blockNumber, blockHash, returnData) = tryBlockAndAggregate(true, calls);\\n    }\\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(blockNumber);\\n    }\\n    function getBlockNumber() public view returns (uint256 blockNumber) {\\n        blockNumber = block.number;\\n    }\\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\\n        coinbase = block.coinbase;\\n    }\\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\\n        difficulty = block.difficulty;\\n    }\\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\\n        gaslimit = block.gaslimit;\\n    }\\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\\n        timestamp = block.timestamp;\\n    }\\n    function getEthBalance(address addr) public view returns (uint256 balance) {\\n        balance = addr.balance;\\n    }\\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(block.number - 1);\\n    }\\n    function tryAggregate(bool requireSuccess, Call[] memory calls) public returns (Result[] memory returnData) {\\n        returnData = new Result[](calls.length);\\n        for(uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\n\\n            if (requireSuccess) {\\n                require(success, \\\"Multicall2 aggregate: call failed\\\");\\n            }\\n\\n            returnData[i] = Result(success, ret);\\n        }\\n    }\\n    function tryBlockAndAggregate(bool requireSuccess, Call[] memory calls) public returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\\n        blockNumber = block.number;\\n        blockHash = blockhash(block.number);\\n        returnData = tryAggregate(requireSuccess, calls);\\n    }\\n}\",\"keccak256\":\"0x5d1d80d2f7ac1401d1a4674647fd49fbbc480e8e42ea6a6e5c20a535f7de0021\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506109b9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a45760003560e01c80630f28c97d146100a9578063252dba42146100be57806327e86d6e146100df578063399542e9146100e757806342cbb15c146101095780634d2301cc1461010f57806372425d9d1461012a57806386d516e814610130578063a8b0574e14610136578063bce38bd714610144578063c3077fa914610164578063ee82ac5e14610177575b600080fd5b425b6040519081526020015b60405180910390f35b6100d16100cc3660046106d5565b610189565b6040516100b592919061076d565b6100ab610310565b6100fa6100f53660046107d7565b610323565b6040516100b593929190610893565b436100ab565b6100ab61011d3660046108bb565b6001600160a01b03163190565b446100ab565b456100ab565b6040514181526020016100b5565b6101576101523660046107d7565b61033b565b6040516100b591906108dd565b6100fa6101723660046106d5565b6104f4565b6100ab6101853660046108f0565b4090565b805143906060906001600160401b038111156101a7576101a7610511565b6040519080825280602002602001820160405280156101da57816020015b60608152602001906001900390816101c55790505b50905060005b835181101561030a576000808583815181106101fe576101fe610909565b6020026020010151600001516001600160a01b031686848151811061022557610225610909565b60200260200101516020015160405161023e919061091f565b6000604051808303816000865af19150503d806000811461027b576040519150601f19603f3d011682016040523d82523d6000602084013e610280565b606091505b5091509150816102d75760405162461bcd60e51b815260206004820181905260248201527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c656460448201526064015b60405180910390fd5b808484815181106102ea576102ea610909565b60200260200101819052505050808061030290610951565b9150506101e0565b50915091565b600061031d60014361096c565b40905090565b4380406060610332858561033b565b90509250925092565b606081516001600160401b0381111561035657610356610511565b60405190808252806020026020018201604052801561039c57816020015b6040805180820190915260008152606060208201528152602001906001900390816103745790505b50905060005b82518110156104ed576000808483815181106103c0576103c0610909565b6020026020010151600001516001600160a01b03168584815181106103e7576103e7610909565b602002602001015160200151604051610400919061091f565b6000604051808303816000865af19150503d806000811461043d576040519150601f19603f3d011682016040523d82523d6000602084013e610442565b606091505b509150915085156104a457816104a45760405162461bcd60e51b815260206004820152602160248201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c656044820152601960fa1b60648201526084016102ce565b60405180604001604052808315158152602001828152508484815181106104cd576104cd610909565b6020026020010181905250505080806104e590610951565b9150506103a2565b5092915050565b6000806060610504600185610323565b9196909550909350915050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561054957610549610511565b60405290565b604051601f8201601f191681016001600160401b038111828210171561057757610577610511565b604052919050565b80356001600160a01b038116811461059657600080fd5b919050565b6000601f83818401126105ad57600080fd5b823560206001600160401b03808311156105c9576105c9610511565b8260051b6105d883820161054f565b93845286810183019383810190898611156105f257600080fd5b84890192505b858310156106c8578235848111156106105760008081fd5b89016040601f19828d0381018213156106295760008081fd5b610631610527565b61063c89850161057f565b815282840135888111156106505760008081fd5b8085019450508d603f8501126106665760008081fd5b888401358881111561067a5761067a610511565b6106898a848e8401160161054f565b92508083528e848287010111156106a05760008081fd5b808486018b85013760009083018a0152808901919091528452505091840191908401906105f8565b9998505050505050505050565b6000602082840312156106e757600080fd5b81356001600160401b038111156106fd57600080fd5b6107098482850161059b565b949350505050565b60005b8381101561072c578181015183820152602001610714565b8381111561073b576000848401525b50505050565b60008151808452610759816020860160208601610711565b601f01601f19169290920160200192915050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b828110156107c957605f198887030184526107b7868351610741565b9550928401929084019060010161079b565b509398975050505050505050565b600080604083850312156107ea57600080fd5b823580151581146107fa57600080fd5b915060208301356001600160401b0381111561081557600080fd5b6108218582860161059b565b9150509250929050565b6000815180845260208085019450848260051b860182860160005b858110156108865783830389528151805115158452850151604086850181905261087281860183610741565b9a87019a9450505090840190600101610846565b5090979650505050505050565b8381528260208201526060604082015260006108b2606083018461082b565b95945050505050565b6000602082840312156108cd57600080fd5b6108d68261057f565b9392505050565b6020815260006108d6602083018461082b565b60006020828403121561090257600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b60008251610931818460208701610711565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156109655761096561093b565b5060010190565b60008282101561097e5761097e61093b565b50039056fea2646970667358221220768fa0c083fe1abfa3fae4e132fbc8a720a6f9b170c9cf89a849493b2f67adb864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a45760003560e01c80630f28c97d146100a9578063252dba42146100be57806327e86d6e146100df578063399542e9146100e757806342cbb15c146101095780634d2301cc1461010f57806372425d9d1461012a57806386d516e814610130578063a8b0574e14610136578063bce38bd714610144578063c3077fa914610164578063ee82ac5e14610177575b600080fd5b425b6040519081526020015b60405180910390f35b6100d16100cc3660046106d5565b610189565b6040516100b592919061076d565b6100ab610310565b6100fa6100f53660046107d7565b610323565b6040516100b593929190610893565b436100ab565b6100ab61011d3660046108bb565b6001600160a01b03163190565b446100ab565b456100ab565b6040514181526020016100b5565b6101576101523660046107d7565b61033b565b6040516100b591906108dd565b6100fa6101723660046106d5565b6104f4565b6100ab6101853660046108f0565b4090565b805143906060906001600160401b038111156101a7576101a7610511565b6040519080825280602002602001820160405280156101da57816020015b60608152602001906001900390816101c55790505b50905060005b835181101561030a576000808583815181106101fe576101fe610909565b6020026020010151600001516001600160a01b031686848151811061022557610225610909565b60200260200101516020015160405161023e919061091f565b6000604051808303816000865af19150503d806000811461027b576040519150601f19603f3d011682016040523d82523d6000602084013e610280565b606091505b5091509150816102d75760405162461bcd60e51b815260206004820181905260248201527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c656460448201526064015b60405180910390fd5b808484815181106102ea576102ea610909565b60200260200101819052505050808061030290610951565b9150506101e0565b50915091565b600061031d60014361096c565b40905090565b4380406060610332858561033b565b90509250925092565b606081516001600160401b0381111561035657610356610511565b60405190808252806020026020018201604052801561039c57816020015b6040805180820190915260008152606060208201528152602001906001900390816103745790505b50905060005b82518110156104ed576000808483815181106103c0576103c0610909565b6020026020010151600001516001600160a01b03168584815181106103e7576103e7610909565b602002602001015160200151604051610400919061091f565b6000604051808303816000865af19150503d806000811461043d576040519150601f19603f3d011682016040523d82523d6000602084013e610442565b606091505b509150915085156104a457816104a45760405162461bcd60e51b815260206004820152602160248201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c656044820152601960fa1b60648201526084016102ce565b60405180604001604052808315158152602001828152508484815181106104cd576104cd610909565b6020026020010181905250505080806104e590610951565b9150506103a2565b5092915050565b6000806060610504600185610323565b9196909550909350915050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561054957610549610511565b60405290565b604051601f8201601f191681016001600160401b038111828210171561057757610577610511565b604052919050565b80356001600160a01b038116811461059657600080fd5b919050565b6000601f83818401126105ad57600080fd5b823560206001600160401b03808311156105c9576105c9610511565b8260051b6105d883820161054f565b93845286810183019383810190898611156105f257600080fd5b84890192505b858310156106c8578235848111156106105760008081fd5b89016040601f19828d0381018213156106295760008081fd5b610631610527565b61063c89850161057f565b815282840135888111156106505760008081fd5b8085019450508d603f8501126106665760008081fd5b888401358881111561067a5761067a610511565b6106898a848e8401160161054f565b92508083528e848287010111156106a05760008081fd5b808486018b85013760009083018a0152808901919091528452505091840191908401906105f8565b9998505050505050505050565b6000602082840312156106e757600080fd5b81356001600160401b038111156106fd57600080fd5b6107098482850161059b565b949350505050565b60005b8381101561072c578181015183820152602001610714565b8381111561073b576000848401525b50505050565b60008151808452610759816020860160208601610711565b601f01601f19169290920160200192915050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b828110156107c957605f198887030184526107b7868351610741565b9550928401929084019060010161079b565b509398975050505050505050565b600080604083850312156107ea57600080fd5b823580151581146107fa57600080fd5b915060208301356001600160401b0381111561081557600080fd5b6108218582860161059b565b9150509250929050565b6000815180845260208085019450848260051b860182860160005b858110156108865783830389528151805115158452850151604086850181905261087281860183610741565b9a87019a9450505090840190600101610846565b5090979650505050505050565b8381528260208201526060604082015260006108b2606083018461082b565b95945050505050565b6000602082840312156108cd57600080fd5b6108d68261057f565b9392505050565b6020815260006108d6602083018461082b565b60006020828403121561090257600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b60008251610931818460208701610711565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156109655761096561093b565b5060010190565b60008282101561097e5761097e61093b565b50039056fea2646970667358221220768fa0c083fe1abfa3fae4e132fbc8a720a6f9b170c9cf89a849493b2f67adb864736f6c63430008090033",
  "devdoc": {
    "author": "Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>",
    "kind": "dev",
    "methods": {},
    "title": "Multicall2 - Aggregate results from multiple read-only function calls",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}