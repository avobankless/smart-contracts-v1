{
  "address": "0x60EA3D18e6d968D5E618E723779a66411629e874",
  "abi": [
    {
      "inputs": [],
      "name": "BP_BOND_ISSUANCE_ID_TOO_HIGH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_BORROW_COOLDOWN_PERIOD_NOT_OVER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_BORROW_MAX_BORROWABLE_AMOUNT_EXCEEDED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_BORROW_OUT_OF_BOUND_AMOUNT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_BORROW_UNSUFFICIENT_BORROWABLE_AMOUNT_WITHIN_BRACKETS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_EARLY_REPAY_NOT_ACTIVATED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_LOAN_ONGOING",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_MULTIPLE_BORROW_AFTER_MATURITY",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_NO_DEPOSIT_TO_WITHDRAW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_OUT_OF_BOUND_MAX_RATE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_OUT_OF_BOUND_MIN_RATE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_POOL_DEFAULTED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_POOL_NOT_ACTIVE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_RATE_SPACING",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_REPAY_NO_ACTIVE_LOAN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_TARGET_BOND_ISSUANCE_INDEX_EMPTY",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BP_UNMATCHED_TOKEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MATH_ADDITION_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MATH_DIVISION_BY_ZERO",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MATH_MULTIPLICATION_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_BORROWER_NOT_OWNER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_ESTABLISHMENT_FEES_TOO_HIGH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_NOT_ENOUGH_PROTOCOL_FEES",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_NO_ONGOING_LOAN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_POOL_ALREADY_SET_FOR_BORROWER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_POOL_DEFAULTED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_POOL_NOT_ACTIVE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_RATE_SPACING_COMPLIANCE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_REPAYMENT_PERIOD_ONGOING",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PC_ZERO_POOL",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "OWNER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "normalizedBorrowedAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "establishmentFees",
          "type": "uint128"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrowerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "BorrowerAllowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrowerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "BorrowerDisallowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "normalizedAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ClaimProtocolFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "OWNER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "remainingLiquidityRewards",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "addedAccruedFees",
          "type": "uint128"
        }
      ],
      "name": "CollectFeesForTick",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "distributedLiquidityRewards",
          "type": "uint128"
        }
      ],
      "name": "Default",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "OWNER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "normalizedRepayAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "repaymentFee",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "normalizedDepositsAfterRepay",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "nextLoanMinStart",
          "type": "uint128"
        }
      ],
      "name": "EarlyRepay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "OWNER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "normalizedBorrowedAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "establishmentFees",
          "type": "uint128"
        }
      ],
      "name": "FurtherBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "OWNER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "normalizedRepayAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "lateRepayFee",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "repaymentFee",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "normalizedDepositsAfterRepay",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "nextLoanMinStart",
          "type": "uint128"
        }
      ],
      "name": "LateRepay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "PoolActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "collectedLiquidityRewards",
          "type": "uint128"
        }
      ],
      "name": "PoolClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingToken",
              "type": "address"
            },
            {
              "internalType": "contract YearnFinanceWrapper",
              "name": "yieldProvider",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "minRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "maxRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rateSpacing",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "maxBorrowableAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "loanDuration",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "distributionRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "cooldownPeriod",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "repaymentPeriod",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lateRepayFeePerBondRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "establishmentFeeRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "repaymentFeeRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "liquidityRewardsActivationThreshold",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "earlyRepay",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct IPoolsController.PoolCreationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "OWNER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "normalizedRepayAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "repaymentFee",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "normalizedDepositsAfterRepay",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "nextLoanMinStart",
          "type": "uint128"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "establishmentRate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "SetEstablishmentFeeRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "distributionRate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "SetLiquidityRewardsDistributionRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "maxTokenDeposit",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "SetMaxBorrowableAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "repaymentFeeRate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "SetRepaymentFeeRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "OWNER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "adjustedRemainingAmountReduction",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "loanedAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "atlendisLiquidityRatio",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "unborrowedRatio",
          "type": "uint128"
        }
      ],
      "name": "TickBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "OWNER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "atlendisLiquidityRatio",
          "type": "uint128"
        }
      ],
      "name": "TickInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "OWNER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "adjustedPendingDeposit",
          "type": "uint128"
        }
      ],
      "name": "TickLoanDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "OWNER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "adjustedAvailableDeposit",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "atlendisLiquidityRatio",
          "type": "uint128"
        }
      ],
      "name": "TickNoLoanDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "OWNER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "adjustedPendingAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "poolBondIssuanceIndexIncremented",
          "type": "bool"
        }
      ],
      "name": "TickPendingDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "OWNER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "adjustedRemainingAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "atlendisLiquidityRatio",
          "type": "uint128"
        }
      ],
      "name": "TickRepay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "OWNER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "adjustedAmountToWithdraw",
          "type": "uint128"
        }
      ],
      "name": "TickWithdrawPending",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "OWNER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "adjustedAmountToWithdraw",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "atlendisLiquidityRatio",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "accruedFeesToWithdraw",
          "type": "uint128"
        }
      ],
      "name": "TickWithdrawRemaining",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "OWNER",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "normalizedAmount",
          "type": "uint128"
        }
      ],
      "name": "TopUpLiquidityRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrowerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "allow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "loanAmount",
          "type": "uint128"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowerAuthorizedPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimProtocolFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "collectFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        }
      ],
      "name": "collectFeesForTick",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingToken",
              "type": "address"
            },
            {
              "internalType": "contract YearnFinanceWrapper",
              "name": "yieldProvider",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "minRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "maxRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rateSpacing",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "maxBorrowableAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "loanDuration",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "distributionRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "cooldownPeriod",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "repaymentPeriod",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lateRepayFeePerBondRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "establishmentFeeRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "repaymentFeeRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "liquidityRewardsActivationThreshold",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "earlyRepay",
              "type": "bool"
            }
          ],
          "internalType": "struct IPoolsController.PoolCreationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createNewPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "normalizedAmount",
          "type": "uint128"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "adjustedAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bondsIssuanceIndex",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrowerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "disallow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "normalizedBorrowedAmount",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "estimateLoanRate",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "estimatedRate",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freezePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "adjustedAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bondsIssuanceIndex",
          "type": "uint128"
        }
      ],
      "name": "getAmountRepartition",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "bondsQuantity",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "normalizedDepositedAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "getDefaultTimestamp",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "defaultTimestamp",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "getPoolAggregates",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "weightedAverageLendingRate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "adjustedPendingDeposits",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "getPoolFeeRates",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "establishmentFeeRate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "repaymentFeeRate",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "getPoolMaturity",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "poolCurrentMaturity",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "getPoolParameters",
      "outputs": [
        {
          "internalType": "address",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "minRate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "maxRate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "rateSpacing",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "maxBorrowableAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "loanDuration",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "liquidityRewardsDistributionRate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "cooldownPeriod",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "repaymentPeriod",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "lateRepayFeePerBondRate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "liquidityRewardsActivationThreshold",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "getPoolState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "defaulted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "closed",
          "type": "bool"
        },
        {
          "internalType": "uint128",
          "name": "currentMaturity",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bondsIssuedQuantity",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "normalizedBorrowedAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "normalizedAvailableDeposits",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "lowerInterestRate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "nextLoanMinStart",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "remainingAdjustedLiquidityRewardsReserve",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "yieldProviderLiquidityRatio",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "currentBondsIssuanceIndex",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "getProtocolFees",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "earlyRepay",
          "type": "bool"
        }
      ],
      "name": "getRepayAmounts",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "normalizedRepayAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "lateRepayFee",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "repaymentFees",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        }
      ],
      "name": "getTickAmounts",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "adjustedTotalAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "adjustedRemainingAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bondsQuantity",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "adjustedPendingAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "atlendisLiquidityRatio",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "accruedFees",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        }
      ],
      "name": "getTickLastUpdate",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "lastFeeDistributionTimestamp",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        }
      ],
      "name": "getTickLiquidityRatio",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "liquidityRatio",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "adjustedAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bondsIssuanceIndex",
          "type": "uint128"
        }
      ],
      "name": "getWithdrawAmounts",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "adjustedAmountToWithdraw",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "depositedAmountToWithdraw",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "remainingBondsQuantity",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bondsMaturity",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "governance",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "isEarlyRepay",
      "outputs": [
        {
          "internalType": "bool",
          "name": "earlyRepay",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolsAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "setDefault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "establishmentFeeRate",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "setEstablishmentFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "distributionRate",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "setLiquidityRewardsDistributionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "maxBorrowableAmount",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "setMaxBorrowableAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "repaymentFeeRate",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "setRepaymentFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "topUpLiquidityRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unfreezePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "adjustedAmount",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "oldRate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "newRate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "oldBondsIssuanceIndex",
          "type": "uint128"
        }
      ],
      "name": "updateRate",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "newAdjustedAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "newBondsIssuanceIndex",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "normalizedAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "rate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "adjustedAmountToWithdraw",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bondsIssuanceIndex",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "normalizedDepositedAmountToWithdraw",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x403aab920bd67747ea3f15d39e08674699204116186b7718d9cc7d577968f965",
  "receipt": {
    "to": null,
    "from": "0xfd94B585517d532BC4B80E35bC26383E7834f8b9",
    "contractAddress": "0x60EA3D18e6d968D5E618E723779a66411629e874",
    "transactionIndex": 1,
    "gasUsed": "5310320",
    "logsBloom": "0x
    "blockHash": "0xc7164b23d3cd8b84e91646b9efab181244e0307d76de5a5fea142b7f5e05e7e0",
    "transactionHash": "0x403aab920bd67747ea3f15d39e08674699204116186b7718d9cc7d577968f965",
    "logs": [],
    "blockNumber": 395140,
    "cumulativeGasUsed": "5310320",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a44d47f00d436b23a82c0c58b92fb136",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BP_BOND_ISSUANCE_ID_TOO_HIGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_BORROW_COOLDOWN_PERIOD_NOT_OVER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_BORROW_MAX_BORROWABLE_AMOUNT_EXCEEDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_BORROW_OUT_OF_BOUND_AMOUNT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_BORROW_UNSUFFICIENT_BORROWABLE_AMOUNT_WITHIN_BRACKETS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_EARLY_REPAY_NOT_ACTIVATED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_LOAN_ONGOING\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_MULTIPLE_BORROW_AFTER_MATURITY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_NO_DEPOSIT_TO_WITHDRAW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_OUT_OF_BOUND_MAX_RATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_OUT_OF_BOUND_MIN_RATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_POOL_DEFAULTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_POOL_NOT_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_RATE_SPACING\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_REPAY_NO_ACTIVE_LOAN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_TARGET_BOND_ISSUANCE_INDEX_EMPTY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BP_UNMATCHED_TOKEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MATH_ADDITION_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MATH_DIVISION_BY_ZERO\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MATH_MULTIPLICATION_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_BORROWER_NOT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_ESTABLISHMENT_FEES_TOO_HIGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_NOT_ENOUGH_PROTOCOL_FEES\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_NO_ONGOING_LOAN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_POOL_ALREADY_SET_FOR_BORROWER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_POOL_DEFAULTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_POOL_NOT_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_RATE_SPACING_COMPLIANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_REPAYMENT_PERIOD_ONGOING\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PC_ZERO_POOL\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"OWNER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"normalizedBorrowedAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"establishmentFees\",\"type\":\"uint128\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrowerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"BorrowerAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrowerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"BorrowerDisallowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"normalizedAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ClaimProtocolFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OWNER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"remainingLiquidityRewards\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"addedAccruedFees\",\"type\":\"uint128\"}],\"name\":\"CollectFeesForTick\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"distributedLiquidityRewards\",\"type\":\"uint128\"}],\"name\":\"Default\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"OWNER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"normalizedRepayAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"repaymentFee\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"normalizedDepositsAfterRepay\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"nextLoanMinStart\",\"type\":\"uint128\"}],\"name\":\"EarlyRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"OWNER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"normalizedBorrowedAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"establishmentFees\",\"type\":\"uint128\"}],\"name\":\"FurtherBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"OWNER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"normalizedRepayAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"lateRepayFee\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"repaymentFee\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"normalizedDepositsAfterRepay\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"nextLoanMinStart\",\"type\":\"uint128\"}],\"name\":\"LateRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"PoolActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"collectedLiquidityRewards\",\"type\":\"uint128\"}],\"name\":\"PoolClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"contract YearnFinanceWrapper\",\"name\":\"yieldProvider\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rateSpacing\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxBorrowableAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"loanDuration\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"distributionRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"cooldownPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"repaymentPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lateRepayFeePerBondRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"establishmentFeeRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"repaymentFeeRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"liquidityRewardsActivationThreshold\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"earlyRepay\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IPoolsController.PoolCreationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"OWNER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"normalizedRepayAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"repaymentFee\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"normalizedDepositsAfterRepay\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"nextLoanMinStart\",\"type\":\"uint128\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"establishmentRate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"SetEstablishmentFeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"distributionRate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"SetLiquidityRewardsDistributionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"maxTokenDeposit\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"SetMaxBorrowableAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"repaymentFeeRate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"SetRepaymentFeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OWNER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"adjustedRemainingAmountReduction\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"loanedAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"atlendisLiquidityRatio\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"unborrowedRatio\",\"type\":\"uint128\"}],\"name\":\"TickBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OWNER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"atlendisLiquidityRatio\",\"type\":\"uint128\"}],\"name\":\"TickInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OWNER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"adjustedPendingDeposit\",\"type\":\"uint128\"}],\"name\":\"TickLoanDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OWNER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"adjustedAvailableDeposit\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"atlendisLiquidityRatio\",\"type\":\"uint128\"}],\"name\":\"TickNoLoanDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OWNER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"adjustedPendingAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"poolBondIssuanceIndexIncremented\",\"type\":\"bool\"}],\"name\":\"TickPendingDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OWNER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"adjustedRemainingAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"atlendisLiquidityRatio\",\"type\":\"uint128\"}],\"name\":\"TickRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OWNER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"adjustedAmountToWithdraw\",\"type\":\"uint128\"}],\"name\":\"TickWithdrawPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OWNER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"adjustedAmountToWithdraw\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"atlendisLiquidityRatio\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"accruedFeesToWithdraw\",\"type\":\"uint128\"}],\"name\":\"TickWithdrawRemaining\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OWNER\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"normalizedAmount\",\"type\":\"uint128\"}],\"name\":\"TopUpLiquidityRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"allow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"loanAmount\",\"type\":\"uint128\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowerAuthorizedPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"name\":\"collectFeesForTick\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"contract YearnFinanceWrapper\",\"name\":\"yieldProvider\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rateSpacing\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxBorrowableAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"loanDuration\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"distributionRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"cooldownPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"repaymentPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lateRepayFeePerBondRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"establishmentFeeRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"repaymentFeeRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"liquidityRewardsActivationThreshold\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"earlyRepay\",\"type\":\"bool\"}],\"internalType\":\"struct IPoolsController.PoolCreationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createNewPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"normalizedAmount\",\"type\":\"uint128\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"adjustedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bondsIssuanceIndex\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"disallow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"normalizedBorrowedAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"estimateLoanRate\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"estimatedRate\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"adjustedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bondsIssuanceIndex\",\"type\":\"uint128\"}],\"name\":\"getAmountRepartition\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"bondsQuantity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"normalizedDepositedAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"getDefaultTimestamp\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"defaultTimestamp\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"getPoolAggregates\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"weightedAverageLendingRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"adjustedPendingDeposits\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"getPoolFeeRates\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"establishmentFeeRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"repaymentFeeRate\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"getPoolMaturity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"poolCurrentMaturity\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"getPoolParameters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rateSpacing\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxBorrowableAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"loanDuration\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"liquidityRewardsDistributionRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"cooldownPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"repaymentPeriod\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lateRepayFeePerBondRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"liquidityRewardsActivationThreshold\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"getPoolState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"defaulted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"currentMaturity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bondsIssuedQuantity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"normalizedBorrowedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"normalizedAvailableDeposits\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lowerInterestRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"nextLoanMinStart\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"remainingAdjustedLiquidityRewardsReserve\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"yieldProviderLiquidityRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentBondsIssuanceIndex\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"getProtocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"earlyRepay\",\"type\":\"bool\"}],\"name\":\"getRepayAmounts\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"normalizedRepayAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lateRepayFee\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"repaymentFees\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"name\":\"getTickAmounts\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"adjustedTotalAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"adjustedRemainingAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bondsQuantity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"adjustedPendingAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"atlendisLiquidityRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"accruedFees\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"name\":\"getTickLastUpdate\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"lastFeeDistributionTimestamp\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"name\":\"getTickLiquidityRatio\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityRatio\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"adjustedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bondsIssuanceIndex\",\"type\":\"uint128\"}],\"name\":\"getWithdrawAmounts\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"adjustedAmountToWithdraw\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"depositedAmountToWithdraw\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"remainingBondsQuantity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bondsMaturity\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"isEarlyRepay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"earlyRepay\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolsAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"setDefault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"establishmentFeeRate\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"setEstablishmentFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"distributionRate\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"setLiquidityRewardsDistributionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"maxBorrowableAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"setMaxBorrowableAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"repaymentFeeRate\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"setRepaymentFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"topUpLiquidityRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unfreezePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"adjustedAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"oldRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"newRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"oldBondsIssuanceIndex\",\"type\":\"uint128\"}],\"name\":\"updateRate\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"newAdjustedAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"newBondsIssuanceIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"normalizedAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"adjustedAmountToWithdraw\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bondsIssuanceIndex\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"normalizedDepositedAmountToWithdraw\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allow(address,address)\":{\"params\":{\"borrowerAddress\":\"The address to allow\",\"ownerAddress\":\"The identifier of the pool*\"}},\"borrow(address,uint128)\":{\"params\":{\"loanAmount\":\"The total amount of the loan*\",\"to\":\"The address to which the borrowed funds should be sent.\"}},\"claimProtocolFees(address,uint128,address)\":{\"params\":{\"amount\":\"The amount of tokens claimed\",\"ownerAddress\":\"The identifier of the pool\",\"to\":\"The address receiving the fees*\"}},\"collectFees(address)\":{\"params\":{\"ownerAddress\":\"The identifier of the pool*\"}},\"collectFeesForTick(address,uint128)\":{\"params\":{\"ownerAddress\":\"The identifier of the pool*\"}},\"createNewPool((address,address,address,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,bool))\":{\"params\":{\"params\":\"The parameters of the new pool*\"}},\"deposit(uint128,address,address,address,uint128)\":{\"params\":{\"normalizedAmount\":\"The amount of the given asset to deposit\",\"ownerAddress\":\"The identifier of the pool\",\"rate\":\"The rate at which to bid for a bond\",\"sender\":\"The lender address who calls the deposit function on the Position\",\"underlyingToken\":\"Contract' address of the token to be deposited\"},\"returns\":{\"adjustedAmount\":\"Deposited amount adjusted with current liquidity index\",\"bondsIssuanceIndex\":\"The identifier of the borrow group to which the deposit has been allocated*\"}},\"disallow(address,address)\":{\"params\":{\"borrowerAddress\":\"The address to disallow\",\"ownerAddress\":\"The identifier of the pool*\"}},\"estimateLoanRate(uint128,address)\":{\"params\":{\"normalizedBorrowedAmount\":\"The amount to be borrowed from the pool\",\"ownerAddress\":\"The identifier of the pool\"},\"returns\":{\"estimatedRate\":\"The estimated loan rate for the current state of the pool*\"}},\"getAmountRepartition(address,uint128,uint128,uint128)\":{\"params\":{\"adjustedAmount\":\"Adjusted amount of tokens currently on third party yield provider\",\"bondsIssuanceIndex\":\"The identifier of the borrow group\",\"ownerAddress\":\"The identifier of the pool\",\"rate\":\"Tick's rate\"},\"returns\":{\"bondsQuantity\":\"Quantity of bonds held\",\"normalizedDepositedAmount\":\"Amount of deposit currently on third party yield provider*\"}},\"getDefaultTimestamp(address)\":{\"returns\":{\"defaultTimestamp\":\"The timestamp at which the pool was defaulted*\"}},\"getPoolAggregates(address)\":{\"params\":{\"ownerAddress\":\"The identifier of the pool\"},\"returns\":{\"adjustedPendingDeposits\":\"Amount of tokens deposited after bond issuance and currently on third party yield provider*\",\"weightedAverageLendingRate\":\"The average deposit bidding rate in the order book\"}},\"getPoolFeeRates(address)\":{\"returns\":{\"establishmentFeeRate\":\"Amount of fees paid to the protocol at borrow time\",\"repaymentFeeRate\":\"Amount of fees paid to the protocol at repay time*\"}},\"getPoolMaturity(address)\":{\"params\":{\"ownerAddress\":\"The identifier of the pool\"},\"returns\":{\"poolCurrentMaturity\":\"The pool's current maturity*\"}},\"getPoolParameters(address)\":{\"params\":{\"ownerAddress\":\"The identifier of the pool\"},\"returns\":{\"cooldownPeriod\":\"Period after a loan during which a borrower cannot take another loan\",\"lateRepayFeePerBondRate\":\"Penalty a borrower has to pay when it repays late\",\"liquidityRewardsActivationThreshold\":\"Minimum amount of liqudity rewards a borrower has to deposit to active the pool*\",\"liquidityRewardsDistributionRate\":\"Rate at which liquidity rewards are distributed to lenders\",\"loanDuration\":\"Duration of a loan in the pool\",\"maxBorrowableAmount\":\"Maximum amount of tokens that can be borrowed from the pool\",\"maxRate\":\"Maximum rate of deposits accepted in the pool\",\"minRate\":\"Minimum rate of deposits accepted in the pool\",\"rateSpacing\":\"Difference between two rates in the pool\",\"repaymentPeriod\":\"Period after a loan end during which a borrower can repay without penalty\",\"underlyingToken\":\"Address of the underlying token of the pool\"}},\"getPoolState(address)\":{\"params\":{\"ownerAddress\":\"The identifier of the pool\"},\"returns\":{\"active\":\"Signals if a pool is active and ready to accept deposits\",\"bondsIssuedQuantity\":\"Amount of bonds issued, to be repaid at maturity\",\"closed\":\"Signals if a pool was closed\",\"currentBondsIssuanceIndex\":\"Current borrow period identifier of the pool*\",\"currentMaturity\":\"End timestamp of current loan\",\"defaulted\":\"Signals if a pool was defaulted\",\"lowerInterestRate\":\"Minimum rate at which a deposit was made\",\"nextLoanMinStart\":\"Cool down period, minimum timestamp after which a new loan can be taken\",\"normalizedAvailableDeposits\":\"Actual amount of tokens available to be borrowed\",\"normalizedBorrowedAmount\":\"Actual amount of tokens that were borrowed\",\"remainingAdjustedLiquidityRewardsReserve\":\"Remaining liquidity rewards to be distributed to lenders\",\"yieldProviderLiquidityRatio\":\"Last recorded yield provider liquidity ratio\"}},\"getPools()\":{\"returns\":{\"_0\":\"pools array with pools created*\"}},\"getRepayAmounts(address,bool)\":{\"params\":{\"ownerAddress\":\"The identifier of the pool\"},\"returns\":{\"normalizedRepayAmount\":\"Total repay amount*\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTickAmounts(address,uint128)\":{\"params\":{\"ownerAddress\":\"The identifier of the pool\",\"rate\":\"The tick rate from which to get data\"},\"returns\":{\"accruedFees\":\"The total fees claimable in the current tick, either from yield provider interests or liquidity rewards accrual*\",\"adjustedPendingAmount\":\"Amount of deposit in tick deposited with the underlying yield provider that were deposited after bond issuance\",\"adjustedRemainingAmount\":\"Amount of tokens in tick deposited with the underlying yield provider that were deposited before bond issuance\",\"adjustedTotalAmount\":\"Total amount of deposit in the tick, excluding the pending amounts\",\"atlendisLiquidityRatio\":\"The liquidity ratio of the given tick\",\"bondsQuantity\":\"The quantity of bonds within the tick\"}},\"getTickLastUpdate(address,uint128)\":{\"params\":{\"ownerAddress\":\"The identifier of the pool pool\",\"rate\":\"The tick rate from which to get data\"},\"returns\":{\"lastFeeDistributionTimestamp\":\"Timestamp of the last fee's distribution to the tick*\"}},\"getTickLiquidityRatio(address,uint128)\":{\"params\":{\"ownerAddress\":\"The identifier of the pool\",\"rate\":\"The tick rate from which to extract the liquidity ratio\"},\"returns\":{\"liquidityRatio\":\"The liquidity ratio of the given tick*\"}},\"getWithdrawAmounts(address,uint128,uint128,uint128)\":{\"details\":\"This method is meant to be used exclusively with the withdraw() method Under certain circumstances, this method can return incorrect values, that would otherwise be rejected by the checks made in the withdraw() method\",\"params\":{\"adjustedAmount\":\"The amount of tokens in the position, adjusted to the deposit liquidity ratio\",\"bondsIssuanceIndex\":\"An index determining deposit timing\",\"ownerAddress\":\"The identifier of the pool\",\"rate\":\"The rate the position is bidding for\"},\"returns\":{\"adjustedAmountToWithdraw\":\"The amount of tokens to withdraw, adjuste for borrow pool use\",\"bondsMaturity\":\"The maturity of bonds remaining within the position after withdraw*\",\"depositedAmountToWithdraw\":\"The amount of tokens to withdraw, adjuste for position use\",\"remainingBondsQuantity\":\"The quantity of bonds remaining within the position\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isEarlyRepay(address)\":{\"returns\":{\"earlyRepay\":\"Flag that signifies whether the early repay feature is activated or not*\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setDefault(address)\":{\"params\":{\"ownerAddress\":\"The identifier of the pool to default*\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"topUpLiquidityRewards(uint128)\":{\"params\":{\"amount\":\"Amount of tokens that will be add up to the pool's liquidity rewards reserve*\"}},\"updateRate(uint128,address,uint128,uint128,uint128)\":{\"params\":{\"adjustedAmount\":\"The adjusted balance of tokens of the given position\",\"newRate\":\"The new rate of the position\",\"oldBondsIssuanceIndex\":\"The identifier of the borrow group from the given position\",\"oldRate\":\"The current rate of the position\",\"ownerAddress\":\"The identifier of the pool\"},\"returns\":{\"newAdjustedAmount\":\"The updated amount of tokens of the position adjusted by the new tick's global liquidity ratio\",\"newBondsIssuanceIndex\":\"The new borrow group id to which the updated position is linked*\"}},\"withdraw(address,uint128,uint128,uint128,address)\":{\"params\":{\"adjustedAmountToWithdraw\":\"The actual amount of tokens to withdraw from the position\",\"bondsIssuanceIndex\":\"An index determining deposit timing\",\"owner\":\"The address to which the withdrawns funds are sent\",\"ownerAddress\":\"The identifier of the pool\",\"rate\":\"The rate the position is bidding for\"},\"returns\":{\"normalizedDepositedAmountToWithdraw\":\"Actual amount of tokens withdrawn and sent to the lender*\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Borrow(address,uint128,uint128)\":{\"notice\":\"Emitted after a successful borrow\"},\"BorrowerAllowed(address,address)\":{\"notice\":\"Emitted after a borrower address was allowed to borrow from a pool\"},\"BorrowerDisallowed(address,address)\":{\"notice\":\"Emitted after a borrower address was disallowed to borrow from a pool\"},\"ClaimProtocolFees(address,uint128,address)\":{\"notice\":\"Emitted after governance claims the fees associated with a pool\"},\"CollectFeesForTick(address,uint128,uint128,uint128)\":{\"notice\":\"Emitted when liquidity rewards are distributed to a tick\"},\"Default(address,uint128)\":{\"notice\":\"Emitted when a pool defaults on its loan repayment\"},\"EarlyRepay(address,uint128,uint128,uint128,uint128)\":{\"notice\":\"Emitted after a successful early repay\"},\"FurtherBorrow(address,uint128,uint128)\":{\"notice\":\"Emitted after a successful further borrow\"},\"LateRepay(address,uint128,uint128,uint128,uint128,uint128)\":{\"notice\":\"Emitted after a successful repay, made after the repayment period Includes a late repay fee\"},\"PoolActivated(address)\":{\"notice\":\"Emitted when a pool is active, i.e. after the borrower deposits enough tokens in its pool liquidity rewards reserve as agreed before the pool creation\"},\"PoolClosed(address,uint128)\":{\"notice\":\"Emitted after pool is closed\"},\"PoolCreated((address,address,address,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,bool))\":{\"notice\":\"Emitted after a pool was creted*\"},\"Repay(address,uint128,uint128,uint128,uint128)\":{\"notice\":\"Emitted after a successful repay\"},\"SetEstablishmentFeeRate(uint128,address)\":{\"notice\":\"Emitted after governance sets the establishment fee for a pool*\"},\"SetLiquidityRewardsDistributionRate(uint128,address)\":{\"notice\":\"Emitted after governance sets the liquidity rewards distribution rate for a pool*\"},\"SetMaxBorrowableAmount(uint128,address)\":{\"notice\":\"Emitted after governance sets the maximum borrowable amount for a pool*\"},\"SetRepaymentFeeRate(uint128,address)\":{\"notice\":\"Emitted after governance sets the repayment fee for a pool*\"},\"TickBorrow(address,uint128,uint128,uint128,uint128,uint128)\":{\"notice\":\"Emitted when a borrow successfully impacts a tick\"},\"TickInitialized(address,uint128,uint128)\":{\"notice\":\"Emitted when a tick is initialized, i.e. when its first deposited in\"},\"TickLoanDeposit(address,uint128,uint128)\":{\"notice\":\"Emitted after a deposit on a tick that was done during a loan\"},\"TickNoLoanDeposit(address,uint128,uint128,uint128)\":{\"notice\":\"Emitted after a deposit on a tick that was done without an active loan\"},\"TickPendingDeposit(address,uint128,uint128,bool)\":{\"notice\":\"Emitted when pending amounts are merged with the rest of the pool during a repay\"},\"TickRepay(address,uint128,uint128,uint128)\":{\"notice\":\"Emitted when funds from a tick are repaid by the borrower\"},\"TickWithdrawPending(address,uint128,uint128)\":{\"notice\":\"Emitted when a withdraw is done outside of a loan on the tick\"},\"TickWithdrawRemaining(address,uint128,uint128,uint128,uint128)\":{\"notice\":\"Emitted when a withdraw is done during a loan on the tick\"},\"TopUpLiquidityRewards(address,uint128)\":{\"notice\":\"Emitted after a borrower successfully deposits tokens in its pool liquidity rewards reserve\"}},\"kind\":\"user\",\"methods\":{\"allow(address,address)\":{\"notice\":\"Allow an address to interact with a borrower pool\"},\"borrow(address,uint128)\":{\"notice\":\"Called by the borrower to sell bonds to the order book. The affected ticks get updated according the amount of bonds sold.\"},\"claimProtocolFees(address,uint128,address)\":{\"notice\":\"Withdraws protocol fees to a target address\"},\"collectFees(address)\":{\"notice\":\"Collect yield provider fees as well as liquidity rewards for the whole pool Iterates over all pool initialized ticks\"},\"collectFeesForTick(address,uint128)\":{\"notice\":\"Collect yield provider fees as well as liquidity rewards for the target tick\"},\"createNewPool((address,address,address,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,bool))\":{\"notice\":\"Creates a new pool\"},\"deposit(uint128,address,address,address,uint128)\":{\"notice\":\"Gets called within the Position.deposit() function and enables a lender to deposit assets into a given pool's order book. The lender specifies a rate (price) at which it is willing to lend out its assets (bid on the zero coupon bond). The full amount will initially be deposited on the underlying yield provider until the borrower sells bonds at the specified rate.\"},\"disallow(address,address)\":{\"notice\":\"Remove borrower pool interaction rights from an address\"},\"estimateLoanRate(uint128,address)\":{\"notice\":\"Estimates the lending rate corresponding to the input amount, depending on the current state of the pool\"},\"freezePool()\":{\"notice\":\"Stops all actions on all pools*\"},\"getAmountRepartition(address,uint128,uint128,uint128)\":{\"notice\":\"Returns the token amount's repartition between bond quantity and normalized deposited amount currently placed on third party yield provider\"},\"getDefaultTimestamp(address)\":{\"notice\":\"Returns the state of a pool\"},\"getPoolAggregates(address)\":{\"notice\":\"Returns the current state of the pool's parameters\"},\"getPoolFeeRates(address)\":{\"notice\":\"Returns the fee rates of a pool\"},\"getPoolMaturity(address)\":{\"notice\":\"Returns the current maturity of the pool\"},\"getPoolParameters(address)\":{\"notice\":\"Returns the parameters of a pool\"},\"getPoolState(address)\":{\"notice\":\"Returns the state of a pool\"},\"getPools()\":{\"notice\":\"Returns all the pools created\"},\"getRepayAmounts(address,bool)\":{\"notice\":\"Returns the total amount a borrower has to repay to a pool. Includes borrowed amount, late repay fees and protocol fees\"},\"getTickAmounts(address,uint128)\":{\"notice\":\"Returns the repartition between bonds and deposits of the given tick.\"},\"getTickLastUpdate(address,uint128)\":{\"notice\":\"Returns the timestamp of the last fee distribution to the tick\"},\"getTickLiquidityRatio(address,uint128)\":{\"notice\":\"Returns the liquidity ratio of a given tick in a pool's order book. The liquidity ratio is an accounting construct to deduce the accrued interest over time.\"},\"getWithdrawAmounts(address,uint128,uint128,uint128)\":{\"notice\":\"Gets called within the Position.withdraw() function and enables a lender to evaluate the exact amount of tokens it is allowed to withdraw\"},\"isEarlyRepay(address)\":{\"notice\":\"Returns the state of a pool\"},\"repay()\":{\"notice\":\"Repays a currently outstanding bonds of the given pool.*\"},\"setDefault(address)\":{\"notice\":\"Flags the pool as defaulted\"},\"setEstablishmentFeeRate(uint128,address)\":{\"notice\":\"Set the pool establishment protocol fee rate*\"},\"setLiquidityRewardsDistributionRate(uint128,address)\":{\"notice\":\"Set the pool liquidity rewards distribution rate*\"},\"setMaxBorrowableAmount(uint128,address)\":{\"notice\":\"Set the maximum amount of tokens that can be borrowed in the target pool*\"},\"setRepaymentFeeRate(uint128,address)\":{\"notice\":\"Set the pool repayment protocol fee rate*\"},\"topUpLiquidityRewards(uint128)\":{\"notice\":\"Called by the borrower to top up liquidity rewards' reserve that is distributed to liquidity providers at the pre-defined distribution rate.\"},\"unfreezePool()\":{\"notice\":\"Cancel a freeze, makes actions available again on all pools*\"},\"updateRate(uint128,address,uint128,uint128,uint128)\":{\"notice\":\"Gets called within Position.updateRate() and updates the order book ticks affected by the position updating its rate. This is only possible as long as there are no bonds in the position, i.e the full position currently lies with the yield provider\"},\"withdraw(address,uint128,uint128,uint128,address)\":{\"notice\":\"Gets called within the Position.withdraw() function and enables a lender to withdraw assets that are deposited with the underlying yield provider\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/BorrowerPools.sol\":\"BorrowerPools\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        console.log(\\\"transfering from\\\");\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x9612ed6641ba0d098c8e111ba39c7091039ffe88d235efa1a2aff89497c5575d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"},\"src/BorrowerPools.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IBorrowerPools.sol\\\";\\n\\nimport \\\"./lib/Errors.sol\\\";\\nimport \\\"./lib/PoolLogic.sol\\\";\\nimport \\\"./lib/Scaling.sol\\\";\\nimport \\\"./lib/Types.sol\\\";\\nimport \\\"./lib/Uint128WadRayMath.sol\\\";\\n\\nimport \\\"./PoolsController.sol\\\";\\n\\ncontract BorrowerPools is PoolsController, IBorrowerPools {\\n  using PoolLogic for Types.Pool;\\n  using Scaling for uint128;\\n  using Uint128WadRayMath for uint128;\\n\\n  function initialize(address governance) public initializer {\\n    _initialize();\\n    if (governance == address(0)) {\\n      // Prevent setting governance to null account\\n      governance = _msgSender();\\n    }\\n    _grantRole(DEFAULT_ADMIN_ROLE, governance);\\n    _grantRole(Roles.GOVERNANCE_ROLE, governance);\\n    _setRoleAdmin(Roles.BORROWER_ROLE, Roles.GOVERNANCE_ROLE);\\n    _setRoleAdmin(Roles.POSITION_ROLE, Roles.GOVERNANCE_ROLE);\\n  }\\n\\n  // VIEW METHODS\\n\\n  /**\\n   * @notice Returns the liquidity ratio of a given tick in a pool's order book.\\n   * The liquidity ratio is an accounting construct to deduce the accrued interest over time.\\n   * @param ownerAddress The identifier of the pool\\n   * @param rate The tick rate from which to extract the liquidity ratio\\n   * @return liquidityRatio The liquidity ratio of the given tick\\n   **/\\n  function getTickLiquidityRatio(address ownerAddress, uint128 rate)\\n    public\\n    view\\n    override\\n    returns (uint128 liquidityRatio)\\n  {\\n    liquidityRatio = pools[ownerAddress].ticks[rate].atlendisLiquidityRatio;\\n    if (liquidityRatio == 0) {\\n      liquidityRatio = uint128(PoolLogic.RAY);\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the repartition between bonds and deposits of the given tick.\\n   * @param ownerAddress The identifier of the pool\\n   * @param rate The tick rate from which to get data\\n   * @return adjustedTotalAmount Total amount of deposit in the tick, excluding\\n   * the pending amounts\\n   * @return adjustedRemainingAmount Amount of tokens in tick deposited with the\\n   * underlying yield provider that were deposited before bond issuance\\n   * @return bondsQuantity The quantity of bonds within the tick\\n   * @return adjustedPendingAmount Amount of deposit in tick deposited with the\\n   * underlying yield provider that were deposited after bond issuance\\n   * @return atlendisLiquidityRatio The liquidity ratio of the given tick\\n   * @return accruedFees The total fees claimable in the current tick, either from\\n   * yield provider interests or liquidity rewards accrual\\n   **/\\n  function getTickAmounts(address ownerAddress, uint128 rate)\\n    public\\n    view\\n    override\\n    returns (\\n      uint128 adjustedTotalAmount,\\n      uint128 adjustedRemainingAmount,\\n      uint128 bondsQuantity,\\n      uint128 adjustedPendingAmount,\\n      uint128 atlendisLiquidityRatio,\\n      uint128 accruedFees\\n    )\\n  {\\n    Types.Tick storage tick = pools[ownerAddress].ticks[rate];\\n    return (\\n      tick.adjustedTotalAmount,\\n      tick.adjustedRemainingAmount,\\n      tick.bondsQuantity,\\n      tick.adjustedPendingAmount,\\n      tick.atlendisLiquidityRatio,\\n      tick.accruedFees\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the timestamp of the last fee distribution to the tick\\n   * @param ownerAddress The identifier of the pool pool\\n   * @param rate The tick rate from which to get data\\n   * @return lastFeeDistributionTimestamp Timestamp of the last fee's distribution to the tick\\n   **/\\n  function getTickLastUpdate(address ownerAddress, uint128 rate)\\n    public\\n    view\\n    override\\n    returns (uint128 lastFeeDistributionTimestamp)\\n  {\\n    Types.Tick storage tick = pools[ownerAddress].ticks[rate];\\n    return tick.lastFeeDistributionTimestamp;\\n  }\\n\\n  /**\\n   * @notice Returns the current state of the pool's parameters\\n   * @param ownerAddress The identifier of the pool\\n   * @return weightedAverageLendingRate The average deposit bidding rate in the order book\\n   * @return adjustedPendingDeposits Amount of tokens deposited after bond\\n   * issuance and currently on third party yield provider\\n   **/\\n  function getPoolAggregates(address ownerAddress)\\n    external\\n    view\\n    override\\n    returns (uint128 weightedAverageLendingRate, uint128 adjustedPendingDeposits)\\n  {\\n    Types.Pool storage pool = pools[ownerAddress];\\n    Types.PoolParameters storage parameters = pools[ownerAddress].parameters;\\n\\n    adjustedPendingDeposits = 0;\\n\\n    if (pool.state.currentMaturity == 0) {\\n      weightedAverageLendingRate = estimateLoanRate(pool.parameters.MAX_BORROWABLE_AMOUNT, ownerAddress);\\n    } else {\\n      uint128 amountWeightedRate = 0;\\n      uint128 totalAmount = 0;\\n      uint128 rate = parameters.MIN_RATE;\\n      for (rate; rate != parameters.MAX_RATE + parameters.RATE_SPACING; rate += parameters.RATE_SPACING) {\\n        amountWeightedRate += pool.ticks[rate].normalizedLoanedAmount.wadMul(rate);\\n        totalAmount += pool.ticks[rate].normalizedLoanedAmount;\\n        adjustedPendingDeposits += pool.ticks[rate].adjustedPendingAmount;\\n      }\\n      weightedAverageLendingRate = amountWeightedRate.wadDiv(totalAmount);\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the current maturity of the pool\\n   * @param ownerAddress The identifier of the pool\\n   * @return poolCurrentMaturity The pool's current maturity\\n   **/\\n  function getPoolMaturity(address ownerAddress) public view override returns (uint128 poolCurrentMaturity) {\\n    return pools[ownerAddress].state.currentMaturity;\\n  }\\n\\n  /**\\n   * @notice Estimates the lending rate corresponding to the input amount,\\n   * depending on the current state of the pool\\n   * @param normalizedBorrowedAmount The amount to be borrowed from the pool\\n   * @param ownerAddress The identifier of the pool\\n   * @return estimatedRate The estimated loan rate for the current state of the pool\\n   **/\\n  function estimateLoanRate(uint128 normalizedBorrowedAmount, address ownerAddress)\\n    public\\n    view\\n    override\\n    returns (uint128 estimatedRate)\\n  {\\n    Types.Pool storage pool = pools[ownerAddress];\\n    Types.PoolParameters storage parameters = pool.parameters;\\n\\n    if (pool.state.currentMaturity > 0 || pool.state.defaulted || pool.state.closed || !pool.state.active) {\\n      return 0;\\n    }\\n\\n    if (normalizedBorrowedAmount > pool.parameters.MAX_BORROWABLE_AMOUNT) {\\n      normalizedBorrowedAmount = pool.parameters.MAX_BORROWABLE_AMOUNT;\\n    }\\n\\n    uint128 yieldProviderLiquidityRatio = uint128(parameters.YIELD_PROVIDER.getReserveNormalizedIncome());\\n    uint128 rate = pool.parameters.MIN_RATE;\\n    uint128 normalizedRemainingAmount = normalizedBorrowedAmount;\\n    uint128 amountWeightedRate = 0;\\n    for (rate; rate != parameters.MAX_RATE + parameters.RATE_SPACING; rate += parameters.RATE_SPACING) {\\n      (uint128 atlendisLiquidityRatio, , , ) = pool.peekFeesForTick(rate, yieldProviderLiquidityRatio);\\n      uint128 tickAmount = pool.ticks[rate].adjustedRemainingAmount.wadRayMul(atlendisLiquidityRatio);\\n      if (tickAmount < normalizedRemainingAmount) {\\n        normalizedRemainingAmount -= tickAmount;\\n        amountWeightedRate += tickAmount.wadMul(rate);\\n      } else {\\n        amountWeightedRate += normalizedRemainingAmount.wadMul(rate);\\n        normalizedRemainingAmount = 0;\\n        break;\\n      }\\n    }\\n    if (normalizedBorrowedAmount == normalizedRemainingAmount) {\\n      return 0;\\n    }\\n    estimatedRate = amountWeightedRate.wadDiv(normalizedBorrowedAmount - normalizedRemainingAmount);\\n  }\\n\\n  /**\\n   * @notice Returns the token amount's repartition between bond quantity and normalized\\n   * deposited amount currently placed on third party yield provider\\n   * @param ownerAddress The identifier of the pool\\n   * @param rate Tick's rate\\n   * @param adjustedAmount Adjusted amount of tokens currently on third party yield provider\\n   * @param bondsIssuanceIndex The identifier of the borrow group\\n   * @return bondsQuantity Quantity of bonds held\\n   * @return normalizedDepositedAmount Amount of deposit currently on third party yield provider\\n   **/\\n  function getAmountRepartition(\\n    address ownerAddress,\\n    uint128 rate,\\n    uint128 adjustedAmount,\\n    uint128 bondsIssuanceIndex\\n  ) public view override returns (uint128 bondsQuantity, uint128 normalizedDepositedAmount) {\\n    Types.Pool storage pool = pools[ownerAddress];\\n    uint128 yieldProviderLiquidityRatio = uint128(pool.parameters.YIELD_PROVIDER.getReserveNormalizedIncome());\\n\\n    if (bondsIssuanceIndex > pool.state.currentBondsIssuanceIndex) {\\n      return (0, adjustedAmount.wadRayMul(yieldProviderLiquidityRatio));\\n    }\\n\\n    uint128 adjustedDepositedAmount;\\n    (bondsQuantity, adjustedDepositedAmount) = pool.computeAmountRepartitionForTick(\\n      rate,\\n      adjustedAmount,\\n      bondsIssuanceIndex\\n    );\\n\\n    (uint128 atlendisLiquidityRatio, uint128 accruedFees, , ) = pool.peekFeesForTick(rate, yieldProviderLiquidityRatio);\\n    uint128 accruedFeesShare = pool.peekAccruedFeesShare(rate, adjustedDepositedAmount, accruedFees);\\n    normalizedDepositedAmount = adjustedDepositedAmount.wadRayMul(atlendisLiquidityRatio) + accruedFeesShare;\\n  }\\n\\n  /**\\n   * @notice Returns the total amount a borrower has to repay to a pool. Includes borrowed\\n   * amount, late repay fees and protocol fees\\n   * @param ownerAddress The identifier of the pool\\n   * @return normalizedRepayAmount Total repay amount\\n   **/\\n  function getRepayAmounts(address ownerAddress, bool earlyRepay)\\n    public\\n    view\\n    override\\n    returns (\\n      uint128 normalizedRepayAmount,\\n      uint128 lateRepayFee,\\n      uint128 repaymentFees\\n    )\\n  {\\n    uint128 preFeeRepayAmount = pools[ownerAddress].getRepayValue(earlyRepay);\\n    lateRepayFee = pools[ownerAddress].getLateRepayFeePerBond().wadMul(preFeeRepayAmount);\\n    repaymentFees = pools[ownerAddress].getRepaymentFees(preFeeRepayAmount + lateRepayFee);\\n    normalizedRepayAmount = preFeeRepayAmount + repaymentFees + lateRepayFee;\\n  }\\n\\n  // LENDER METHODS\\n\\n  /**\\n   * @notice Gets called within the Position.deposit() function and enables a lender to deposit assets\\n   * into a given pool's order book. The lender specifies a rate (price) at which it is willing to\\n   * lend out its assets (bid on the zero coupon bond). The full amount will initially be deposited\\n   * on the underlying yield provider until the borrower sells bonds at the specified rate.\\n   * @param normalizedAmount The amount of the given asset to deposit\\n   * @param rate The rate at which to bid for a bond\\n   * @param ownerAddress The identifier of the pool\\n   * @param underlyingToken Contract' address of the token to be deposited\\n   * @param sender The lender address who calls the deposit function on the Position\\n   * @return adjustedAmount Deposited amount adjusted with current liquidity index\\n   * @return bondsIssuanceIndex The identifier of the borrow group to which the deposit has been allocated\\n   **/\\n  function deposit(\\n    uint128 rate,\\n    address ownerAddress,\\n    address underlyingToken,\\n    address sender,\\n    uint128 normalizedAmount\\n  )\\n    public\\n    override\\n    whenNotPaused\\n    onlyRole(Roles.POSITION_ROLE)\\n    returns (uint128 adjustedAmount, uint128 bondsIssuanceIndex)\\n  {\\n    Types.Pool storage pool = pools[ownerAddress];\\n    if (pool.state.defaulted) {\\n      revert Errors.BP_POOL_DEFAULTED();\\n    }\\n    if (!pool.state.active) {\\n      revert Errors.BP_POOL_NOT_ACTIVE();\\n    }\\n    if (underlyingToken != pool.parameters.UNDERLYING_TOKEN) {\\n      revert Errors.BP_UNMATCHED_TOKEN();\\n    }\\n    if (rate < pool.parameters.MIN_RATE) {\\n      revert Errors.BP_OUT_OF_BOUND_MIN_RATE();\\n    }\\n    if (rate > pool.parameters.MAX_RATE) {\\n      revert Errors.BP_OUT_OF_BOUND_MAX_RATE();\\n    }\\n    if ((rate - pool.parameters.MIN_RATE) % pool.parameters.RATE_SPACING != 0) {\\n      revert Errors.BP_RATE_SPACING();\\n    }\\n    adjustedAmount = 0;\\n    bondsIssuanceIndex = 0;\\n    (adjustedAmount, bondsIssuanceIndex) = pool.depositToTick(rate, normalizedAmount);\\n    pool.depositToYieldProvider(sender, normalizedAmount);\\n  }\\n\\n  /**\\n   * @notice Gets called within the Position.withdraw() function and enables a lender to\\n   * evaluate the exact amount of tokens it is allowed to withdraw\\n   * @dev This method is meant to be used exclusively with the withdraw() method\\n   * Under certain circumstances, this method can return incorrect values, that would otherwise\\n   * be rejected by the checks made in the withdraw() method\\n   * @param ownerAddress The identifier of the pool\\n   * @param rate The rate the position is bidding for\\n   * @param adjustedAmount The amount of tokens in the position, adjusted to the deposit liquidity ratio\\n   * @param bondsIssuanceIndex An index determining deposit timing\\n   * @return adjustedAmountToWithdraw The amount of tokens to withdraw, adjuste for borrow pool use\\n   * @return depositedAmountToWithdraw The amount of tokens to withdraw, adjuste for position use\\n   * @return remainingBondsQuantity The quantity of bonds remaining within the position\\n   * @return bondsMaturity The maturity of bonds remaining within the position after withdraw\\n   **/\\n  function getWithdrawAmounts(\\n    address ownerAddress,\\n    uint128 rate,\\n    uint128 adjustedAmount,\\n    uint128 bondsIssuanceIndex\\n  )\\n    public\\n    view\\n    override\\n    returns (\\n      uint128 adjustedAmountToWithdraw,\\n      uint128 depositedAmountToWithdraw,\\n      uint128 remainingBondsQuantity,\\n      uint128 bondsMaturity\\n    )\\n  {\\n    Types.Pool storage pool = pools[ownerAddress];\\n    if (!pool.state.active) {\\n      revert Errors.BP_POOL_NOT_ACTIVE();\\n    }\\n\\n    (remainingBondsQuantity, adjustedAmountToWithdraw) = pool.computeAmountRepartitionForTick(\\n      rate,\\n      adjustedAmount,\\n      bondsIssuanceIndex\\n    );\\n\\n    // return amount adapted to bond index\\n    depositedAmountToWithdraw = adjustedAmountToWithdraw.wadRayDiv(\\n      pool.getBondIssuanceMultiplierForTick(rate, bondsIssuanceIndex)\\n    );\\n    bondsMaturity = pool.state.currentMaturity;\\n  }\\n\\n  /**\\n   * @notice Gets called within the Position.withdraw() function and enables a lender to\\n   * withdraw assets that are deposited with the underlying yield provider\\n   * @param ownerAddress The identifier of the pool\\n   * @param rate The rate the position is bidding for\\n   * @param adjustedAmountToWithdraw The actual amount of tokens to withdraw from the position\\n   * @param bondsIssuanceIndex An index determining deposit timing\\n   * @param owner The address to which the withdrawns funds are sent\\n   * @return normalizedDepositedAmountToWithdraw Actual amount of tokens withdrawn and sent to the lender\\n   **/\\n  function withdraw(\\n    address ownerAddress,\\n    uint128 rate,\\n    uint128 adjustedAmountToWithdraw,\\n    uint128 bondsIssuanceIndex,\\n    address owner\\n  ) public override whenNotPaused onlyRole(Roles.POSITION_ROLE) returns (uint128 normalizedDepositedAmountToWithdraw) {\\n    Types.Pool storage pool = pools[ownerAddress];\\n\\n    if (bondsIssuanceIndex > (pool.state.currentBondsIssuanceIndex + 1)) {\\n      revert Errors.BP_BOND_ISSUANCE_ID_TOO_HIGH();\\n    }\\n    bool isPendingDeposit = bondsIssuanceIndex > pool.state.currentBondsIssuanceIndex;\\n\\n    if (\\n      !((!(isPendingDeposit) && pool.ticks[rate].adjustedRemainingAmount > 0) ||\\n        (isPendingDeposit && pool.ticks[rate].adjustedPendingAmount > 0))\\n    ) {\\n      revert Errors.BP_TARGET_BOND_ISSUANCE_INDEX_EMPTY();\\n    }\\n    if (adjustedAmountToWithdraw <= 0) {\\n      revert Errors.BP_NO_DEPOSIT_TO_WITHDRAW();\\n    }\\n\\n    normalizedDepositedAmountToWithdraw = pool.withdrawDepositedAmountForTick(\\n      rate,\\n      adjustedAmountToWithdraw,\\n      bondsIssuanceIndex\\n    );\\n\\n    pool.parameters.YIELD_PROVIDER.withdraw(\\n      pool.parameters.UNDERLYING_TOKEN,\\n      normalizedDepositedAmountToWithdraw.scaleFromWad(pool.parameters.TOKEN_DECIMALS),\\n      owner\\n    );\\n  }\\n\\n  /**\\n   * @notice Gets called within Position.updateRate() and updates the order book ticks affected by the position\\n   * updating its rate. This is only possible as long as there are no bonds in the position, i.e the full\\n   * position currently lies with the yield provider\\n   * @param adjustedAmount The adjusted balance of tokens of the given position\\n   * @param ownerAddress The identifier of the pool\\n   * @param oldRate The current rate of the position\\n   * @param newRate The new rate of the position\\n   * @param oldBondsIssuanceIndex The identifier of the borrow group from the given position\\n   * @return newAdjustedAmount The updated amount of tokens of the position adjusted by the\\n   * new tick's global liquidity ratio\\n   * @return newBondsIssuanceIndex The new borrow group id to which the updated position is linked\\n   **/\\n  function updateRate(\\n    uint128 adjustedAmount,\\n    address ownerAddress,\\n    uint128 oldRate,\\n    uint128 newRate,\\n    uint128 oldBondsIssuanceIndex\\n  )\\n    public\\n    override\\n    whenNotPaused\\n    onlyRole(Roles.POSITION_ROLE)\\n    returns (\\n      uint128 newAdjustedAmount,\\n      uint128 newBondsIssuanceIndex,\\n      uint128 normalizedAmount\\n    )\\n  {\\n    Types.Pool storage pool = pools[ownerAddress];\\n\\n    if (pool.state.closed) {\\n      revert Errors.BP_POOL_DEFAULTED();\\n    }\\n    // cannot update rate when being borrowed\\n    (uint128 bondsQuantity, ) = getAmountRepartition(ownerAddress, oldRate, adjustedAmount, oldBondsIssuanceIndex);\\n    if (bondsQuantity != 0) {\\n      revert Errors.BP_LOAN_ONGOING();\\n    }\\n    if (newRate < pool.parameters.MIN_RATE) {\\n      revert Errors.BP_OUT_OF_BOUND_MIN_RATE();\\n    }\\n    if (newRate > pool.parameters.MAX_RATE) {\\n      revert Errors.BP_OUT_OF_BOUND_MAX_RATE();\\n    }\\n    if ((newRate - pool.parameters.MIN_RATE) % pool.parameters.RATE_SPACING != 0) {\\n      revert Errors.BP_RATE_SPACING();\\n    }\\n\\n    // input amount adapted to bond index\\n    uint128 adjustedBondIndexAmount = adjustedAmount.wadRayMul(\\n      pool.getBondIssuanceMultiplierForTick(oldRate, oldBondsIssuanceIndex)\\n    );\\n    normalizedAmount = pool.withdrawDepositedAmountForTick(oldRate, adjustedBondIndexAmount, oldBondsIssuanceIndex);\\n    (newAdjustedAmount, newBondsIssuanceIndex) = pool.depositToTick(newRate, normalizedAmount);\\n  }\\n\\n  // BORROWER METHODS\\n\\n  /**\\n   * @notice Called by the borrower to sell bonds to the order book.\\n   * The affected ticks get updated according the amount of bonds sold.\\n   * @param to The address to which the borrowed funds should be sent.\\n   * @param loanAmount The total amount of the loan\\n   **/\\n  function borrow(address to, uint128 loanAmount) external override whenNotPaused {\\n    Types.Pool storage pool = pools[borrowerAuthorizedPools[msg.sender]];\\n    if (pool.state.defaulted) {\\n      revert Errors.BP_POOL_DEFAULTED();\\n    }\\n    if (pool.state.currentMaturity > 0 && (block.timestamp > pool.state.currentMaturity)) {\\n      revert Errors.BP_MULTIPLE_BORROW_AFTER_MATURITY();\\n    }\\n\\n    uint128 normalizedLoanAmount = loanAmount.scaleToWad(pool.parameters.TOKEN_DECIMALS);\\n    uint128 normalizedEstablishmentFee = normalizedLoanAmount.wadMul(pool.parameters.ESTABLISHMENT_FEE_RATE);\\n    uint128 normalizedBorrowedAmount = normalizedLoanAmount - normalizedEstablishmentFee;\\n    if (pool.state.normalizedBorrowedAmount + normalizedLoanAmount > pool.parameters.MAX_BORROWABLE_AMOUNT) {\\n      revert Errors.BP_BORROW_MAX_BORROWABLE_AMOUNT_EXCEEDED();\\n    }\\n\\n    if (block.timestamp < pool.state.nextLoanMinStart) {\\n      revert Errors.BP_BORROW_COOLDOWN_PERIOD_NOT_OVER();\\n    }\\n    // collectFees should be called before changing pool global state as fee collection depends on it\\n    pool.collectFees();\\n\\n    uint128 availableDeposits = pool.state.normalizedAvailableDeposits;\\n    if (normalizedLoanAmount > pool.state.normalizedAvailableDeposits) {\\n      revert Errors.BP_BORROW_OUT_OF_BOUND_AMOUNT();\\n    }\\n\\n    uint128 remainingAmount = normalizedLoanAmount;\\n    uint128 currentInterestRate = pool.state.lowerInterestRate - pool.parameters.RATE_SPACING;\\n\\n    while (remainingAmount > 0 && currentInterestRate < pool.parameters.MAX_RATE) {\\n      currentInterestRate += pool.parameters.RATE_SPACING;\\n      if (pool.ticks[currentInterestRate].adjustedRemainingAmount > 0) {\\n        (uint128 bondsPurchasedQuantity, uint128 normalizedUsedAmountForPurchase) = pool\\n          .getBondsIssuanceParametersForTick(currentInterestRate, remainingAmount);\\n        pool.addBondsToTick(currentInterestRate, bondsPurchasedQuantity, normalizedUsedAmountForPurchase);\\n        remainingAmount -= normalizedUsedAmountForPurchase;\\n      }\\n    }\\n    if (remainingAmount != 0) {\\n      revert Errors.BP_BORROW_UNSUFFICIENT_BORROWABLE_AMOUNT_WITHIN_BRACKETS();\\n    }\\n    if (pool.state.currentMaturity == 0) {\\n      pool.state.currentMaturity = uint128(block.timestamp + pool.parameters.LOAN_DURATION);\\n      emit Borrow(msg.sender, normalizedBorrowedAmount, normalizedEstablishmentFee);\\n    } else {\\n      emit FurtherBorrow(msg.sender, normalizedBorrowedAmount, normalizedEstablishmentFee);\\n    }\\n\\n    protocolFees[msg.sender] += normalizedEstablishmentFee;\\n    pool.state.normalizedBorrowedAmount += normalizedLoanAmount;\\n    pool.parameters.YIELD_PROVIDER.withdraw(\\n      pool.parameters.UNDERLYING_TOKEN,\\n      normalizedBorrowedAmount.scaleFromWad(pool.parameters.TOKEN_DECIMALS),\\n      to\\n    );\\n  }\\n\\n  /**\\n   * @notice Repays a currently outstanding bonds of the given pool.\\n   **/\\n  function repay() external override whenNotPaused onlyRole(Roles.BORROWER_ROLE) {\\n    Types.Pool storage pool = pools[msg.sender];\\n\\n    if (pool.state.currentMaturity == 0 && pool.state.defaulted != true) {\\n      revert Errors.BP_REPAY_NO_ACTIVE_LOAN();\\n    }\\n    bool earlyRepay = pool.state.currentMaturity > block.timestamp;\\n    if (earlyRepay && !pool.parameters.EARLY_REPAY) {\\n      revert Errors.BP_EARLY_REPAY_NOT_ACTIVATED();\\n    }\\n\\n    // collectFees should be called before changing pool global state as fee collection depends on it\\n    pool.collectFees();\\n\\n    uint128 lateRepayFee;\\n    bool bondsIssuanceIndexAlreadyIncremented = false;\\n    uint128 normalizedRepayAmount;\\n    uint128 lateRepayFeePerBond = pool.getLateRepayFeePerBond();\\n\\n    for (\\n      uint128 rate = pool.state.lowerInterestRate;\\n      rate <= pool.parameters.MAX_RATE;\\n      rate += pool.parameters.RATE_SPACING\\n    ) {\\n      (uint128 normalizedRepayAmountForTick, uint128 lateRepayFeeForTick) = pool.repayForTick(\\n        rate,\\n        lateRepayFeePerBond\\n      );\\n      normalizedRepayAmount += normalizedRepayAmountForTick + lateRepayFeeForTick;\\n      lateRepayFee += lateRepayFeeForTick;\\n      bool indexIncremented = pool.includePendingDepositsForTick(rate, bondsIssuanceIndexAlreadyIncremented);\\n      bondsIssuanceIndexAlreadyIncremented = indexIncremented || bondsIssuanceIndexAlreadyIncremented;\\n    }\\n\\n    uint128 repaymentFees = pool.getRepaymentFees(normalizedRepayAmount);\\n    normalizedRepayAmount += repaymentFees;\\n\\n    pool.depositToYieldProvider(_msgSender(), normalizedRepayAmount);\\n    pool.state.nextLoanMinStart = uint128(block.timestamp) + pool.parameters.COOLDOWN_PERIOD;\\n\\n    pool.state.bondsIssuedQuantity = 0;\\n    protocolFees[msg.sender] += repaymentFees;\\n    pool.state.normalizedAvailableDeposits += normalizedRepayAmount;\\n\\n    if (block.timestamp > (pool.state.currentMaturity + pool.parameters.REPAYMENT_PERIOD)) {\\n      emit LateRepay(\\n        msg.sender,\\n        normalizedRepayAmount,\\n        lateRepayFee,\\n        repaymentFees,\\n        pool.state.normalizedAvailableDeposits,\\n        pool.state.nextLoanMinStart\\n      );\\n    } else if (pool.state.currentMaturity > block.timestamp) {\\n      emit EarlyRepay(\\n        msg.sender,\\n        normalizedRepayAmount,\\n        repaymentFees,\\n        pool.state.normalizedAvailableDeposits,\\n        pool.state.nextLoanMinStart\\n      );\\n    } else {\\n      emit Repay(\\n        msg.sender,\\n        normalizedRepayAmount,\\n        repaymentFees,\\n        pool.state.normalizedAvailableDeposits,\\n        pool.state.nextLoanMinStart\\n      );\\n    }\\n\\n    // set global data for next loan\\n    pool.state.currentMaturity = 0;\\n    pool.state.normalizedBorrowedAmount = 0;\\n  }\\n\\n  /**\\n   * @notice Called by the borrower to top up liquidity rewards' reserve that\\n   * is distributed to liquidity providers at the pre-defined distribution rate.\\n   * @param amount Amount of tokens that will be add up to the pool's liquidity rewards reserve\\n   **/\\n  function topUpLiquidityRewards(uint128 amount) external override whenNotPaused onlyRole(Roles.BORROWER_ROLE) {\\n    Types.Pool storage pool = pools[msg.sender];\\n    uint128 normalizedAmount = amount.scaleToWad(pool.parameters.TOKEN_DECIMALS);\\n\\n    pool.depositToYieldProvider(_msgSender(), normalizedAmount);\\n    uint128 yieldProviderLiquidityRatio = pool.topUpLiquidityRewards(normalizedAmount);\\n\\n    if (\\n      !pool.state.active &&\\n      pool.state.remainingAdjustedLiquidityRewardsReserve.wadRayMul(yieldProviderLiquidityRatio) >=\\n      pool.parameters.LIQUIDITY_REWARDS_ACTIVATION_THRESHOLD\\n    ) {\\n      pool.state.active = true;\\n      emit PoolActivated(pool.parameters.OWNER);\\n    }\\n\\n    emit TopUpLiquidityRewards(msg.sender, normalizedAmount);\\n  }\\n\\n  // PUBLIC METHODS\\n\\n  /**\\n   * @notice Collect yield provider fees as well as liquidity rewards for the target tick\\n   * @param ownerAddress The identifier of the pool\\n   **/\\n  function collectFeesForTick(address ownerAddress, uint128 rate) external override whenNotPaused {\\n    Types.Pool storage pool = pools[ownerAddress];\\n    pool.collectFees(rate);\\n  }\\n\\n  /**\\n   * @notice Collect yield provider fees as well as liquidity rewards for the whole pool\\n   * Iterates over all pool initialized ticks\\n   * @param ownerAddress The identifier of the pool\\n   **/\\n  function collectFees(address ownerAddress) external override whenNotPaused {\\n    Types.Pool storage pool = pools[ownerAddress];\\n    pool.collectFees();\\n  }\\n}\\n\",\"keccak256\":\"0xc1b00ba5e4c8e501307746a785fb7630b7db56f1af03584cfcb963effd62d7aa\",\"license\":\"AGPL-3.0\"},\"src/PoolsController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport {PoolLogic} from \\\"./lib/PoolLogic.sol\\\";\\nimport {Scaling} from \\\"./lib/Scaling.sol\\\";\\nimport {Uint128WadRayMath} from \\\"./lib/Uint128WadRayMath.sol\\\";\\n\\nimport \\\"./extensions/IERC20PartialDecimals.sol\\\";\\nimport \\\"./lib/Errors.sol\\\";\\nimport \\\"./lib/Roles.sol\\\";\\nimport \\\"./lib/Types.sol\\\";\\n\\nimport \\\"./interfaces/IPoolsController.sol\\\";\\n\\ncontract PoolsController is AccessControlUpgradeable, PausableUpgradeable, IPoolsController {\\n  using PoolLogic for Types.Pool;\\n  using Scaling for uint128;\\n  using Uint128WadRayMath for uint128;\\n\\n  // borrower address to pool hash\\n  mapping(address => address) public borrowerAuthorizedPools;\\n  // interest rate pool. Each address can have only one pool\\n  mapping(address => Types.Pool) internal pools;\\n\\n  address[] public poolsAddresses;\\n\\n  // protocol fees per pool\\n  mapping(address => uint128) internal protocolFees;\\n\\n  function _initialize() internal onlyInitializing {\\n    // both initializers below are called to comply with OpenZeppelin's\\n    // recommendations even if in practice they don't do anything\\n    __AccessControl_init();\\n    __Pausable_init_unchained();\\n  }\\n\\n  // VIEW FUNCTIONS\\n  \\n  /**\\n    * @notice Returns all the pools created\\n    * @return pools array with pools created\\n    **/\\n\\n  function getPools() external view returns (address[] memory) {\\n    return poolsAddresses;\\n  }\\n\\n  /**\\n   * @notice Returns the parameters of a pool\\n   * @param ownerAddress The identifier of the pool\\n   * @return underlyingToken Address of the underlying token of the pool\\n   * @return minRate Minimum rate of deposits accepted in the pool\\n   * @return maxRate Maximum rate of deposits accepted in the pool\\n   * @return rateSpacing Difference between two rates in the pool\\n   * @return maxBorrowableAmount Maximum amount of tokens that can be borrowed from the pool\\n   * @return loanDuration Duration of a loan in the pool\\n   * @return liquidityRewardsDistributionRate Rate at which liquidity rewards are distributed to lenders\\n   * @return cooldownPeriod Period after a loan during which a borrower cannot take another loan\\n   * @return repaymentPeriod Period after a loan end during which a borrower can repay without penalty\\n   * @return lateRepayFeePerBondRate Penalty a borrower has to pay when it repays late\\n   * @return liquidityRewardsActivationThreshold Minimum amount of liqudity rewards a borrower has to\\n   * deposit to active the pool\\n   **/\\n  function getPoolParameters(address ownerAddress)\\n    external\\n    view\\n    returns (\\n      address underlyingToken,\\n      uint128 minRate,\\n      uint128 maxRate,\\n      uint128 rateSpacing,\\n      uint128 maxBorrowableAmount,\\n      uint128 loanDuration,\\n      uint128 liquidityRewardsDistributionRate,\\n      uint128 cooldownPeriod,\\n      uint128 repaymentPeriod,\\n      uint128 lateRepayFeePerBondRate,\\n      uint128 liquidityRewardsActivationThreshold\\n    )\\n  {\\n    console.log(\\\"pool parameters\\\");\\n    Types.PoolParameters storage poolParameters = pools[ownerAddress].parameters;\\n    console.log(1);\\n    return (\\n      poolParameters.UNDERLYING_TOKEN,\\n      poolParameters.MIN_RATE,\\n      poolParameters.MAX_RATE,\\n      poolParameters.RATE_SPACING,\\n      poolParameters.MAX_BORROWABLE_AMOUNT,\\n      poolParameters.LOAN_DURATION,\\n      poolParameters.LIQUIDITY_REWARDS_DISTRIBUTION_RATE,\\n      poolParameters.COOLDOWN_PERIOD,\\n      poolParameters.REPAYMENT_PERIOD,\\n      poolParameters.LATE_REPAY_FEE_PER_BOND_RATE,\\n      poolParameters.LIQUIDITY_REWARDS_ACTIVATION_THRESHOLD\\n    );\\n\\n    console.log(2);\\n  }\\n\\n  /**\\n   * @notice Returns the fee rates of a pool\\n   * @return establishmentFeeRate Amount of fees paid to the protocol at borrow time\\n   * @return repaymentFeeRate Amount of fees paid to the protocol at repay time\\n   **/\\n  function getPoolFeeRates(address ownerAddress)\\n    external\\n    view\\n    returns (uint128 establishmentFeeRate, uint128 repaymentFeeRate)\\n  {\\n    Types.PoolParameters storage poolParameters = pools[ownerAddress].parameters;\\n    return (poolParameters.ESTABLISHMENT_FEE_RATE, poolParameters.REPAYMENT_FEE_RATE);\\n  }\\n\\n  /**\\n   * @notice Returns the state of a pool\\n   * @param ownerAddress The identifier of the pool\\n   * @return active Signals if a pool is active and ready to accept deposits\\n   * @return defaulted Signals if a pool was defaulted\\n   * @return closed Signals if a pool was closed\\n   * @return currentMaturity End timestamp of current loan\\n   * @return bondsIssuedQuantity Amount of bonds issued, to be repaid at maturity\\n   * @return normalizedBorrowedAmount Actual amount of tokens that were borrowed\\n   * @return normalizedAvailableDeposits Actual amount of tokens available to be borrowed\\n   * @return lowerInterestRate Minimum rate at which a deposit was made\\n   * @return nextLoanMinStart Cool down period, minimum timestamp after which a new loan can be taken\\n   * @return remainingAdjustedLiquidityRewardsReserve Remaining liquidity rewards to be distributed to lenders\\n   * @return yieldProviderLiquidityRatio Last recorded yield provider liquidity ratio\\n   * @return currentBondsIssuanceIndex Current borrow period identifier of the pool\\n   **/\\n  function getPoolState(address ownerAddress)\\n    external\\n    view\\n    returns (\\n      bool active,\\n      bool defaulted,\\n      bool closed,\\n      uint128 currentMaturity,\\n      uint128 bondsIssuedQuantity,\\n      uint128 normalizedBorrowedAmount,\\n      uint128 normalizedAvailableDeposits,\\n      uint128 lowerInterestRate,\\n      uint128 nextLoanMinStart,\\n      uint128 remainingAdjustedLiquidityRewardsReserve,\\n      uint128 yieldProviderLiquidityRatio,\\n      uint128 currentBondsIssuanceIndex\\n    )\\n  {\\n    Types.PoolState storage poolState = pools[ownerAddress].state;\\n    return (\\n      poolState.active,\\n      poolState.defaulted,\\n      poolState.closed,\\n      poolState.currentMaturity,\\n      poolState.bondsIssuedQuantity,\\n      poolState.normalizedBorrowedAmount,\\n      poolState.normalizedAvailableDeposits,\\n      poolState.lowerInterestRate,\\n      poolState.nextLoanMinStart,\\n      poolState.remainingAdjustedLiquidityRewardsReserve,\\n      poolState.yieldProviderLiquidityRatio,\\n      poolState.currentBondsIssuanceIndex\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the state of a pool\\n   * @return earlyRepay Flag that signifies whether the early repay feature is activated or not\\n   **/\\n  function isEarlyRepay(address ownerAddress) external view returns (bool earlyRepay) {\\n    return pools[ownerAddress].parameters.EARLY_REPAY;\\n  }\\n\\n  /**\\n   * @notice Returns the state of a pool\\n   * @return defaultTimestamp The timestamp at which the pool was defaulted\\n   **/\\n  function getDefaultTimestamp(address ownerAddress) external view returns (uint128 defaultTimestamp) {\\n    return pools[ownerAddress].state.defaultTimestamp;\\n  }\\n\\n  // PROTOCOL MANAGEMENT\\n\\n  function getProtocolFees(address ownerAddress) public view returns (uint128) {\\n    return protocolFees[ownerAddress].scaleFromWad(pools[ownerAddress].parameters.TOKEN_DECIMALS);\\n  }\\n\\n  /**\\n   * @notice Withdraws protocol fees to a target address\\n   * @param ownerAddress The identifier of the pool\\n   * @param amount The amount of tokens claimed\\n   * @param to The address receiving the fees\\n   **/\\n  function claimProtocolFees(\\n    address ownerAddress,\\n    uint128 amount,\\n    address to\\n  ) external onlyRole(Roles.GOVERNANCE_ROLE) {\\n    uint128 normalizedAmount = amount.scaleToWad(pools[ownerAddress].parameters.TOKEN_DECIMALS);\\n    if (pools[ownerAddress].parameters.OWNER != ownerAddress) {\\n      revert Errors.PC_POOL_NOT_ACTIVE();\\n    }\\n\\n    if (normalizedAmount > protocolFees[ownerAddress]) {\\n      revert Errors.PC_NOT_ENOUGH_PROTOCOL_FEES();\\n    }\\n\\n    protocolFees[ownerAddress] -= normalizedAmount;\\n    pools[ownerAddress].parameters.YIELD_PROVIDER.withdraw(pools[ownerAddress].parameters.UNDERLYING_TOKEN, amount, to);\\n\\n    emit ClaimProtocolFees(ownerAddress, normalizedAmount, to);\\n  }\\n\\n  /**\\n   * @notice Stops all actions on all pools\\n   **/\\n  function freezePool() external override onlyRole(Roles.GOVERNANCE_ROLE) {\\n    _pause();\\n  }\\n\\n  /**\\n   * @notice Cancel a freeze, makes actions available again on all pools\\n   **/\\n  function unfreezePool() external override onlyRole(Roles.GOVERNANCE_ROLE) {\\n    _unpause();\\n  }\\n\\n  // BORROWER MANAGEMENT\\n  /**\\n   * @notice Creates a new pool\\n   * @param params The parameters of the new pool\\n   **/\\n  function createNewPool(PoolCreationParams calldata params) external override {\\n    // run verifications on parameters value\\n    verifyPoolCreationParameters(params);\\n\\n    // initialize pool state and parameters\\n    pools[msg.sender].parameters = Types.PoolParameters({\\n      OWNER: msg.sender,\\n      UNDERLYING_TOKEN: params.underlyingToken,\\n      TOKEN_DECIMALS: IERC20PartialDecimals(params.underlyingToken).decimals(),\\n      YIELD_PROVIDER: params.yieldProvider,\\n      MIN_RATE: params.minRate,\\n      MAX_RATE: params.maxRate,\\n      RATE_SPACING: params.rateSpacing,\\n      MAX_BORROWABLE_AMOUNT: params.maxBorrowableAmount,\\n      LOAN_DURATION: params.loanDuration,\\n      LIQUIDITY_REWARDS_DISTRIBUTION_RATE: params.distributionRate,\\n      COOLDOWN_PERIOD: params.cooldownPeriod,\\n      REPAYMENT_PERIOD: params.repaymentPeriod,\\n      LATE_REPAY_FEE_PER_BOND_RATE: params.lateRepayFeePerBondRate,\\n      ESTABLISHMENT_FEE_RATE: params.establishmentFeeRate,\\n      REPAYMENT_FEE_RATE: params.repaymentFeeRate,\\n      LIQUIDITY_REWARDS_ACTIVATION_THRESHOLD: params.liquidityRewardsActivationThreshold,\\n      EARLY_REPAY: params.earlyRepay\\n    });\\n\\n    pools[msg.sender].state.yieldProviderLiquidityRatio = uint128(params.yieldProvider.getReserveNormalizedIncome());\\n\\n    borrowerAuthorizedPools[msg.sender] = msg.sender;\\n    poolsAddresses.push(msg.sender);\\n\\n    emit PoolCreated(params);\\n\\n    if (pools[msg.sender].parameters.LIQUIDITY_REWARDS_ACTIVATION_THRESHOLD == 0) {\\n      pools[msg.sender].state.active = true;\\n      emit PoolActivated(pools[msg.sender].parameters.OWNER);\\n      console.log(3);\\n    }\\n  }\\n\\n  /**\\n   * @notice Verifies that conditions to create a new pool are met\\n   * @param params The parameters of the new pool\\n   **/\\n  function verifyPoolCreationParameters(PoolCreationParams calldata params) internal view {\\n    if ((params.maxRate - params.minRate) % params.rateSpacing != 0) {\\n      revert Errors.PC_RATE_SPACING_COMPLIANCE();\\n    }\\n    if (msg.sender == address(0)) {\\n      revert Errors.PC_ZERO_POOL();\\n    }\\n    if (pools[msg.sender].parameters.OWNER != address(0)) {\\n      revert Errors.PC_POOL_ALREADY_SET_FOR_BORROWER();\\n    }\\n    if (params.establishmentFeeRate > PoolLogic.WAD) {\\n      revert Errors.PC_ESTABLISHMENT_FEES_TOO_HIGH();\\n    }\\n  }\\n\\n  /**\\n   * @notice Allow an address to interact with a borrower pool\\n   * @param borrowerAddress The address to allow\\n   * @param ownerAddress The identifier of the pool\\n   **/\\n  function allow(address borrowerAddress, address ownerAddress) external override onlyRole(Roles.GOVERNANCE_ROLE) {\\n    if (ownerAddress == address(0)) {\\n      revert Errors.PC_ZERO_POOL();\\n    }\\n    if (borrowerAddress == address(0)) {\\n      revert Errors.PC_ZERO_ADDRESS();\\n    }\\n    if (pools[ownerAddress].parameters.OWNER != ownerAddress) {\\n      revert Errors.PC_POOL_NOT_ACTIVE();\\n    }\\n    if (borrowerAddress != pools[ownerAddress].parameters.OWNER) {\\n      revert Errors.PC_BORROWER_NOT_OWNER();\\n    }\\n    borrowerAuthorizedPools[borrowerAddress] = ownerAddress;\\n    emit BorrowerAllowed(borrowerAddress, ownerAddress);\\n  }\\n\\n  /**\\n   * @notice Remove borrower pool interaction rights from an address\\n   * @param borrowerAddress The address to disallow\\n   * @param ownerAddress The identifier of the pool\\n   **/\\n  function disallow(address borrowerAddress, address ownerAddress) external override onlyRole(Roles.GOVERNANCE_ROLE) {\\n    if (ownerAddress == address(0)) {\\n      revert Errors.PC_ZERO_POOL();\\n    }\\n    if (borrowerAddress == address(0)) {\\n      revert Errors.PC_ZERO_ADDRESS();\\n    }\\n    if (pools[ownerAddress].parameters.OWNER != ownerAddress) {\\n      revert Errors.PC_POOL_NOT_ACTIVE();\\n    }\\n    if (borrowerAddress != pools[ownerAddress].parameters.OWNER) {\\n      revert Errors.PC_BORROWER_NOT_OWNER();\\n    }\\n    revokeRole(Roles.BORROWER_ROLE, borrowerAddress);\\n    delete borrowerAuthorizedPools[borrowerAddress];\\n    emit BorrowerDisallowed(borrowerAddress, ownerAddress);\\n  }\\n\\n  /**\\n   * @notice Flags the pool as defaulted\\n   * @param ownerAddress The identifier of the pool to default\\n   **/\\n  function setDefault(address ownerAddress) external onlyRole(Roles.GOVERNANCE_ROLE) {\\n    Types.Pool storage pool = pools[ownerAddress];\\n    if (pool.state.defaulted) {\\n      revert Errors.PC_POOL_DEFAULTED();\\n    }\\n    if (pool.state.currentMaturity == 0) {\\n      revert Errors.PC_NO_ONGOING_LOAN();\\n    }\\n    if (block.timestamp < pool.state.currentMaturity + pool.parameters.REPAYMENT_PERIOD) {\\n      revert Errors.PC_REPAYMENT_PERIOD_ONGOING();\\n    }\\n\\n    pool.state.defaulted = true;\\n    pool.state.defaultTimestamp = uint128(block.timestamp);\\n    uint128 distributedLiquidityRewards = pool.distributeLiquidityRewards();\\n\\n    uint128 remainingNormalizedLiquidityRewardsReserve = 0;\\n    if (pool.state.remainingAdjustedLiquidityRewardsReserve > 0) {\\n      uint128 yieldProviderLiquidityRatio = uint128(pool.parameters.YIELD_PROVIDER.getReserveNormalizedIncome());\\n      remainingNormalizedLiquidityRewardsReserve = pool.state.remainingAdjustedLiquidityRewardsReserve.wadRayMul(\\n        yieldProviderLiquidityRatio\\n      );\\n\\n      pool.state.remainingAdjustedLiquidityRewardsReserve = 0;\\n      pool.parameters.YIELD_PROVIDER.withdraw(\\n        pools[ownerAddress].parameters.UNDERLYING_TOKEN,\\n        remainingNormalizedLiquidityRewardsReserve.scaleFromWad(pool.parameters.TOKEN_DECIMALS),\\n        msg.sender\\n      );\\n    }\\n    emit Default(ownerAddress, distributedLiquidityRewards);\\n  }\\n\\n  // POOL PARAMETERS MANAGEMENT\\n  /**\\n   * @notice Set the maximum amount of tokens that can be borrowed in the target pool\\n   **/\\n  function setMaxBorrowableAmount(uint128 maxBorrowableAmount, address ownerAddress)\\n    external\\n    onlyRole(Roles.GOVERNANCE_ROLE)\\n  {\\n    if (pools[ownerAddress].parameters.OWNER != ownerAddress) {\\n      revert Errors.PC_POOL_NOT_ACTIVE();\\n    }\\n    pools[ownerAddress].parameters.MAX_BORROWABLE_AMOUNT = maxBorrowableAmount;\\n\\n    emit SetMaxBorrowableAmount(maxBorrowableAmount, ownerAddress);\\n  }\\n\\n  /**\\n   * @notice Set the pool liquidity rewards distribution rate\\n   **/\\n  function setLiquidityRewardsDistributionRate(uint128 distributionRate, address ownerAddress)\\n    external\\n    onlyRole(Roles.GOVERNANCE_ROLE)\\n  {\\n    if (pools[ownerAddress].parameters.OWNER != ownerAddress) {\\n      revert Errors.PC_POOL_NOT_ACTIVE();\\n    }\\n    pools[ownerAddress].parameters.LIQUIDITY_REWARDS_DISTRIBUTION_RATE = distributionRate;\\n\\n    emit SetLiquidityRewardsDistributionRate(distributionRate, ownerAddress);\\n  }\\n\\n  /**\\n   * @notice Set the pool establishment protocol fee rate\\n   **/\\n  function setEstablishmentFeeRate(uint128 establishmentFeeRate, address ownerAddress)\\n    external\\n    onlyRole(Roles.GOVERNANCE_ROLE)\\n  {\\n    if (!pools[ownerAddress].state.active) {\\n      revert Errors.PC_POOL_NOT_ACTIVE();\\n    }\\n    if (establishmentFeeRate > PoolLogic.WAD) {\\n      revert Errors.PC_ESTABLISHMENT_FEES_TOO_HIGH();\\n    }\\n\\n    pools[ownerAddress].parameters.ESTABLISHMENT_FEE_RATE = establishmentFeeRate;\\n\\n    emit SetEstablishmentFeeRate(establishmentFeeRate, ownerAddress);\\n  }\\n\\n  /**\\n   * @notice Set the pool repayment protocol fee rate\\n   **/\\n  function setRepaymentFeeRate(uint128 repaymentFeeRate, address ownerAddress)\\n    external\\n    onlyRole(Roles.GOVERNANCE_ROLE)\\n  {\\n    if (!pools[ownerAddress].state.active) {\\n      revert Errors.PC_POOL_NOT_ACTIVE();\\n    }\\n\\n    pools[ownerAddress].parameters.REPAYMENT_FEE_RATE = repaymentFeeRate;\\n\\n    emit SetRepaymentFeeRate(repaymentFeeRate, ownerAddress);\\n  }\\n}\\n\",\"keccak256\":\"0x711d3795d74b5962330cfc97873ed642f465253da4bbb659fce5a6cf22a34af2\",\"license\":\"AGPL-3.0\"},\"src/extensions/AaveILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb617909e55f5405b1d3459acf8aebeb8a705d2f8119ceb4d83f3a1b29bb7edbb\",\"license\":\"AGPL-3.0\"},\"src/extensions/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/VaultApi.sol\\\";\\nimport \\\"./interfaces/StrategyApi.sol\\\";\\n\\n/*\\n * BaseStrategy implements all of the required functionality to interoperate closely\\n * with the core protocol. This contract should be inherited and the abstract methods\\n * implemented to adapt the strategy to the particular needs it has to create a return.\\n */\\n\\nabstract contract BaseStrategy is StrategyAPI {\\n\\n    // Version of this contract's StrategyAPI (must match Vault)\\n    function apiVersion() override public pure returns (string memory) {\\n        return \\\"0.1.3\\\";\\n    }\\n\\n    address override public vault;\\n    address public strategist;\\n    address override public keeper;\\n\\n    address override public want;\\n\\n    // So indexers can keep track of this\\n    event Harvested(uint256 profit);\\n\\n    // The minimum number of blocks between harvest calls\\n    // NOTE: Override this value with your own, or set dynamically below\\n    uint256 public minReportDelay = 6300; // ~ once a day\\n\\n    // The minimum multiple that `callCost` must be above the credit/profit to be \\\"justifiable\\\"\\n    // NOTE: Override this value with your own, or set dynamically below\\n    uint256 public profitFactor = 100;\\n\\n    // Use this to adjust the threshold at which running a debt causes a harvest trigger\\n    uint256 public debtThreshold = 0;\\n\\n    // Adjust this using `setReserve(...)` to keep some of the position in reserve in the strategy,\\n    // to accomodate larger variations needed to sustain the strategy's core positon(s)\\n    uint256 private reserve = 0;\\n    \\n    /*\\n     * Provide an accurate estimate for the total amount of assets (principle + return)\\n     * that this strategy is currently managing, denominated in terms of `want` tokens.\\n     * This total should be \\\"realizable\\\" e.g. the total value that could *actually* be\\n     * obtained from this strategy if it were to divest it's entire position based on\\n     * current on-chain conditions.\\n     *\\n     * NOTE: care must be taken in using this function, since it relies on external\\n     *       systems, which could be manipulated by the attacker to give an inflated\\n     *       (or reduced) value produced by this function, based on current on-chain\\n     *       conditions (e.g. this function is possible to influence through flashloan\\n     *       attacks, oracle manipulations, or other DeFi attack mechanisms).\\n     *\\n     * NOTE: It is up to governance to use this function to correctly order this strategy\\n     *       relative to its peers in the withdrawal queue to minimize losses for the Vault\\n     *       based on sudden withdrawals. This value should be higher than the total debt of\\n     *       the strategy and higher than it's expected value to be \\\"safe\\\".\\n     */\\n    function estimatedTotalAssets() override public view virtual returns (uint256);\\n\\n    function getReserve() internal view returns (uint256) {\\n        return reserve;\\n    }\\n\\n    function setReserve(uint256 _reserve) internal {\\n        if (_reserve != reserve) reserve = _reserve;\\n    }\\n\\n    bool public emergencyExit;\\n\\n    constructor(address _vault) {\\n        vault = _vault;\\n        want = VaultAPI(vault).token();\\n        IERC20(want).approve(_vault, type(uint256).max); // Give Vault unlimited access (might save gas)\\n        strategist = msg.sender;\\n        keeper = msg.sender;\\n    }\\n\\n    function setStrategist(address _strategist) external {\\n        require(\\n            msg.sender == strategist || msg.sender == governance(),\\n            \\\"!authorized\\\"\\n        );\\n        strategist = _strategist;\\n    }\\n\\n    function setKeeper(address _keeper) external {\\n        require(\\n            msg.sender == strategist || msg.sender == governance(),\\n            \\\"!authorized\\\"\\n        );\\n        keeper = _keeper;\\n    }\\n\\n    function setMinReportDelay(uint256 _delay) external {\\n        require(\\n            msg.sender == strategist || msg.sender == governance(),\\n            \\\"!authorized\\\"\\n        );\\n        minReportDelay = _delay;\\n    }\\n\\n    function setProfitFactor(uint256 _profitFactor) external {\\n        require(\\n            msg.sender == strategist || msg.sender == governance(),\\n            \\\"!authorized\\\"\\n        );\\n        profitFactor = _profitFactor;\\n    }\\n\\n    function setDebtThreshold(uint256 _debtThreshold) external {\\n        require(\\n            msg.sender == strategist || msg.sender == governance(),\\n            \\\"!authorized\\\"\\n        );\\n        debtThreshold = _debtThreshold;\\n    }\\n\\n    /*\\n     * Resolve governance address from Vault contract, used to make\\n     * assertions on protected functions in the Strategy\\n     */\\n    function governance() internal view returns (address) {\\n        return VaultAPI(vault).governance();\\n    }\\n\\n    /*\\n     * Perform any strategy unwinding or other calls necessary to capture\\n     * the \\\"free return\\\" this strategy has generated since the last time it's\\n     * core position(s) were adusted. Examples include unwrapping extra rewards.\\n     * This call is only used during \\\"normal operation\\\" of a Strategy, and should\\n     * be optimized to minimize losses as much as possible. It is okay to report\\n     * \\\"no returns\\\", however this will affect the credit limit extended to the\\n     * strategy and reduce it's overall position if lower than expected returns\\n     * are sustained for long periods of time.\\n     */\\n    function prepareReturn(uint256 _debtOutstanding)\\n        internal\\n        virtual\\n        returns (uint256 _profit);\\n\\n    /*\\n     * Perform any adjustments to the core position(s) of this strategy given\\n     * what change the Vault made in the \\\"investable capital\\\" available to the\\n     * strategy. Note that all \\\"free capital\\\" in the strategy after the report\\n     * was made is available for reinvestment. Also note that this number could\\n     * be 0, and you should handle that scenario accordingly.\\n     */\\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\\n\\n    /*\\n     * Make as much capital as possible \\\"free\\\" for the Vault to take. Some slippage\\n     * is allowed, since when this method is called the strategist is no longer receiving\\n     * their performance fee. The goal is for the strategy to divest as quickly as possible\\n     * while not suffering exorbitant losses. This function is used during emergency exit\\n     * instead of `prepareReturn()`\\n     */\\n    function exitPosition() internal virtual;\\n\\n    /*\\n     * Vault calls this function after shares are created during `Vault.report()`.\\n     * You can customize this function to any share distribution mechanism you want.\\n     */\\n    function distributeRewards(uint256 _shares) external virtual {\\n        // Send 100% of newly-minted shares to the strategist.\\n        VaultAPI(vault).transfer(strategist, _shares);\\n    }\\n\\n    /*\\n     * Provide a signal to the keeper that `tend()` should be called. The keeper will provide\\n     * the estimated gas cost that they would pay to call `tend()`, and this function should\\n     * use that estimate to make a determination if calling it is \\\"worth it\\\" for the keeper.\\n     * This is not the only consideration into issuing this trigger, for example if the position\\n     * would be negatively affected if `tend()` is not called shortly, then this can return `true`\\n     * even if the keeper might be \\\"at a loss\\\" (keepers are always reimbursed by Yearn)\\n     *\\n     * NOTE: `callCost` must be priced in terms of `want`\\n     *\\n     * NOTE: this call and `harvestTrigger` should never return `true` at the same time.\\n     */\\n    function tendTrigger(uint256 callCost) override public view virtual returns (bool) {\\n        // We usually don't need tend, but if there are positions that need active maintainence,\\n        // overriding this function is how you would signal for that\\n        return false;\\n    }\\n\\n    function tend() override external {\\n        if (keeper != address(0)) {\\n            require(\\n                msg.sender == keeper ||\\n                    msg.sender == strategist ||\\n                    msg.sender == governance(),\\n                \\\"!authorized\\\"\\n            );\\n        }\\n\\n        // Don't take profits with this call, but adjust for better gains\\n        adjustPosition(VaultAPI(vault).debtOutstanding());\\n    }\\n\\n    /*\\n     * Provide a signal to the keeper that `harvest()` should be called. The keeper will provide\\n     * the estimated gas cost that they would pay to call `harvest()`, and this function should\\n     * use that estimate to make a determination if calling it is \\\"worth it\\\" for the keeper.\\n     * This is not the only consideration into issuing this trigger, for example if the position\\n     * would be negatively affected if `harvest()` is not called shortly, then this can return `true`\\n     * even if the keeper might be \\\"at a loss\\\" (keepers are always reimbursed by Yearn)\\n     *\\n     * NOTE: `callCost` must be priced in terms of `want`\\n     *\\n     * NOTE: this call and `tendTrigger` should never return `true` at the same time.\\n     */\\n    function harvestTrigger(uint256 callCost)\\n        override\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        StrategyParams memory params = VaultAPI(vault).strategies(address(this));\\n\\n        // Should not trigger if strategy is not activated\\n        if (params.activation == 0) return false;\\n\\n        // Should trigger if hadn't been called in a while\\n        if (block.number - params.lastReport >= minReportDelay) return true;\\n\\n        // If some amount is owed, pay it back\\n        // NOTE: Since debt is adjusted in step-wise fashion, it is appropiate to always trigger here,\\n        //       because the resulting change should be large (might not always be the case)\\n        uint256 outstanding = VaultAPI(vault).debtOutstanding();\\n        if (outstanding > 0) return true;\\n\\n        // Check for profits and losses\\n        uint256 total = estimatedTotalAssets();\\n        // Trigger if we have a loss to report\\n        if (total + debtThreshold < params.totalDebt) return true;\\n\\n        uint256 profit = 0;\\n        if (total > params.totalDebt) profit = total - params.totalDebt; // We've earned a profit!\\n\\n        // Otherwise, only trigger if it \\\"makes sense\\\" economically (gas cost is <N% of value moved)\\n        uint256 credit = VaultAPI(vault).creditAvailable();\\n        return (profitFactor * callCost < credit + profit);\\n    }\\n\\n    function harvest() override external {\\n        if (keeper != address(0)) {\\n            require(\\n                msg.sender == keeper ||\\n                    msg.sender == strategist ||\\n                    msg.sender == governance(),\\n                \\\"!authorized\\\"\\n            );\\n        }\\n\\n        uint256 profit = 0;\\n        if (emergencyExit) {\\n            exitPosition(); // Free up as much capital as possible\\n            // NOTE: Don't take performance fee in this scenario\\n        } else {\\n            profit = prepareReturn(VaultAPI(vault).debtOutstanding()); // Free up returns for Vault to pull\\n        }\\n\\n        if (reserve > IERC20(want).balanceOf(address(this)))\\n            reserve = IERC20(want).balanceOf(address(this));\\n\\n        // Allow Vault to take up to the \\\"harvested\\\" balance of this contract, which is\\n        // the amount it has earned since the last time it reported to the Vault\\n        uint256 outstanding = VaultAPI(vault).report(\\n            IERC20(want).balanceOf(address(this)) - reserve,\\n            0, 0\\n        );\\n\\n        // Check if free returns are left, and re-invest them\\n        adjustPosition(outstanding);\\n\\n        emit Harvested(profit);\\n    }\\n\\n    /*\\n     * Liquidate as many assets as possible to `want`, irregardless of slippage,\\n     * up to `_amountNeeded`. Any excess should be re-invested here as well.\\n     */\\n    function liquidatePosition(uint256 _amountNeeded)\\n        internal\\n        virtual\\n        returns (uint256 _amountFreed);\\n\\n    function withdraw(uint256 _amountNeeded) external {\\n        require(msg.sender == address(vault), \\\"!vault\\\");\\n        // Liquidate as much as possible to `want`, up to `_amount`\\n        uint256 amountFreed = liquidatePosition(_amountNeeded);\\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\\n        IERC20(want).transfer(msg.sender, amountFreed);\\n        // Adjust reserve to what we have after the freed amount is sent to the Vault\\n        reserve = IERC20(want).balanceOf(address(this));\\n    }\\n\\n    /*\\n     * Do anything necesseary to prepare this strategy for migration, such\\n     * as transfering any reserve or LP tokens, CDPs, or other tokens or stores of value.\\n     */\\n    function prepareMigration(address _newStrategy) internal virtual;\\n\\n    function migrate(address _newStrategy) external {\\n        require(msg.sender == address(vault) || msg.sender == governance());\\n        require(BaseStrategy(_newStrategy).vault() == vault);\\n        prepareMigration(_newStrategy);\\n        IERC20(want).transfer(_newStrategy, IERC20(want).balanceOf(address(this)));\\n    }\\n\\n    function setEmergencyExit() external {\\n        require(\\n            msg.sender == strategist || msg.sender == governance(),\\n            \\\"!authorized\\\"\\n        );\\n        emergencyExit = true;\\n        exitPosition();\\n        VaultAPI(vault).revokeStrategy();\\n        if (reserve > IERC20(want).balanceOf(address(this)))\\n            reserve = IERC20(want).balanceOf(address(this));\\n    }\\n\\n    // Override this to add all tokens/tokenized positions this contract manages\\n    // on a *persistant* basis (e.g. not just for swapping back to want ephemerally)\\n    // NOTE: Do *not* include `want`, already included in `sweep` below\\n    //\\n    // Example:\\n    //\\n    //    function protectedTokens() internal override view returns (address[] memory) {\\n    //      address[] memory protected = new address[](3);\\n    //      protected[0] = tokenA;\\n    //      protected[1] = tokenB;\\n    //      protected[2] = tokenC;\\n    //      return protected;\\n    //    }\\n    function protectedTokens() internal view virtual returns (address[] memory);\\n\\n    function sweep(address _token) external {\\n        require(msg.sender == governance(), \\\"!authorized\\\");\\n        require(_token != address(want), \\\"!want\\\");\\n\\n        address[] memory _protectedTokens = protectedTokens();\\n        for (uint256 i; i < _protectedTokens.length; i++)\\n            require(_token != _protectedTokens[i], \\\"!protected\\\");\\n\\n        IERC20(_token).transfer(\\n            governance(),\\n            IERC20(_token).balanceOf(address(this))\\n        );\\n    }\\n}\",\"keccak256\":\"0xc885ace90762da9d02cb9f63cb7cb9d077107ffa3010c7800e7ceb1e5fc8f2ed\",\"license\":\"MIT\"},\"src/extensions/BaseWraper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {VaultAPI} from \\\"./BaseStrategy.sol\\\";\\n\\ninterface RegistryAPI {\\n  function governance() external view returns (address);\\n\\n  function latestVault(address token) external view returns (address);\\n\\n  function numVaults(address token) external view returns (uint256);\\n\\n  function vaults(address token, uint256 deploymentId) external view returns (address);\\n}\\n\\n/**\\n * @title Yearn Base Wrapper\\n * @author yearn.finance\\n * @notice\\n *  BaseWrapper implements all of the required functionality to interoperate\\n *  closely with the Vault contract. This contract should be inherited and the\\n *  abstract methods implemented to adapt the Wrapper.\\n *  A good starting point to build a wrapper is https://github.com/yearn/brownie-wrapper-mix\\n *\\n */\\nabstract contract BaseWrapper {\\n  using Math for uint256;\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  IERC20 public token;\\n\\n  // Reduce number of external calls (SLOADs stay the same)\\n  VaultAPI[] private _cachedVaults;\\n\\n  RegistryAPI public registry;\\n\\n  // ERC20 Unlimited Approvals (short-circuits VaultAPI.transferFrom)\\n  uint256 constant UNLIMITED_APPROVAL = type(uint256).max;\\n  // Sentinal values used to save gas on deposit/withdraw/migrate\\n  // NOTE: DEPOSIT_EVERYTHING == WITHDRAW_EVERYTHING == MIGRATE_EVERYTHING\\n  uint256 constant DEPOSIT_EVERYTHING = type(uint256).max;\\n  uint256 constant WITHDRAW_EVERYTHING = type(uint256).max;\\n  uint256 constant MIGRATE_EVERYTHING = type(uint256).max;\\n  // VaultsAPI.depositLimit is unlimited\\n  uint256 constant UNCAPPED_DEPOSITS = type(uint256).max;\\n\\n  constructor(address _token, address _registry) {\\n    // Recommended to use a token with a `Registry.latestVault(_token) != address(0)`\\n    token = IERC20(_token);\\n    // Recommended to use `v2.registry.ychad.eth`\\n    registry = RegistryAPI(_registry);\\n  }\\n\\n  /**\\n   * @notice\\n   *  Used to update the yearn registry.\\n   * @param _registry The new _registry address.\\n   */\\n  function setRegistry(address _registry) external {\\n    require(msg.sender == registry.governance());\\n    // In case you want to override the registry instead of re-deploying\\n    registry = RegistryAPI(_registry);\\n    // Make sure there's no change in governance\\n    // NOTE: Also avoid bricking the wrapper from setting a bad registry\\n    require(msg.sender == registry.governance());\\n  }\\n\\n  /**\\n   * @notice\\n   *  Used to get the most revent vault for the token using the registry.\\n   * @return An instance of a VaultAPI\\n   */\\n  function bestVault() public view virtual returns (VaultAPI) {\\n    return VaultAPI(registry.latestVault(address(token)));\\n  }\\n\\n  /**\\n   * @notice\\n   *  Used to get all vaults from the registery for the token\\n   * @return An array containing instances of VaultAPI\\n   */\\n  function allVaults() public view virtual returns (VaultAPI[] memory) {\\n    uint256 cache_length = _cachedVaults.length;\\n    uint256 num_vaults = registry.numVaults(address(token));\\n\\n    // Use cached\\n    if (cache_length == num_vaults) {\\n      return _cachedVaults;\\n    }\\n\\n    VaultAPI[] memory vaults = new VaultAPI[](num_vaults);\\n\\n    for (uint256 vault_id = 0; vault_id < cache_length; vault_id++) {\\n      vaults[vault_id] = _cachedVaults[vault_id];\\n    }\\n\\n    for (uint256 vault_id = cache_length; vault_id < num_vaults; vault_id++) {\\n      vaults[vault_id] = VaultAPI(registry.vaults(address(token), vault_id));\\n    }\\n\\n    return vaults;\\n  }\\n\\n  function _updateVaultCache(VaultAPI[] memory vaults) internal {\\n    // NOTE: even though `registry` is update-able by Yearn, the intended behavior\\n    //       is that any future upgrades to the registry will replay the version\\n    //       history so that this cached value does not get out of date.\\n    if (vaults.length > _cachedVaults.length) {\\n      _cachedVaults = vaults;\\n    }\\n  }\\n\\n  /**\\n   * @notice\\n   *  Used to get the balance of an account accross all the vaults for a token.\\n   *  @dev will be used to get the wrapper balance using totalVaultBalance(address(this)).\\n   *  @param account The address of the account.\\n   *  @return balance of token for the account accross all the vaults.\\n   */\\n  function totalVaultBalance(address account) public view returns (uint256 balance) {\\n    VaultAPI[] memory vaults = allVaults();\\n\\n    for (uint256 id = 0; id < vaults.length; id++) {\\n      uint256 individualBalance = vaults[id].balanceOf(account).mul(vaults[id].pricePerShare());\\n      balance = balance.add(\\n        vaults[id].balanceOf(account).mul(vaults[id].pricePerShare()).div(10**uint256(vaults[id].decimals()))\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice\\n   *  Used to get the TVL on the underlying vaults.\\n   *  @return assets the sum of all the assets managed by the underlying vaults.\\n   */\\n  function totalAssets() public view returns (uint256 assets) {\\n    VaultAPI[] memory vaults = allVaults();\\n\\n    for (uint256 id = 0; id < vaults.length; id++) {\\n      assets = assets.add(vaults[id].totalAssets());\\n    }\\n  }\\n\\n  function _deposit(\\n    address depositor,\\n    address receiver,\\n    uint256 amount, // if `MAX_UINT256`, just deposit everything\\n    bool pullFunds // If true, funds need to be pulled from `depositor` via `transferFrom`\\n  ) internal returns (uint256 deposited) {\\n    VaultAPI _bestVault = bestVault();\\n\\n    if (pullFunds) {\\n      if (amount != DEPOSIT_EVERYTHING) {\\n        token.safeTransferFrom(depositor, address(this), amount);\\n      } else {\\n        token.safeTransferFrom(depositor, address(this), token.balanceOf(depositor));\\n      }\\n    }\\n\\n    if (token.allowance(address(this), address(_bestVault)) < amount) {\\n      token.safeApprove(address(_bestVault), 0); // Avoid issues with some tokens requiring 0\\n      token.safeApprove(address(_bestVault), UNLIMITED_APPROVAL); // Vaults are trusted\\n    }\\n\\n    // Depositing returns number of shares deposited\\n    // NOTE: Shortcut here is assuming the number of tokens deposited is equal to the\\n    //       number of shares credited, which helps avoid an occasional multiplication\\n    //       overflow if trying to adjust the number of shares by the share price.\\n    uint256 beforeBal = token.balanceOf(address(this));\\n    _bestVault.deposit(amount, receiver);\\n\\n    uint256 afterBal = token.balanceOf(address(this));\\n    deposited = beforeBal.sub(afterBal);\\n    // `receiver` now has shares of `_bestVault` as balance, converted to `token` here\\n    // Issue a refund if not everything was deposited\\n    if (depositor != address(this) && afterBal > 0) token.safeTransfer(depositor, afterBal);\\n  }\\n\\n  function _withdraw(\\n    address sender,\\n    address receiver,\\n    uint256 amount, // if `MAX_UINT256`, just withdraw everything\\n    bool withdrawFromBest // If true, also withdraw from `_bestVault`\\n  ) internal returns (uint256 withdrawn) {\\n    VaultAPI _bestVault = bestVault();\\n\\n    VaultAPI[] memory vaults = allVaults();\\n    _updateVaultCache(vaults);\\n\\n    // NOTE: This loop will attempt to withdraw from each Vault in `allVaults` that `sender`\\n    //       is deposited in, up to `amount` tokens. The withdraw action can be expensive,\\n    //       so it if there is a denial of service issue in withdrawing, the downstream usage\\n    //       of this wrapper contract must give an alternative method of withdrawing using\\n    //       this function so that `amount` is less than the full amount requested to withdraw\\n    //       (e.g. \\\"piece-wise withdrawals\\\"), leading to less loop iterations such that the\\n    //       DoS issue is mitigated (at a tradeoff of requiring more txns from the end user).\\n    for (uint256 id = 0; id < vaults.length; id++) {\\n      if (!withdrawFromBest && vaults[id] == _bestVault) {\\n        continue; // Don't withdraw from the best\\n      }\\n\\n      // Start with the total shares that `sender` has\\n      uint256 availableShares = vaults[id].balanceOf(sender);\\n\\n      // Restrict by the allowance that `sender` has to this contract\\n      // NOTE: No need for allowance check if `sender` is this contract\\n      if (sender != address(this)) {\\n        availableShares = Math.min(availableShares, vaults[id].allowance(sender, address(this)));\\n      }\\n\\n      // Limit by maximum withdrawal size from each vault\\n      availableShares = Math.min(availableShares, vaults[id].maxAvailableShares());\\n\\n      if (availableShares > 0) {\\n        // Intermediate step to move shares to this contract before withdrawing\\n        // NOTE: No need for share transfer if this contract is `sender`\\n        if (sender != address(this)) vaults[id].transferFrom(sender, address(this), availableShares);\\n\\n        if (amount != WITHDRAW_EVERYTHING) {\\n          // Compute amount to withdraw fully to satisfy the request\\n          uint256 estimatedShares = amount\\n          .sub(withdrawn).mul(10**uint256(vaults[id].decimals())).div(vaults[id].pricePerShare()); // NOTE: Changes every iteration // NOTE: Every Vault is different\\n\\n          // Limit amount to withdraw to the maximum made available to this contract\\n          // NOTE: Avoid corner case where `estimatedShares` isn't precise enough\\n          // NOTE: If `0 < estimatedShares < 1` but `availableShares > 1`, this will withdraw more than necessary\\n          if (estimatedShares > 0 && estimatedShares < availableShares) {\\n            withdrawn = withdrawn.add(vaults[id].withdraw(estimatedShares, address(this)));\\n          } else {\\n            withdrawn = withdrawn.add(vaults[id].withdraw(availableShares, address(this)));\\n          }\\n        } else {\\n          withdrawn = withdrawn.add(vaults[id].withdraw(type(uint256).max, address(this)));\\n        }\\n\\n        // Check if we have fully satisfied the request\\n        // NOTE: use `amount = WITHDRAW_EVERYTHING` for withdrawing everything\\n        if (amount <= withdrawn) break; // withdrawn as much as we needed\\n      }\\n    }\\n\\n    // If we have extra, deposit back into `_bestVault` for `sender`\\n    // NOTE: Invariant is `withdrawn <= amount`\\n    if (withdrawn > amount && withdrawn.sub(amount) > _bestVault.pricePerShare().div(10**_bestVault.decimals())) {\\n      // Don't forget to approve the deposit\\n      if (token.allowance(address(this), address(_bestVault)) < withdrawn.sub(amount)) {\\n        token.safeApprove(address(_bestVault), UNLIMITED_APPROVAL); // Vaults are trusted\\n      }\\n\\n      _bestVault.deposit(withdrawn.sub(amount), sender);\\n      withdrawn = amount;\\n    }\\n\\n    // `receiver` now has `withdrawn` tokens as balance\\n    if (receiver != address(this)) token.safeTransfer(receiver, withdrawn);\\n  }\\n\\n  function _migrate(address account) internal returns (uint256) {\\n    return _migrate(account, MIGRATE_EVERYTHING);\\n  }\\n\\n  function _migrate(address account, uint256 amount) internal returns (uint256) {\\n    // NOTE: In practice, it was discovered that <50 was the maximum we've see for this variance\\n    return _migrate(account, amount, 0);\\n  }\\n\\n  function _migrate(\\n    address account,\\n    uint256 amount,\\n    uint256 maxMigrationLoss\\n  ) internal returns (uint256 migrated) {\\n    VaultAPI _bestVault = bestVault();\\n\\n    // NOTE: Only override if we aren't migrating everything\\n    uint256 _depositLimit = _bestVault.depositLimit();\\n    uint256 _totalAssets = _bestVault.totalAssets();\\n    if (_depositLimit <= _totalAssets) return 0; // Nothing to migrate (not a failure)\\n\\n    uint256 _amount = amount;\\n    if (_depositLimit < UNCAPPED_DEPOSITS && _amount < WITHDRAW_EVERYTHING) {\\n      // Can only deposit up to this amount\\n      uint256 _depositLeft = _depositLimit.sub(_totalAssets);\\n      if (_amount > _depositLeft) _amount = _depositLeft;\\n    }\\n\\n    if (_amount > 0) {\\n      // NOTE: `false` = don't withdraw from `_bestVault`\\n      uint256 withdrawn = _withdraw(account, address(this), _amount, false);\\n      if (withdrawn == 0) return 0; // Nothing to migrate (not a failure)\\n\\n      // NOTE: `false` = don't do `transferFrom` because it's already local\\n      migrated = _deposit(address(this), account, withdrawn, false);\\n      // NOTE: Due to the precision loss of certain calculations, there is a small inefficency\\n      //       on how migrations are calculated, and this could lead to a DoS issue. Hence, this\\n      //       value is made to be configurable to allow the user to specify how much is acceptable\\n      require(withdrawn.sub(migrated) <= maxMigrationLoss);\\n    } // else: nothing to migrate! (not a failure)\\n  }\\n}\\n\",\"keccak256\":\"0xac5d909b7d091dffe561c11693ec1ed971c23fa83ece399bbfdaac59c4cdb208\",\"license\":\"GPL-3.0\"},\"src/extensions/IERC20PartialDecimals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Partial interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20PartialDecimals {\\n  /**\\n   * @dev Returns the decimals places of the token.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x37e3ac28d6daa54ad88b519f769385f093809ceeb018f4566092f9dac4de5ae7\",\"license\":\"MIT\"},\"src/extensions/YearnFinanceWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {VaultAPI, BaseWrapper} from \\\"./BaseWraper.sol\\\";\\n\\ncontract YearnFinanceWrapper is ERC20, BaseWrapper {\\n  /// @notice The EIP-712 typehash for the contract's domain\\n  bytes32 public constant DOMAIN_TYPEHASH =\\n    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n  bytes32 public immutable DOMAIN_SEPARATOR;\\n\\n  /// @notice The EIP-712 typehash for the permit struct used by the contract\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n  /// @notice A record of states for signing / validating signatures\\n  mapping(address => uint256) public nonces;\\n\\n  address public affiliate;\\n\\n  address public pendingAffiliate;\\n\\n  modifier onlyAffiliate() {\\n    require(msg.sender == affiliate);\\n    _;\\n  }\\n\\n  constructor(\\n    address _token,\\n    address _registry,\\n    string memory name,\\n    string memory symbol\\n  ) public BaseWrapper(_token, _registry) ERC20(name, symbol) {\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), keccak256(bytes(\\\"1\\\")), _getChainId(), address(this))\\n    );\\n    affiliate = msg.sender;\\n    // decimals(uint8(ERC20(address(token)).decimals()));\\n  }\\n\\n  function _getChainId() internal view returns (uint256) {\\n    uint256 chainId;\\n    assembly {\\n      chainId := chainid()\\n    }\\n    return chainId;\\n  }\\n\\n  function setAffiliate(address _affiliate) external onlyAffiliate {\\n    pendingAffiliate = _affiliate;\\n  }\\n\\n  function acceptAffiliate() external {\\n    require(msg.sender == pendingAffiliate);\\n    affiliate = msg.sender;\\n  }\\n\\n  function _shareValue(uint256 numShares) internal view returns (uint256) {\\n    uint256 totalShares = totalSupply();\\n\\n    if (totalShares > 0) {\\n      return (totalVaultBalance(address(this)) * (numShares)) / (totalShares);\\n    } else {\\n      return numShares;\\n    }\\n  }\\n\\n  function pricePerShare() public view returns (uint256) {\\n    console.log(\\\"price per share\\\");\\n    uint256 pricePerShare;\\n    if (totalSupply() == 0) {\\n      return 1e18;\\n    } else {\\n      pricePerShare = (totalVaultBalance(address(this)) * (10**uint256(decimals()))) / (totalSupply());\\n    }\\n    return pricePerShare;\\n  }\\n\\n  function _sharesForValue(uint256 amount) internal view returns (uint256) {\\n    // total wrapper assets before deposit (assumes deposit already occured)\\n    uint256 totalBalance = totalVaultBalance(address(this));\\n    if (totalBalance > amount) {\\n      return (totalSupply() * (amount)) / (totalBalance - (amount));\\n    } else {\\n      return amount;\\n    }\\n  }\\n\\n  function deposit(uint256 amount) external returns (uint256 deposited) {\\n    deposited = _deposit(msg.sender, address(this), amount, true); // `true` = pull from `msg.sender`\\n    uint256 shares = _sharesForValue(deposited); // NOTE: Must be calculated after deposit is handled\\n    _mint(msg.sender, shares);\\n  }\\n\\n  function withdraw(\\n    address _address,\\n    uint256 _amount,\\n    address _to\\n  ) external returns (uint256) {\\n    return withdraw(balanceOf(msg.sender));\\n  }\\n\\n  function withdraw(uint256 shares) public returns (uint256 withdrawn) {\\n    withdrawn = _withdraw(address(this), msg.sender, _shareValue(shares), true); // `true` = withdraw from `bestVault`\\n    _burn(msg.sender, shares);\\n  }\\n\\n  function migrate() external onlyAffiliate returns (uint256) {\\n    return _migrate(address(this));\\n  }\\n\\n  function migrate(uint256 amount) external onlyAffiliate returns (uint256) {\\n    return _migrate(address(this), amount);\\n  }\\n\\n  function migrate(uint256 amount, uint256 maxMigrationLoss) external onlyAffiliate returns (uint256) {\\n    return _migrate(address(this), amount, maxMigrationLoss);\\n  }\\n\\n  /**\\n   * @notice Triggers an approval from owner to spends\\n   * @param owner The address to approve from\\n   * @param spender The address to be approved\\n   * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n   * @param deadline The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(owner != address(0), \\\"permit: signature\\\");\\n    require(block.timestamp <= deadline, \\\"permit: expired\\\");\\n\\n    bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));\\n    bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, structHash));\\n\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory == owner, \\\"permit: unauthorized\\\");\\n\\n    _approve(owner, spender, amount);\\n  }\\n\\n  function getReserveNormalizedIncome() public view returns (uint256) {\\n    console.log(\\\"getReserveNormalizedIncome\\\");\\n    // TODO: Scale to ray accordingly to the decimals of the token\\n    return pricePerShare() * 1e9; // Scales result to RAY\\n  }\\n}\\n\",\"keccak256\":\"0xeefc85f4a87fcc504236892a19b001ac3e69f35cd8bc3511ad18883a34ebbf6c\",\"license\":\"MIT\"},\"src/extensions/interfaces/StrategyApi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * This interface is here for the keeper bot to use.\\n */\\ninterface StrategyAPI {\\n    function name() external view returns (string memory);\\n\\n    function vault() external view returns (address);\\n\\n    function want() external view returns (address);\\n\\n    function apiVersion() external pure returns (string memory);\\n\\n    function keeper() external view returns (address);\\n\\n    function isActive() external view returns (bool);\\n\\n    function delegatedAssets() external view returns (uint256);\\n\\n    function estimatedTotalAssets() external view returns (uint256);\\n\\n    function tendTrigger(uint256 callCost) external view returns (bool);\\n\\n    function tend() external;\\n\\n    function harvestTrigger(uint256 callCost) external view returns (bool);\\n\\n    function harvest() external;\\n\\n    event Harvested(\\n        uint256 profit,\\n        uint256 loss,\\n        uint256 debtPayment,\\n        uint256 debtOutstanding\\n    );\\n}\",\"keccak256\":\"0xd28e2fdf2b7f3de7cb68f95fecf6b6e5d37a8cf61e3b51534b2958b0bad28060\",\"license\":\"MIT\"},\"src/extensions/interfaces/VaultApi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct StrategyParams {\\n    uint256 performanceFee;\\n    uint256 activation;\\n    uint256 debtRatio;\\n    uint256 minDebtPerHarvest;\\n    uint256 maxDebtPerHarvest;\\n    uint256 lastReport;\\n    uint256 totalDebt;\\n    uint256 totalGain;\\n    uint256 totalLoss;\\n}\\n\\ninterface VaultAPI is IERC20 {\\n    function name() external view returns (string calldata);\\n\\n    function symbol() external view returns (string calldata);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function apiVersion() external pure returns (string memory);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 expiry,\\n        bytes calldata signature\\n    ) external returns (bool);\\n\\n    function deposit(uint256 amount, address recipient)\\n        external\\n        returns (uint256);\\n\\n    function withdraw(uint256 assets, address recipient)\\n        external\\n        returns (uint256);\\n\\n    function token() external view returns (address);\\n\\n    function strategies(address _strategy)\\n        external\\n        view\\n        returns (StrategyParams memory);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function depositLimit() external view returns (uint256);\\n\\n    function maxAvailableShares() external view returns (uint256);\\n\\n    /**\\n     * View how much the Vault would increase this Strategy's borrow limit,\\n     * based on its present performance (since its last report). Can be used to\\n     * determine expectedReturn in your Strategy.\\n     */\\n    function creditAvailable() external view returns (uint256);\\n\\n    /**\\n     * View how much the Vault would like to pull back from the Strategy,\\n     * based on its present performance (since its last report). Can be used to\\n     * determine expectedReturn in your Strategy.\\n     */\\n    function debtOutstanding() external view returns (uint256);\\n\\n    /**\\n     * View how much the Vault expect this Strategy to return at the current\\n     * block, based on its present performance (since its last report). Can be\\n     * used to determine expectedReturn in your Strategy.\\n     */\\n    function expectedReturn() external view returns (uint256);\\n\\n    /**\\n     * This is the main contact point where the Strategy interacts with the\\n     * Vault. It is critical that this call is handled as intended by the\\n     * Strategy. Therefore, this function will be called by BaseStrategy to\\n     * make sure the integration is correct.\\n     */\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external returns (uint256);\\n\\n    /**\\n     * This function should only be used in the scenario where the Strategy is\\n     * being retired but no migration of the positions are possible, or in the\\n     * extreme scenario that the Strategy needs to be put into \\\"Emergency Exit\\\"\\n     * mode in order for it to exit as quickly as possible. The latter scenario\\n     * could be for any reason that is considered \\\"critical\\\" that the Strategy\\n     * exits its position as fast as possible, such as a sudden change in\\n     * market conditions leading to losses, or an imminent failure in an\\n     * external dependency.\\n     */\\n    function revokeStrategy() external;\\n\\n    /**\\n     * View the governance address of the Vault to assert privileged functions\\n     * can only be called by governance. The Strategy serves the Vault, so it\\n     * is subject to governance defined by the Vault.\\n     */\\n    function governance() external view returns (address);\\n\\n    /**\\n     * View the management address of the Vault to assert privileged functions\\n     * can only be called by management. The Strategy serves the Vault, so it\\n     * is subject to management defined by the Vault.\\n     */\\n    function management() external view returns (address);\\n\\n    /**\\n     * View the guardian address of the Vault to assert privileged functions\\n     * can only be called by guardian. The Strategy serves the Vault, so it\\n     * is subject to guardian defined by the Vault.\\n     */\\n    function guardian() external view returns (address);\\n}\",\"keccak256\":\"0x4d9a1ac32c88bc3de3515072b6de45acb3b908b3ba92ade5eb2a12005aedd567\",\"license\":\"MIT\"},\"src/interfaces/IBorrowerPools.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../extensions/AaveILendingPool.sol\\\";\\nimport \\\"../lib/Types.sol\\\";\\n\\n/**\\n * @title IBorrowerPools\\n * @notice Used by the Position contract to pool lender positions in the borrowers order books\\n *         Used by the borrowers to manage their loans on their pools\\n **/\\ninterface IBorrowerPools {\\n  // EVENTS\\n\\n  /**\\n   * @notice Emitted after a successful borrow\\n   * @param OWNER The identifier of the pool\\n   * @param normalizedBorrowedAmount The actual amount of tokens borrowed\\n   * @param establishmentFees Fees paid to the protocol at borrow time\\n   **/\\n  event Borrow(address indexed OWNER, uint128 normalizedBorrowedAmount, uint128 establishmentFees);\\n\\n  /**\\n   * @notice Emitted after a successful further borrow\\n   * @param OWNER The identifier of the pool\\n   * @param normalizedBorrowedAmount The actual amount of tokens borrowed\\n   * @param establishmentFees Fees paid to the protocol at borrow time\\n   **/\\n  event FurtherBorrow(address indexed OWNER, uint128 normalizedBorrowedAmount, uint128 establishmentFees);\\n\\n  /**\\n   * @notice Emitted after a successful repay\\n   * @param OWNER The identifier of the pool\\n   * @param normalizedRepayAmount The actual amount of tokens repaid\\n   * @param repaymentFee The amount of fee paid to the protocol at repay time\\n   * @param normalizedDepositsAfterRepay The actual amount of tokens deposited and available for next loan after repay\\n   * @param nextLoanMinStart The timestamp after which a new loan can be taken\\n   **/\\n  event Repay(\\n    address indexed OWNER,\\n    uint128 normalizedRepayAmount,\\n    uint128 repaymentFee,\\n    uint128 normalizedDepositsAfterRepay,\\n    uint128 nextLoanMinStart\\n  );\\n\\n  /**\\n   * @notice Emitted after a successful early repay\\n   * @param OWNER The identifier of the pool\\n   * @param normalizedRepayAmount The actual amount of tokens repaid\\n   * @param repaymentFee The amount of fee paid to the protocol at repay time\\n   * @param normalizedDepositsAfterRepay The actual amount of tokens deposited and available for next loan after repay\\n   * @param nextLoanMinStart The timestamp after which a new loan can be taken\\n   **/\\n  event EarlyRepay(\\n    address indexed OWNER,\\n    uint128 normalizedRepayAmount,\\n    uint128 repaymentFee,\\n    uint128 normalizedDepositsAfterRepay,\\n    uint128 nextLoanMinStart\\n  );\\n\\n  /**\\n   * @notice Emitted after a successful repay, made after the repayment period\\n   * Includes a late repay fee\\n   * @param OWNER The identifier of the pool\\n   * @param normalizedRepayAmount The actual amount of tokens repaid\\n   * @param lateRepayFee The amount of fee paid due to a late repayment\\n   * @param repaymentFee The amount of fee paid to the protocol at repay time\\n   * @param normalizedDepositsAfterRepay The actual amount of tokens deposited and available for next loan after repay\\n   * @param nextLoanMinStart The timestamp after which a new loan can be taken\\n   **/\\n  event LateRepay(\\n    address indexed OWNER,\\n    uint128 normalizedRepayAmount,\\n    uint128 lateRepayFee,\\n    uint128 repaymentFee,\\n    uint128 normalizedDepositsAfterRepay,\\n    uint128 nextLoanMinStart\\n  );\\n\\n  /**\\n   * @notice Emitted after a borrower successfully deposits tokens in its pool liquidity rewards reserve\\n   * @param OWNER The identifier of the pool\\n   * @param normalizedAmount The actual amount of tokens deposited into the reserve\\n   **/\\n  event TopUpLiquidityRewards(address OWNER, uint128 normalizedAmount);\\n\\n  // The below events and enums are being used in the PoolLogic library\\n  // The same way that libraries don't have storage, they don't have an event log\\n  // Hence event logs will be saved in the calling contract\\n  // For the contract abi to reflect this and be used by offchain libraries,\\n  // we define these events and enums in the contract itself as well\\n\\n  /**\\n   * @notice Emitted when a tick is initialized, i.e. when its first deposited in\\n   * @param OWNER The identifier of the pool\\n   * @param rate The tick's bidding rate\\n   * @param atlendisLiquidityRatio The tick current liquidity index\\n   **/\\n  event TickInitialized(address OWNER, uint128 rate, uint128 atlendisLiquidityRatio);\\n\\n  /**\\n   * @notice Emitted after a deposit on a tick that was done during a loan\\n   * @param OWNER The identifier of the pool\\n   * @param rate The position bidding rate\\n   * @param adjustedPendingDeposit The amount of tokens deposited during a loan, adjusted to the current liquidity index\\n   **/\\n  event TickLoanDeposit(address OWNER, uint128 rate, uint128 adjustedPendingDeposit);\\n\\n  /**\\n   * @notice Emitted after a deposit on a tick that was done without an active loan\\n   * @param OWNER The identifier of the pool\\n   * @param rate The position bidding rate\\n   * @param adjustedAvailableDeposit The amount of tokens available to the borrower for its next loan\\n   * @param atlendisLiquidityRatio The tick current liquidity index\\n   **/\\n  event TickNoLoanDeposit(\\n    address OWNER,\\n    uint128 rate,\\n    uint128 adjustedAvailableDeposit,\\n    uint128 atlendisLiquidityRatio\\n  );\\n\\n  /**\\n   * @notice Emitted when a borrow successfully impacts a tick\\n   * @param OWNER The identifier of the pool\\n   * @param rate The tick's bidding rate\\n   * @param adjustedRemainingAmountReduction The amount of tokens left to borrow from other ticks\\n   * @param loanedAmount The amount borrowed from the tick\\n   * @param atlendisLiquidityRatio The tick current liquidity index\\n   * @param unborrowedRatio Proportion of ticks funds that were not borrowed\\n   **/\\n  event TickBorrow(\\n    address OWNER,\\n    uint128 rate,\\n    uint128 adjustedRemainingAmountReduction,\\n    uint128 loanedAmount,\\n    uint128 atlendisLiquidityRatio,\\n    uint128 unborrowedRatio\\n  );\\n\\n  /**\\n   * @notice Emitted when a withdraw is done outside of a loan on the tick\\n   * @param OWNER The identifier of the pool\\n   * @param rate The tick's bidding rate\\n   * @param adjustedAmountToWithdraw The amount of tokens to withdraw, adjusted to the tick liquidity index\\n   **/\\n  event TickWithdrawPending(address OWNER, uint128 rate, uint128 adjustedAmountToWithdraw);\\n\\n  /**\\n   * @notice Emitted when a withdraw is done during a loan on the tick\\n   * @param OWNER The identifier of the pool\\n   * @param rate The tick's bidding rate\\n   * @param adjustedAmountToWithdraw The amount of tokens to withdraw, adjusted to the tick liquidity index\\n   * @param atlendisLiquidityRatio The tick current liquidity index\\n   * @param accruedFeesToWithdraw The amount of fees the position has a right to claim\\n   **/\\n  event TickWithdrawRemaining(\\n    address OWNER,\\n    uint128 rate,\\n    uint128 adjustedAmountToWithdraw,\\n    uint128 atlendisLiquidityRatio,\\n    uint128 accruedFeesToWithdraw\\n  );\\n\\n  /**\\n   * @notice Emitted when pending amounts are merged with the rest of the pool during a repay\\n   * @param OWNER The identifier of the pool\\n   * @param rate The tick's bidding rate\\n   * @param adjustedPendingAmount The amount of pending funds deposited with available funds\\n   **/\\n  event TickPendingDeposit(\\n    address OWNER,\\n    uint128 rate,\\n    uint128 adjustedPendingAmount,\\n    bool poolBondIssuanceIndexIncremented\\n  );\\n\\n  /**\\n   * @notice Emitted when funds from a tick are repaid by the borrower\\n   * @param OWNER The identifier of the pool\\n   * @param rate The tick's bidding rate\\n   * @param adjustedRemainingAmount The total amount of tokens available to the borrower for\\n   * its next loan, adjusted to the tick current liquidity index\\n   * @param atlendisLiquidityRatio The tick current liquidity index\\n   **/\\n  event TickRepay(address OWNER, uint128 rate, uint128 adjustedRemainingAmount, uint128 atlendisLiquidityRatio);\\n\\n  /**\\n   * @notice Emitted when liquidity rewards are distributed to a tick\\n   * @param OWNER The identifier of the pool\\n   * @param rate The tick's bidding rate\\n   * @param remainingLiquidityRewards the amount of liquidityRewards added to the tick\\n   * @param addedAccruedFees Increase in accrued fees for that tick\\n   **/\\n  event CollectFeesForTick(address OWNER, uint128 rate, uint128 remainingLiquidityRewards, uint128 addedAccruedFees);\\n\\n  // VIEW METHODS\\n\\n  /**\\n   * @notice Returns the liquidity ratio of a given tick in a pool's order book.\\n   * The liquidity ratio is an accounting construct to deduce the accrued interest over time.\\n   * @param OWNER The identifier of the pool\\n   * @param rate The tick rate from which to extract the liquidity ratio\\n   * @return liquidityRatio The liquidity ratio of the given tick\\n   **/\\n  function getTickLiquidityRatio(address OWNER, uint128 rate) external view returns (uint128 liquidityRatio);\\n\\n  /**\\n   * @notice Returns the repartition between bonds and deposits of the given tick.\\n   * @param OWNER The identifier of the pool\\n   * @param rate The tick rate from which to get data\\n   * @return adjustedTotalAmount Total amount of deposit in the tick\\n   * @return adjustedRemainingAmount Amount of tokens in tick deposited with the\\n   * underlying yield provider that were deposited before bond issuance\\n   * @return bondsQuantity The quantity of bonds within the tick\\n   * @return adjustedPendingAmount Amount of deposit in tick deposited with the\\n   * underlying yield provider that were deposited after bond issuance\\n   * @return atlendisLiquidityRatio The liquidity ratio of the given tick\\n   * @return accruedFees The total fees claimable in the current tick, either from\\n   * yield provider interests or liquidity rewards accrual\\n   **/\\n  function getTickAmounts(address OWNER, uint128 rate)\\n    external\\n    view\\n    returns (\\n      uint128 adjustedTotalAmount,\\n      uint128 adjustedRemainingAmount,\\n      uint128 bondsQuantity,\\n      uint128 adjustedPendingAmount,\\n      uint128 atlendisLiquidityRatio,\\n      uint128 accruedFees\\n    );\\n\\n  /**\\n   * @notice Returns the timestamp of the last fee distribution to the tick\\n   * @param ownerAddress The identifier of the pool\\n   * @param rate The tick rate from which to get data\\n   * @return lastFeeDistributionTimestamp Timestamp of the last fee's distribution to the tick\\n   **/\\n  function getTickLastUpdate(address ownerAddress, uint128 rate)\\n    external\\n    view\\n    returns (uint128 lastFeeDistributionTimestamp);\\n\\n  /**\\n   * @notice Returns the current state of the pool's parameters\\n   * @param OWNER The identifier of the pool\\n   * @return weightedAverageLendingRate The average deposit bidding rate in the order book\\n   * @return adjustedPendingDeposits Amount of tokens deposited after bond\\n   * issuance and currently on third party yield provider\\n   **/\\n  function getPoolAggregates(address OWNER)\\n    external\\n    view\\n    returns (uint128 weightedAverageLendingRate, uint128 adjustedPendingDeposits);\\n\\n  /**\\n   * @notice Returns the current maturity of the pool\\n   * @param OWNER The identifier of the pool\\n   * @return poolCurrentMaturity The pool's current maturity\\n   **/\\n  function getPoolMaturity(address OWNER) external view returns (uint128 poolCurrentMaturity);\\n\\n  /**\\n   * @notice Estimates the lending rate corresponding to the input amount,\\n   * depending on the current state of the pool\\n   * @param normalizedBorrowedAmount The amount to be borrowed from the pool\\n   * @param OWNER The identifier of the pool\\n   * @return estimatedRate The estimated loan rate for the current state of the pool\\n   **/\\n  function estimateLoanRate(uint128 normalizedBorrowedAmount, address OWNER)\\n    external\\n    view\\n    returns (uint128 estimatedRate);\\n\\n  /**\\n   * @notice Returns the token amount's repartition between bond quantity and normalized\\n   * deposited amount currently placed on third party yield provider\\n   * @param OWNER The identifier of the pool\\n   * @param rate Tick's rate\\n   * @param adjustedAmount Adjusted amount of tokens currently on third party yield provider\\n   * @param bondsIssuanceIndex The identifier of the borrow group\\n   * @return bondsQuantity Quantity of bonds held\\n   * @return normalizedDepositedAmount Amount of deposit currently on third party yield provider\\n   **/\\n  function getAmountRepartition(\\n    address OWNER,\\n    uint128 rate,\\n    uint128 adjustedAmount,\\n    uint128 bondsIssuanceIndex\\n  ) external view returns (uint128 bondsQuantity, uint128 normalizedDepositedAmount);\\n\\n  /**\\n   * @notice Returns the total amount a borrower has to repay to a pool. Includes borrowed\\n   * amount, late repay fees and protocol fees\\n   * @param OWNER The identifier of the pool\\n   * @param earlyRepay indicates if this is an early repay\\n   * @return normalizedRepayAmount Total repay amount\\n   * @return lateRepayFee Normalized amount to be paid to each bond in case of late repayment\\n   * @return repaymentFee Normalized fee amount paid to the protocol\\n   **/\\n  function getRepayAmounts(address OWNER, bool earlyRepay)\\n    external\\n    view\\n    returns (\\n      uint128 normalizedRepayAmount,\\n      uint128 lateRepayFee,\\n      uint128 repaymentFee\\n    );\\n\\n  // LENDER METHODS\\n\\n  /**\\n   * @notice Gets called within the Position.deposit() function and enables a lender to deposit assets\\n   * into a given borrower's order book. The lender specifies a rate (price) at which it is willing to\\n   * lend out its assets (bid on the zero coupon bond). The full amount will initially be deposited\\n   * on the underlying yield provider until the borrower sells bonds at the specified rate.\\n   * @param normalizedAmount The amount of the given asset to deposit\\n   * @param rate The rate at which to bid for a bond\\n   * @param OWNER The identifier of the pool\\n   * @param underlyingToken Contract' address of the token to be deposited\\n   * @param sender The lender address who calls the deposit function on the Position\\n   * @return adjustedAmount Deposited amount adjusted with current liquidity index\\n   * @return bondsIssuanceIndex The identifier of the borrow group to which the deposit has been allocated\\n   **/\\n  function deposit(\\n    uint128 rate,\\n    address OWNER,\\n    address underlyingToken,\\n    address sender,\\n    uint128 normalizedAmount\\n  ) external returns (uint128 adjustedAmount, uint128 bondsIssuanceIndex);\\n\\n  /**\\n   * @notice Gets called within the Position.withdraw() function and enables a lender to\\n   * evaluate the exact amount of tokens it is allowed to withdraw\\n   * @dev This method is meant to be used exclusively with the withdraw() method\\n   * Under certain circumstances, this method can return incorrect values, that would otherwise\\n   * be rejected by the checks made in the withdraw() method\\n   * @param OWNER The identifier of the pool\\n   * @param rate The rate the position is bidding for\\n   * @param adjustedAmount The amount of tokens in the position, adjusted to the deposit liquidity ratio\\n   * @param bondsIssuanceIndex An index determining deposit timing\\n   * @return adjustedAmountToWithdraw The amount of tokens to withdraw, adjuste for borrow pool use\\n   * @return depositedAmountToWithdraw The amount of tokens to withdraw, adjuste for position use\\n   * @return remainingBondsQuantity The quantity of bonds remaining within the position\\n   * @return bondsMaturity The maturity of bonds remaining within the position after withdraw\\n   **/\\n  function getWithdrawAmounts(\\n    address OWNER,\\n    uint128 rate,\\n    uint128 adjustedAmount,\\n    uint128 bondsIssuanceIndex\\n  )\\n    external\\n    view\\n    returns (\\n      uint128 adjustedAmountToWithdraw,\\n      uint128 depositedAmountToWithdraw,\\n      uint128 remainingBondsQuantity,\\n      uint128 bondsMaturity\\n    );\\n\\n  /**\\n   * @notice Gets called within the Position.withdraw() function and enables a lender to\\n   * withdraw assets that are deposited with the underlying yield provider\\n   * @param OWNER The identifier of the pool\\n   * @param rate The rate the position is bidding for\\n   * @param adjustedAmountToWithdraw The actual amount of tokens to withdraw from the position\\n   * @param bondsIssuanceIndex An index determining deposit timing\\n   * @param owner The address to which the withdrawns funds are sent\\n   * @return normalizedDepositedAmountToWithdraw Actual amount of tokens withdrawn and sent to the lender\\n   **/\\n  function withdraw(\\n    address OWNER,\\n    uint128 rate,\\n    uint128 adjustedAmountToWithdraw,\\n    uint128 bondsIssuanceIndex,\\n    address owner\\n  ) external returns (uint128 normalizedDepositedAmountToWithdraw);\\n\\n  /**\\n   * @notice Gets called within Position.updateRate() and updates the order book ticks affected by the position\\n   * updating its rate. This is only possible as long as there are no bonds in the position, i.e the full\\n   * position currently lies with the yield provider\\n   * @param adjustedAmount The adjusted balance of tokens of the given position\\n   * @param OWNER The identifier of the pool\\n   * @param oldRate The current rate of the position\\n   * @param newRate The new rate of the position\\n   * @param oldBondsIssuanceIndex The identifier of the borrow group from the given position\\n   * @return newAdjustedAmount The updated amount of tokens of the position adjusted by the\\n   * new tick's global liquidity ratio\\n   * @return newBondsIssuanceIndex The new borrow group id to which the updated position is linked\\n   **/\\n  function updateRate(\\n    uint128 adjustedAmount,\\n    address OWNER,\\n    uint128 oldRate,\\n    uint128 newRate,\\n    uint128 oldBondsIssuanceIndex\\n  )\\n    external\\n    returns (\\n      uint128 newAdjustedAmount,\\n      uint128 newBondsIssuanceIndex,\\n      uint128 normalizedAmount\\n    );\\n\\n  // BORROWER METHODS\\n\\n  /**\\n   * @notice Called by the borrower to sell bonds to the order book.\\n   * The affected ticks get updated according the amount of bonds sold.\\n   * @param to The address to which the borrowed funds should be sent.\\n   * @param loanAmount The total amount of the loan\\n   **/\\n  function borrow(address to, uint128 loanAmount) external;\\n\\n  /**\\n   * @notice Repays a currently outstanding bonds of the given borrower.\\n   **/\\n  function repay() external;\\n\\n  /**\\n   * @notice Called by the borrower to top up liquidity rewards' reserve that\\n   * is distributed to liquidity providers at the pre-defined distribution rate.\\n   * @param normalizedAmount Amount of tokens  that will be add up to the borrower's liquidity rewards reserve\\n   **/\\n  function topUpLiquidityRewards(uint128 normalizedAmount) external;\\n\\n  // FEE COLLECTION\\n\\n  /**\\n   * @notice Collect yield provider fees as well as liquidity rewards for the target tick\\n   * @param OWNER The identifier of the pool\\n   **/\\n  function collectFeesForTick(address OWNER, uint128 rate) external;\\n\\n  /**\\n   * @notice Collect yield provider fees as well as liquidity rewards for the whole pool\\n   * Iterates over all pool initialized ticks\\n   * @param OWNER The identifier of the pool\\n   **/\\n  function collectFees(address OWNER) external;\\n}\\n\",\"keccak256\":\"0xc0c2a60b3b83b70f330166a92f5dd418b6a60b4bb4a4ab3f27eb5702b64cf97d\",\"license\":\"AGPL-3.0\"},\"src/interfaces/IPoolsController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../lib/Types.sol\\\";\\n\\n/**\\n * @title IPoolsController\\n * @notice Management of the pools\\n **/\\ninterface IPoolsController {\\n  // EVENTS\\n\\n  /**\\n   * @notice Emitted after a pool was creted\\n   **/\\n  event PoolCreated(PoolCreationParams params);\\n\\n  /**\\n   * @notice Emitted after a borrower address was allowed to borrow from a pool\\n   * @param borrowerAddress The address to allow\\n   * @param ownerAddress The identifier of the pool\\n   **/\\n  event BorrowerAllowed(address borrowerAddress, address ownerAddress);\\n\\n  /**\\n   * @notice Emitted after a borrower address was disallowed to borrow from a pool\\n   * @param borrowerAddress The address to disallow\\n   * @param ownerAddress The identifier of the pool\\n   **/\\n  event BorrowerDisallowed(address borrowerAddress, address ownerAddress);\\n\\n  /**\\n   * @notice Emitted when a pool is active, i.e. after the borrower deposits enough tokens\\n   * in its pool liquidity rewards reserve as agreed before the pool creation\\n   * @param ownerAddress The identifier of the pool\\n   **/\\n  event PoolActivated(address ownerAddress);\\n\\n  /**\\n   * @notice Emitted after pool is closed\\n   * @param ownerAddress The identifier of the pool\\n   * @param collectedLiquidityRewards The amount of liquidity rewards to have been collected at closing time\\n   **/\\n  event PoolClosed(address ownerAddress, uint128 collectedLiquidityRewards);\\n\\n  /**\\n   * @notice Emitted when a pool defaults on its loan repayment\\n   * @param ownerAddress The identifier of the pool\\n   * @param distributedLiquidityRewards The remaining liquidity rewards distributed to\\n   * bond holders\\n   **/\\n  event Default(address ownerAddress, uint128 distributedLiquidityRewards);\\n\\n  /**\\n   * @notice Emitted after governance sets the maximum borrowable amount for a pool\\n   **/\\n  event SetMaxBorrowableAmount(uint128 maxTokenDeposit, address ownerAddress);\\n\\n  /**\\n   * @notice Emitted after governance sets the liquidity rewards distribution rate for a pool\\n   **/\\n  event SetLiquidityRewardsDistributionRate(uint128 distributionRate, address ownerAddress);\\n\\n  /**\\n   * @notice Emitted after governance sets the establishment fee for a pool\\n   **/\\n  event SetEstablishmentFeeRate(uint128 establishmentRate, address ownerAddress);\\n\\n  /**\\n   * @notice Emitted after governance sets the repayment fee for a pool\\n   **/\\n  event SetRepaymentFeeRate(uint128 repaymentFeeRate, address ownerAddress);\\n\\n  /**\\n   * @notice Emitted after governance claims the fees associated with a pool\\n   * @param ownerAddress The identifier of the pool\\n   * @param normalizedAmount The amount of tokens claimed\\n   * @param to The address receiving the fees\\n   **/\\n  event ClaimProtocolFees(address ownerAddress, uint128 normalizedAmount, address to);\\n\\n  // VIEW METHODS\\n\\n  /**\\n   * @notice Returns the parameters of a pool\\n   * @param ownerAddress The identifier of the pool\\n   * @return underlyingToken Address of the underlying token of the pool\\n   * @return minRate Minimum rate of deposits accepted in the pool\\n   * @return maxRate Maximum rate of deposits accepted in the pool\\n   * @return rateSpacing Difference between two rates in the pool\\n   * @return maxBorrowableAmount Maximum amount of tokens that can be borrowed from the pool\\n   * @return loanDuration Duration of a loan in the pool\\n   * @return liquidityRewardsDistributionRate Rate at which liquidity rewards are distributed to lenders\\n   * @return cooldownPeriod Period after a loan during which a borrower cannot take another loan\\n   * @return repaymentPeriod Period after a loan end during which a borrower can repay without penalty\\n   * @return lateRepayFeePerBondRate Penalty a borrower has to pay when it repays late\\n   * @return liquidityRewardsActivationThreshold Minimum amount of liqudity rewards a borrower has to\\n   * deposit to active the pool\\n   **/\\n  function getPoolParameters(address ownerAddress)\\n    external\\n    view\\n    returns (\\n      address underlyingToken,\\n      uint128 minRate,\\n      uint128 maxRate,\\n      uint128 rateSpacing,\\n      uint128 maxBorrowableAmount,\\n      uint128 loanDuration,\\n      uint128 liquidityRewardsDistributionRate,\\n      uint128 cooldownPeriod,\\n      uint128 repaymentPeriod,\\n      uint128 lateRepayFeePerBondRate,\\n      uint128 liquidityRewardsActivationThreshold\\n    );\\n\\n  /**\\n   * @notice Returns the fee rates of a pool\\n   * @return establishmentFeeRate Amount of fees paid to the protocol at borrow time\\n   * @return repaymentFeeRate Amount of fees paid to the protocol at repay time\\n   **/\\n  function getPoolFeeRates(address ownerAddress)\\n    external\\n    view\\n    returns (uint128 establishmentFeeRate, uint128 repaymentFeeRate);\\n\\n  /**\\n   * @notice Returns the state of a pool\\n   * @param ownerAddress The identifier of the pool\\n   * @return active Signals if a pool is active and ready to accept deposits\\n   * @return defaulted Signals if a pool was defaulted\\n   * @return closed Signals if a pool was closed\\n   * @return currentMaturity End timestamp of current loan\\n   * @return bondsIssuedQuantity Amount of bonds issued, to be repaid at maturity\\n   * @return normalizedBorrowedAmount Actual amount of tokens that were borrowed\\n   * @return normalizedAvailableDeposits Actual amount of tokens available to be borrowed\\n   * @return lowerInterestRate Minimum rate at which a deposit was made\\n   * @return nextLoanMinStart Cool down period, minimum timestamp after which a new loan can be taken\\n   * @return remainingAdjustedLiquidityRewardsReserve Remaining liquidity rewards to be distributed to lenders\\n   * @return yieldProviderLiquidityRatio Last recorded yield provider liquidity ratio\\n   * @return currentBondsIssuanceIndex Current borrow period identifier of the pool\\n   **/\\n  function getPoolState(address ownerAddress)\\n    external\\n    view\\n    returns (\\n      bool active,\\n      bool defaulted,\\n      bool closed,\\n      uint128 currentMaturity,\\n      uint128 bondsIssuedQuantity,\\n      uint128 normalizedBorrowedAmount,\\n      uint128 normalizedAvailableDeposits,\\n      uint128 lowerInterestRate,\\n      uint128 nextLoanMinStart,\\n      uint128 remainingAdjustedLiquidityRewardsReserve,\\n      uint128 yieldProviderLiquidityRatio,\\n      uint128 currentBondsIssuanceIndex\\n    );\\n\\n  /**\\n   * @notice Signals whether the early repay feature is activated or not\\n   * @return earlyRepay Flag that signifies whether the early repay feature is activated or not\\n   **/\\n  function isEarlyRepay(address ownerAddress) external view returns (bool earlyRepay);\\n\\n  /**\\n   * @notice Returns the state of a pool\\n   * @return defaultTimestamp The timestamp at which the pool was defaulted\\n   **/\\n  function getDefaultTimestamp(address ownerAddress) external view returns (uint128 defaultTimestamp);\\n\\n  // GOVERNANCE METHODS\\n\\n  /**\\n   * @notice Parameters used for a pool creation\\n   * @param ownerAddress The identifier of the pool\\n   * @param underlyingToken Address of the pool underlying token\\n   * @param yieldProvider Yield provider of the pool\\n   * @param minRate Minimum bidding rate for the pool\\n   * @param maxRate Maximum bidding rate for the pool\\n   * @param rateSpacing Difference between two tick rates in the pool\\n   * @param maxBorrowableAmount Maximum amount of tokens a borrower can get from a pool\\n   * @param loanDuration Duration of a loan i.e. maturity of the issued bonds\\n   * @param distributionRate Rate at which the liquidity rewards are distributed to unmatched positions\\n   * @param cooldownPeriod Period of time after a repay during which the borrow cannot take a loan\\n   * @param repaymentPeriod Period after the end of a loan during which the borrower can repay without penalty\\n   * @param lateRepayFeePerBondRate Additional fees applied when a borrower repays its loan after the repayment period ends\\n   * @param establishmentFeeRate Fees paid to Atlendis at borrow time\\n   * @param repaymentFeeRate Fees paid to Atlendis at repay time\\n   * @param liquidityRewardsActivationThreshold Amount of tokens the borrower has to lock into the liquidity\\n   * @param earlyRepay Is early repay activated\\n   * rewards reserve to activate the pool\\n   **/\\n  struct PoolCreationParams {\\n    address poolOwner;\\n    address underlyingToken;\\n    YearnFinanceWrapper yieldProvider;\\n    uint128 minRate;\\n    uint128 maxRate;\\n    uint128 rateSpacing;\\n    uint128 maxBorrowableAmount;\\n    uint128 loanDuration;\\n    uint128 distributionRate;\\n    uint128 cooldownPeriod;\\n    uint128 repaymentPeriod;\\n    uint128 lateRepayFeePerBondRate;\\n    uint128 establishmentFeeRate;\\n    uint128 repaymentFeeRate;\\n    uint128 liquidityRewardsActivationThreshold;\\n    bool earlyRepay;\\n  }\\n\\n  /**\\n   * @notice Creates a new pool\\n   * @param params A struct defining the pool creation parameters\\n   **/\\n  function createNewPool(PoolCreationParams calldata params) external;\\n\\n  /**\\n   * @notice Allow an address to interact with a borrower pool\\n   * @param borrowerAddress The address to allow\\n   * @param ownerAddress The identifier of the pool\\n   **/\\n  function allow(address borrowerAddress, address ownerAddress) external;\\n\\n  /**\\n   * @notice Remove pool interaction rights from an address\\n   * @param borrowerAddress The address to disallow\\n   * @param ownerAddress The identifier of the borrower pool\\n   **/\\n  function disallow(address borrowerAddress, address ownerAddress) external;\\n\\n  /**\\n   * @notice Flags the pool as defaulted\\n   * @param ownerAddress The identifier of the pool to default\\n   **/\\n  function setDefault(address ownerAddress) external;\\n\\n  /**\\n   * @notice Set the maximum amount of tokens that can be borrowed in the target pool\\n   **/\\n  function setMaxBorrowableAmount(uint128 maxTokenDeposit, address ownerAddress) external;\\n\\n  /**\\n   * @notice Set the pool liquidity rewards distribution rate\\n   **/\\n  function setLiquidityRewardsDistributionRate(uint128 distributionRate, address ownerAddress) external;\\n\\n  /**\\n   * @notice Set the pool establishment protocol fee rate\\n   **/\\n  function setEstablishmentFeeRate(uint128 establishmentFeeRate, address ownerAddress) external;\\n\\n  /**\\n   * @notice Set the pool repayment protocol fee rate\\n   **/\\n  function setRepaymentFeeRate(uint128 repaymentFeeRate, address ownerAddress) external;\\n\\n  /**\\n   * @notice Withdraws protocol fees to a target address\\n   * @param ownerAddress The identifier of the pool\\n   * @param normalizedAmount The amount of tokens claimed\\n   * @param to The address receiving the fees\\n   **/\\n  function claimProtocolFees(\\n    address ownerAddress,\\n    uint128 normalizedAmount,\\n    address to\\n  ) external;\\n\\n  /**\\n   * @notice Stops all actions on all pools\\n   **/\\n  function freezePool() external;\\n\\n  /**\\n   * @notice Cancel a freeze, makes actions available again on all pools\\n   **/\\n  function unfreezePool() external;\\n}\\n\",\"keccak256\":\"0xaa554f01f2367ca2374c4c9c45917ee401ffd7720a15ac60e16b72a770f6ba4a\",\"license\":\"AGPL-3.0\"},\"src/lib/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n  // *** Contract Specific Errors ***\\n  // BorrowerPools\\n  error BP_BORROW_MAX_BORROWABLE_AMOUNT_EXCEEDED(); // \\\"Amount borrowed is too big, exceeding borrowable capacity\\\";\\n  error BP_REPAY_NO_ACTIVE_LOAN(); // \\\"No active loan to be repaid, action cannot be performed\\\";\\n  error BP_BORROW_UNSUFFICIENT_BORROWABLE_AMOUNT_WITHIN_BRACKETS(); // \\\"Amount provided is greater than available amount within min rate and max rate brackets\\\";\\n  error BP_REPAY_AT_MATURITY_ONLY(); // \\\"Maturity has not been reached yet, action cannot be performed\\\";\\n  error BP_BORROW_COOLDOWN_PERIOD_NOT_OVER(); // \\\"Cooldown period after a repayment is not over\\\";\\n  error BP_MULTIPLE_BORROW_AFTER_MATURITY(); // \\\"Cannot borrow again from pool after loan maturity\\\";\\n  error BP_POOL_NOT_ACTIVE(); // \\\"Pool not active\\\"\\n  error BP_POOL_DEFAULTED(); // \\\"Pool defaulted\\\"\\n  error BP_LOAN_ONGOING(); // \\\"There's a loan ongoing, cannot update rate\\\"\\n  error BP_BORROW_OUT_OF_BOUND_AMOUNT(); // \\\"Amount provided is greater than available amount, action cannot be performed\\\";\\n  error BP_OUT_OF_BOUND_MIN_RATE(); // \\\"Rate provided is lower than minimum rate of the pool\\\";\\n  error BP_OUT_OF_BOUND_MAX_RATE(); // \\\"Rate provided is greater than maximum rate of the pool\\\";\\n  error BP_UNMATCHED_TOKEN(); // \\\"Token/Asset provided does not match the underlying token of the pool\\\";\\n  error BP_RATE_SPACING(); // \\\"Decimals of rate provided do not comply with rate spacing of the pool\\\";\\n  error BP_BOND_ISSUANCE_ID_TOO_HIGH(); // \\\"Bond issuance id is too high\\\";\\n  error BP_NO_DEPOSIT_TO_WITHDRAW(); // \\\"Deposited amount non-borrowed equals to zero\\\";\\n  error BP_TARGET_BOND_ISSUANCE_INDEX_EMPTY(); // \\\"Target bond issuance index has no amount to withdraw\\\";\\n  error BP_EARLY_REPAY_NOT_ACTIVATED(); // \\\"The early repay feature is not activated for this pool\\\";\\n\\n  // PoolController\\n  error PC_BORROWER_NOT_OWNER(); // \\\"Borrower is not the owner of the pool\\\";\\n  error PC_POOL_NOT_ACTIVE(); // \\\"Pool not active\\\"\\n  error PC_POOL_DEFAULTED(); // \\\"Pool defaulted\\\"\\n  error PC_POOL_ALREADY_SET_FOR_BORROWER(); // \\\"Targeted borrower is already set for another pool\\\";\\n  error PC_POOL_TOKEN_NOT_SUPPORTED(); // \\\"Underlying token is not supported by the yield provider\\\";\\n  error PC_DISALLOW_UNMATCHED_BORROWER(); // \\\"Revoking the wrong borrower as the provided borrower does not match the provided address\\\";\\n  error PC_RATE_SPACING_COMPLIANCE(); // \\\"Provided rate must be compliant with rate spacing\\\";\\n  error PC_NO_ONGOING_LOAN(); // \\\"Cannot default a pool that has no ongoing loan\\\";\\n  error PC_NOT_ENOUGH_PROTOCOL_FEES(); // \\\"Not enough registered protocol fees to withdraw\\\";\\n  error PC_POOL_ALREADY_CLOSED(); // \\\"Pool already closed\\\";\\n  error PC_ZERO_POOL(); // \\\"Cannot make actions on the zero pool\\\";\\n  error PC_ZERO_ADDRESS(); // \\\"Cannot make actions on the zero address\\\";\\n  error PC_REPAYMENT_PERIOD_ONGOING(); // \\\"Cannot default pool while repayment period in ongoing\\\"\\n  error PC_ESTABLISHMENT_FEES_TOO_HIGH(); // \\\"Cannot set establishment fee over 100% of loan amount\\\"\\n  error PC_BORROWER_ALREADY_AUTHORIZED(); // \\\"Borrower already authorized on another pool\\\"\\n\\n  // PositionManager\\n  error POS_MGMT_ONLY_OWNER(); // \\\"Only the owner of the position token can manage it (update rate, withdraw)\\\";\\n  error POS_POSITION_ONLY_IN_BONDS(); // \\\"Cannot withdraw a position that's only in bonds\\\";\\n  error POS_ZERO_AMOUNT(); // \\\"Cannot deposit zero amount\\\";\\n  error POS_TIMELOCK(); // \\\"Cannot withdraw or update rate in the same block as deposit\\\";\\n  error POS_POSITION_DOES_NOT_EXIST(); // \\\"Position does not exist\\\";\\n  error POS_POOL_DEFAULTED(); // \\\"Pool defaulted\\\";\\n  error POS_ZERO_ADDRESS(); // \\\"Cannot make actions on the zero address\\\";\\n  error POS_NOT_ALLOWED(); // \\\"Transaction sender is not allowed to perform the target action\\\";\\n\\n  // PositionDescriptor\\n  error POD_BAD_INPUT(); // \\\"Input pool identifier does not correspond to input pool hash\\\";\\n\\n  //*** Library Specific Errors ***\\n  // WadRayMath\\n  error MATH_MULTIPLICATION_OVERFLOW(); // \\\"The multiplication would result in a overflow\\\";\\n  error MATH_ADDITION_OVERFLOW(); // \\\"The addition would result in a overflow\\\";\\n  error MATH_DIVISION_BY_ZERO(); // \\\"The division would result in a divzion by zero\\\";\\n}\\n\",\"keccak256\":\"0xebfb71cc3a0ed47582e244f69c6e585518ee7678c5634a9a01d46796af01b665\",\"license\":\"AGPL-3.0\"},\"src/lib/PoolLogic.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {Rounding} from \\\"./Rounding.sol\\\";\\nimport {Scaling} from \\\"./Scaling.sol\\\";\\nimport {Uint128WadRayMath} from \\\"./Uint128WadRayMath.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"../extensions/YearnFinanceWrapper.sol\\\";\\n\\nlibrary PoolLogic {\\n  event PoolActivated(address ownerAddress);\\n  enum BalanceUpdateType {\\n    INCREASE,\\n    DECREASE\\n  }\\n  event TickInitialized(address borrower, uint128 rate, uint128 atlendisLiquidityRatio);\\n  event TickLoanDeposit(address borrower, uint128 rate, uint128 adjustedPendingDeposit);\\n  event TickNoLoanDeposit(\\n    address borrower,\\n    uint128 rate,\\n    uint128 adjustedPendingDeposit,\\n    uint128 atlendisLiquidityRatio\\n  );\\n  event TickBorrow(\\n    address borrower,\\n    uint128 rate,\\n    uint128 adjustedRemainingAmountReduction,\\n    uint128 loanedAmount,\\n    uint128 atlendisLiquidityRatio,\\n    uint128 unborrowedRatio\\n  );\\n  event TickWithdrawPending(address borrower, uint128 rate, uint128 adjustedAmountToWithdraw);\\n  event TickWithdrawRemaining(\\n    address borrower,\\n    uint128 rate,\\n    uint128 adjustedAmountToWithdraw,\\n    uint128 atlendisLiquidityRatio,\\n    uint128 accruedFeesToWithdraw\\n  );\\n  event TickPendingDeposit(\\n    address borrower,\\n    uint128 rate,\\n    uint128 adjustedPendingAmount,\\n    bool poolBondIssuanceIndexIncremented\\n  );\\n  event TopUpLiquidityRewards(address borrower, uint128 addedLiquidityRewards);\\n  event TickRepay(address borrower, uint128 rate, uint128 newAdjustedRemainingAmount, uint128 atlendisLiquidityRatio);\\n  event CollectFeesForTick(address borrower, uint128 rate, uint128 remainingLiquidityRewards, uint128 addedAccruedFees);\\n\\n  using PoolLogic for Types.Pool;\\n  using Uint128WadRayMath for uint128;\\n  using Rounding for uint128;\\n  using Scaling for uint128;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  uint256 public constant SECONDS_PER_YEAR = 365 days;\\n  uint256 public constant WAD = 1e18;\\n  uint256 public constant RAY = 1e27;\\n\\n  /**\\n   * @dev Getter for the multiplier allowing a conversion between pending and deposited\\n   * amounts for the target bonds issuance index\\n   **/\\n  function getBondIssuanceMultiplierForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 bondsIssuanceIndex\\n  ) internal view returns (uint128 returnBondsIssuanceMultiplier) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n    returnBondsIssuanceMultiplier = tick.bondsIssuanceIndexMultiplier[bondsIssuanceIndex];\\n    if (returnBondsIssuanceMultiplier == 0) {\\n      returnBondsIssuanceMultiplier = uint128(RAY);\\n    }\\n  }\\n\\n  /**\\n   * @dev Get share of accumulated fees from stored current tick state\\n   **/\\n  function getAccruedFeesShare(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 adjustedAmount\\n  ) internal view returns (uint128 accruedFeesShare) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n    accruedFeesShare = tick.accruedFees.wadMul(adjustedAmount).wadDiv(tick.adjustedRemainingAmount);\\n  }\\n\\n  /**\\n   * @dev Get share of accumulated fees from estimated current tick state\\n   **/\\n  function peekAccruedFeesShare(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 adjustedAmount,\\n    uint128 accruedFees\\n  ) public view returns (uint128 accruedFeesShare) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n    if (tick.adjustedRemainingAmount == 0) {\\n      return 0;\\n    }\\n    accruedFeesShare = accruedFees.wadMul(adjustedAmount).wadDiv(tick.adjustedRemainingAmount);\\n  }\\n\\n  function getLateRepayFeePerBond(Types.Pool storage pool) public view returns (uint128 lateRepayFeePerBond) {\\n    uint256 lateRepaymentTimestamp = pool.state.currentMaturity + pool.parameters.REPAYMENT_PERIOD;\\n    if (block.timestamp > lateRepaymentTimestamp) {\\n      uint256 referenceTimestamp = pool.state.defaultTimestamp > 0 ? pool.state.defaultTimestamp : block.timestamp;\\n      lateRepayFeePerBond = uint128(\\n        uint256(referenceTimestamp - lateRepaymentTimestamp) * uint256(pool.parameters.LATE_REPAY_FEE_PER_BOND_RATE)\\n      );\\n    }\\n  }\\n\\n  function getRepaymentFees(Types.Pool storage pool, uint128 normalizedRepayAmount)\\n    public\\n    view\\n    returns (uint128 repaymentFees)\\n  {\\n    repaymentFees = (normalizedRepayAmount - pool.state.normalizedBorrowedAmount).wadMul(\\n      pool.parameters.REPAYMENT_FEE_RATE\\n    );\\n  }\\n\\n  /**\\n   * @dev The return value includes only notional and accrued interest,\\n   * it does not include any fees due for repay by the borrrower\\n   **/\\n  function getRepayValue(Types.Pool storage pool, bool earlyRepay) public view returns (uint128 repayValue) {\\n    if (pool.state.currentMaturity == 0) {\\n      return 0;\\n    }\\n    if (!earlyRepay) {\\n      // Note: Despite being in the context of a none early repay we prevent underflow in case of wrong user input\\n      // and allow querying expected bonds quantity if loan is repaid at maturity\\n      if (block.timestamp <= pool.state.currentMaturity) {\\n        return pool.state.bondsIssuedQuantity;\\n      }\\n    }\\n    for (\\n      uint128 rate = pool.state.lowerInterestRate;\\n      rate <= pool.parameters.MAX_RATE;\\n      rate += pool.parameters.RATE_SPACING\\n    ) {\\n      Types.Tick storage tick = pool.ticks[rate];\\n      repayValue += getTimeValue(pool, tick.bondsQuantity, rate);\\n    }\\n  }\\n\\n  function getTimeValue(\\n    Types.Pool storage pool,\\n    uint128 bondsQuantity,\\n    uint128 rate\\n  ) public view returns (uint128) {\\n    if (block.timestamp <= pool.state.currentMaturity) {\\n      return bondsQuantity.wadMul(getTickBondPrice(rate, uint128(pool.state.currentMaturity - block.timestamp)));\\n    }\\n    uint256 referenceTimestamp = uint128(block.timestamp);\\n    if (pool.state.defaultTimestamp > 0) {\\n      referenceTimestamp = pool.state.defaultTimestamp;\\n    }\\n    return bondsQuantity.wadDiv(getTickBondPrice(rate, uint128(referenceTimestamp - pool.state.currentMaturity)));\\n  }\\n\\n  /**\\n   * @dev Deposit to a target tick\\n   * Updates tick data\\n   **/\\n  function depositToTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 normalizedAmount\\n  ) public returns (uint128 adjustedAmount, uint128 returnBondsIssuanceIndex) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    pool.collectFees(rate);\\n\\n    // if there is an ongoing loan, the deposited amount goes to the pending\\n    // quantity and will be considered for next loan\\n    if (pool.state.currentMaturity > 0) {\\n      adjustedAmount = normalizedAmount.wadRayDiv(tick.yieldProviderLiquidityRatio);\\n      tick.adjustedPendingAmount += adjustedAmount;\\n      returnBondsIssuanceIndex = pool.state.currentBondsIssuanceIndex + 1;\\n      emit TickLoanDeposit(pool.parameters.OWNER, rate, adjustedAmount);\\n    }\\n    // if there is no ongoing loan, the deposited amount goes to total and remaining\\n    // amount and can be borrowed instantaneously\\n    else {\\n      uint128 atlendisLiquidityRatio = tick.atlendisLiquidityRatio;\\n      (\\\"atlendisLiquidityRatio\\\", atlendisLiquidityRatio);\\n      adjustedAmount = normalizedAmount.wadRayDiv(tick.atlendisLiquidityRatio);\\n      tick.adjustedTotalAmount += adjustedAmount;\\n      tick.adjustedRemainingAmount += adjustedAmount;\\n      returnBondsIssuanceIndex = pool.state.currentBondsIssuanceIndex;\\n      pool.state.normalizedAvailableDeposits += normalizedAmount;\\n\\n      // return amount adapted to bond index\\n      adjustedAmount = adjustedAmount.wadRayDiv(\\n        pool.getBondIssuanceMultiplierForTick(rate, pool.state.currentBondsIssuanceIndex)\\n      );\\n      emit TickNoLoanDeposit(pool.parameters.OWNER, rate, adjustedAmount, tick.atlendisLiquidityRatio);\\n    }\\n    if ((pool.state.lowerInterestRate == 0) || (rate < pool.state.lowerInterestRate)) {\\n      pool.state.lowerInterestRate = rate;\\n    }\\n  }\\n\\n  /**\\n   * @dev Computes the quantity of bonds purchased, and the equivalent adjusted deposit amount used for the issuance\\n   **/\\n  function getBondsIssuanceParametersForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 normalizedRemainingAmount\\n  ) public returns (uint128 bondsPurchasedQuantity, uint128 normalizedUsedAmount) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    if (tick.adjustedRemainingAmount.wadRayMul(tick.atlendisLiquidityRatio) >= normalizedRemainingAmount) {\\n      normalizedUsedAmount = normalizedRemainingAmount;\\n    } else if (\\n      tick.adjustedRemainingAmount.wadRayMul(tick.atlendisLiquidityRatio) + tick.accruedFees >=\\n      normalizedRemainingAmount\\n    ) {\\n      normalizedUsedAmount = normalizedRemainingAmount;\\n      tick.accruedFees -=\\n        normalizedRemainingAmount -\\n        tick.adjustedRemainingAmount.wadRayMul(tick.atlendisLiquidityRatio);\\n    } else {\\n      normalizedUsedAmount = tick.adjustedRemainingAmount.wadRayMul(tick.atlendisLiquidityRatio) + tick.accruedFees;\\n      tick.accruedFees = 0;\\n    }\\n    uint128 bondsPurchasePrice = getTickBondPrice(\\n      rate,\\n      pool.state.currentMaturity == 0\\n        ? pool.parameters.LOAN_DURATION\\n        : pool.state.currentMaturity - uint128(block.timestamp)\\n    );\\n    bondsPurchasedQuantity = normalizedUsedAmount.wadDiv(bondsPurchasePrice);\\n  }\\n\\n  /**\\n   * @dev Makes all the state changes necessary to add bonds to a tick\\n   * Updates tick data and conversion data\\n   **/\\n  function addBondsToTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 bondsIssuedQuantity,\\n    uint128 normalizedUsedAmountForPurchase\\n  ) public {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    // update global state for tick and pool\\n    tick.bondsQuantity += bondsIssuedQuantity;\\n    uint128 adjustedAmountForPurchase = normalizedUsedAmountForPurchase.wadRayDiv(tick.atlendisLiquidityRatio);\\n    if (adjustedAmountForPurchase > tick.adjustedRemainingAmount) {\\n      adjustedAmountForPurchase = tick.adjustedRemainingAmount;\\n    }\\n    tick.adjustedRemainingAmount -= adjustedAmountForPurchase;\\n    tick.normalizedLoanedAmount += normalizedUsedAmountForPurchase;\\n    // emit event with tick updates\\n    uint128 unborrowedRatio = tick.adjustedRemainingAmount.wadDiv(tick.adjustedTotalAmount);\\n    emit TickBorrow(\\n      pool.parameters.OWNER,\\n      rate,\\n      adjustedAmountForPurchase,\\n      normalizedUsedAmountForPurchase,\\n      tick.atlendisLiquidityRatio,\\n      unborrowedRatio\\n    );\\n    pool.state.bondsIssuedQuantity += bondsIssuedQuantity;\\n    pool.state.normalizedAvailableDeposits -= normalizedUsedAmountForPurchase;\\n  }\\n\\n  /**\\n   * @dev Computes how the position is split between deposit and bonds\\n   **/\\n  function computeAmountRepartitionForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 adjustedAmount,\\n    uint128 bondsIssuanceIndex\\n  ) public view returns (uint128 bondsQuantity, uint128 adjustedDepositedAmount) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    if (bondsIssuanceIndex > pool.state.currentBondsIssuanceIndex) {\\n      return (0, adjustedAmount);\\n    }\\n\\n    adjustedAmount = adjustedAmount.wadRayMul(pool.getBondIssuanceMultiplierForTick(rate, bondsIssuanceIndex));\\n    uint128 adjustedAmountUsedForBondsIssuance;\\n    if (tick.adjustedTotalAmount > 0) {\\n      adjustedAmountUsedForBondsIssuance = adjustedAmount\\n        .wadMul(tick.adjustedTotalAmount - tick.adjustedRemainingAmount)\\n        .wadDiv(tick.adjustedTotalAmount + tick.adjustedWithdrawnAmount);\\n    }\\n\\n    if (adjustedAmount >= adjustedAmountUsedForBondsIssuance) {\\n      if (tick.adjustedTotalAmount > tick.adjustedRemainingAmount) {\\n        bondsQuantity = tick.bondsQuantity.wadMul(adjustedAmountUsedForBondsIssuance).wadDiv(\\n          tick.adjustedTotalAmount - tick.adjustedRemainingAmount\\n        );\\n      }\\n      adjustedDepositedAmount = (adjustedAmount - adjustedAmountUsedForBondsIssuance);\\n    } else {\\n      /**\\n       * This condition is obtained when precision problems occur in the computation of `adjustedAmountUsedForBondsIssuance`.\\n       * Such problems have been observed when dealing with amounts way lower than a WAD.\\n       * In this case, the remaining and withdrawn amounts are assumed at 0.\\n       * Therefore, the deposited amount is returned as 0 and the bonds quantity is computed using only the adjusted total amount.\\n       */\\n      bondsQuantity = tick.bondsQuantity.wadMul(adjustedAmount).wadDiv(tick.adjustedTotalAmount);\\n      adjustedDepositedAmount = 0;\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates tick data after a withdrawal consisting of only amount deposited to yield provider\\n   **/\\n  function withdrawDepositedAmountForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 adjustedAmountToWithdraw,\\n    uint128 bondsIssuanceIndex\\n  ) public returns (uint128 normalizedAmountToWithdraw) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    pool.collectFees(rate);\\n\\n    if (bondsIssuanceIndex <= pool.state.currentBondsIssuanceIndex) {\\n      uint128 feesShareToWithdraw = pool.getAccruedFeesShare(rate, adjustedAmountToWithdraw);\\n      tick.accruedFees -= feesShareToWithdraw;\\n      tick.adjustedTotalAmount -= adjustedAmountToWithdraw;\\n      tick.adjustedRemainingAmount -= adjustedAmountToWithdraw;\\n\\n      normalizedAmountToWithdraw =\\n        adjustedAmountToWithdraw.wadRayMul(tick.atlendisLiquidityRatio) +\\n        feesShareToWithdraw;\\n      pool.state.normalizedAvailableDeposits -= normalizedAmountToWithdraw.round();\\n\\n      // register withdrawn amount from partially matched positions\\n      // to maintain the proportion of bonds in each subsequent position the same\\n      if (tick.bondsQuantity > 0) {\\n        tick.adjustedWithdrawnAmount += adjustedAmountToWithdraw;\\n      }\\n      emit TickWithdrawRemaining(\\n        pool.parameters.OWNER,\\n        rate,\\n        adjustedAmountToWithdraw,\\n        tick.atlendisLiquidityRatio,\\n        feesShareToWithdraw\\n      );\\n    } else {\\n      tick.adjustedPendingAmount -= adjustedAmountToWithdraw;\\n      normalizedAmountToWithdraw = adjustedAmountToWithdraw.wadRayMul(tick.yieldProviderLiquidityRatio);\\n      emit TickWithdrawPending(pool.parameters.OWNER, rate, adjustedAmountToWithdraw);\\n    }\\n\\n    // update lowerInterestRate if necessary\\n    if ((rate == pool.state.lowerInterestRate) && tick.adjustedTotalAmount == 0) {\\n      uint128 nextRate = rate + pool.parameters.RATE_SPACING;\\n      while (nextRate <= pool.parameters.MAX_RATE && pool.ticks[nextRate].adjustedTotalAmount == 0) {\\n        nextRate += pool.parameters.RATE_SPACING;\\n      }\\n      if (nextRate >= pool.parameters.MAX_RATE) {\\n        pool.state.lowerInterestRate = 0;\\n      } else {\\n        pool.state.lowerInterestRate = nextRate;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates tick data after a repayment\\n   **/\\n  function repayForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 lateRepayFeePerBond\\n  ) public returns (uint128 normalizedRepayAmountForTick, uint128 lateRepayFeeForTick) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    if (tick.bondsQuantity > 0) {\\n      normalizedRepayAmountForTick = getTimeValue(pool, tick.bondsQuantity, rate);\\n      lateRepayFeeForTick = lateRepayFeePerBond.wadMul(normalizedRepayAmountForTick);\\n      uint128 bondPaidInterests = normalizedRepayAmountForTick - tick.normalizedLoanedAmount;\\n      // update liquidity ratio with interests from bonds, yield provider and liquidity rewards\\n      tick.atlendisLiquidityRatio += (tick.accruedFees + bondPaidInterests + lateRepayFeeForTick)\\n        .wadDiv(tick.adjustedTotalAmount)\\n        .wadToRay();\\n\\n      // update tick amounts\\n      tick.bondsQuantity = 0;\\n      tick.adjustedWithdrawnAmount = 0;\\n      tick.normalizedLoanedAmount = 0;\\n      tick.accruedFees = 0;\\n      tick.adjustedRemainingAmount = tick.adjustedTotalAmount;\\n      emit TickRepay(pool.parameters.OWNER, rate, tick.adjustedTotalAmount, tick.atlendisLiquidityRatio);\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates tick data after a repayment\\n   **/\\n  function includePendingDepositsForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    bool bondsIssuanceIndexAlreadyIncremented\\n  ) internal returns (bool pendingDepositsExist) {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    if (tick.adjustedPendingAmount > 0) {\\n      if (!bondsIssuanceIndexAlreadyIncremented) {\\n        pool.state.currentBondsIssuanceIndex += 1;\\n      }\\n      // include pending deposit amount into tick excluding them from bonds interest from current issuance\\n      tick.bondsIssuanceIndexMultiplier[pool.state.currentBondsIssuanceIndex] = pool\\n        .state\\n        .yieldProviderLiquidityRatio\\n        .rayDiv(tick.atlendisLiquidityRatio);\\n      uint128 adjustedPendingAmount = tick.adjustedPendingAmount.wadRayMul(\\n        tick.bondsIssuanceIndexMultiplier[pool.state.currentBondsIssuanceIndex]\\n      );\\n\\n      // update global pool state\\n      pool.state.normalizedAvailableDeposits += tick.adjustedPendingAmount.wadRayMul(\\n        pool.state.yieldProviderLiquidityRatio\\n      );\\n\\n      // update tick amounts\\n      tick.adjustedTotalAmount += adjustedPendingAmount;\\n      tick.adjustedRemainingAmount = tick.adjustedTotalAmount;\\n      tick.adjustedPendingAmount = 0;\\n      emit TickPendingDeposit(\\n        pool.parameters.OWNER,\\n        rate,\\n        adjustedPendingAmount,\\n        !bondsIssuanceIndexAlreadyIncremented\\n      );\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Top up liquidity rewards for later distribution\\n   **/\\n  function topUpLiquidityRewards(Types.Pool storage pool, uint128 normalizedAmount)\\n    public\\n    returns (uint128 yieldProviderLiquidityRatio)\\n  {\\n    yieldProviderLiquidityRatio = uint128(\\n      pool.parameters.YIELD_PROVIDER.getReserveNormalizedIncome()\\n    );\\n    pool.state.remainingAdjustedLiquidityRewardsReserve += normalizedAmount.wadRayDiv(yieldProviderLiquidityRatio);\\n  }\\n\\n  /**\\n   * @dev Distributes remaining liquidity rewards reserve to lenders\\n   * Called in case of pool default\\n   **/\\n  function distributeLiquidityRewards(Types.Pool storage pool) public returns (uint128 distributedLiquidityRewards) {\\n    uint128 currentInterestRate = pool.state.lowerInterestRate;\\n\\n    uint128 yieldProviderLiquidityRatio = uint128(\\n      pool.parameters.YIELD_PROVIDER.getReserveNormalizedIncome()\\n    );\\n\\n    distributedLiquidityRewards = pool.state.remainingAdjustedLiquidityRewardsReserve.wadRayMul(\\n      yieldProviderLiquidityRatio\\n    );\\n    pool.state.normalizedAvailableDeposits += distributedLiquidityRewards;\\n    pool.state.remainingAdjustedLiquidityRewardsReserve = 0;\\n\\n    while (pool.ticks[currentInterestRate].bondsQuantity > 0 && currentInterestRate <= pool.parameters.MAX_RATE) {\\n      pool.ticks[currentInterestRate].accruedFees += distributedLiquidityRewards\\n        .wadMul(pool.ticks[currentInterestRate].bondsQuantity)\\n        .wadDiv(pool.state.bondsIssuedQuantity);\\n      currentInterestRate += pool.parameters.RATE_SPACING;\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates tick data to reflect all fees accrued since last call\\n   * Accrued fees are composed of the yield provider liquidity ratio increase\\n   * and liquidity rewards paid by the borrower\\n   **/\\n  function collectFeesForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 yieldProviderLiquidityRatio\\n  ) internal {\\n    Types.Tick storage tick = pool.ticks[rate];\\n    (\\\"interestRate\\\", rate);\\n    if (tick.lastFeeDistributionTimestamp < block.timestamp) {\\n      (\\n        uint128 updatedAtlendisLiquidityRatio,\\n        uint128 updatedAccruedFees,\\n        uint128 liquidityRewardsIncrease,\\n        uint128 yieldProviderLiquidityRatioIncrease\\n      ) = pool.peekFeesForTick(rate, yieldProviderLiquidityRatio);\\n      // update global deposited amount\\n      pool.state.remainingAdjustedLiquidityRewardsReserve -= liquidityRewardsIncrease.wadRayDiv(\\n        yieldProviderLiquidityRatio\\n      );\\n      pool.state.normalizedAvailableDeposits +=\\n        liquidityRewardsIncrease +\\n        tick.adjustedRemainingAmount.wadRayMul(yieldProviderLiquidityRatioIncrease);\\n\\n      // update tick data\\n      uint128 accruedFeesIncrease = updatedAccruedFees - tick.accruedFees;\\n      if (tick.atlendisLiquidityRatio == 0) {\\n        tick.yieldProviderLiquidityRatio = yieldProviderLiquidityRatio;\\n        emit TickInitialized(pool.parameters.OWNER, rate, yieldProviderLiquidityRatio);\\n      }\\n      tick.atlendisLiquidityRatio = updatedAtlendisLiquidityRatio;\\n      tick.accruedFees = updatedAccruedFees;\\n\\n      // update checkpoint data\\n      tick.lastFeeDistributionTimestamp = uint128(block.timestamp);\\n\\n      emit CollectFeesForTick(\\n        pool.parameters.OWNER,\\n        rate,\\n        pool.state.remainingAdjustedLiquidityRewardsReserve.wadRayMul(yieldProviderLiquidityRatio),\\n        accruedFeesIncrease\\n      );\\n    }\\n  }\\n\\n  function collectFees(Types.Pool storage pool, uint128 rate) internal {\\n    uint128 yieldProviderLiquidityRatio = uint128(\\n      pool.parameters.YIELD_PROVIDER.getReserveNormalizedIncome()\\n    );\\n    (\\\"0yieldProviderLiquidityRatio\\\", yieldProviderLiquidityRatio);\\n    pool.collectFeesForTick(rate, yieldProviderLiquidityRatio);\\n    pool.ticks[rate].yieldProviderLiquidityRatio = yieldProviderLiquidityRatio;\\n  }\\n\\n  function collectFees(Types.Pool storage pool) internal {\\n    uint128 yieldProviderLiquidityRatio = uint128(\\n      pool.parameters.YIELD_PROVIDER.getReserveNormalizedIncome()\\n    );\\n    (\\\"!! yieldProviderLiquidityRatio\\\", yieldProviderLiquidityRatio);\\n    for (\\n      uint128 currentInterestRate = pool.state.lowerInterestRate;\\n      currentInterestRate <= pool.parameters.MAX_RATE;\\n      currentInterestRate += pool.parameters.RATE_SPACING\\n    ) {\\n      pool.collectFeesForTick(currentInterestRate, yieldProviderLiquidityRatio);\\n    }\\n    pool.state.yieldProviderLiquidityRatio = yieldProviderLiquidityRatio;\\n  }\\n\\n  /**\\n   * @dev Peek updated liquidity ratio and accrued fess for the target tick\\n   * Used to compute a position balance without updating storage\\n   **/\\n  function peekFeesForTick(\\n    Types.Pool storage pool,\\n    uint128 rate,\\n    uint128 yieldProviderLiquidityRatio\\n  )\\n    internal\\n    view\\n    returns (\\n      uint128 updatedAtlendisLiquidityRatio,\\n      uint128 updatedAccruedFees,\\n      uint128 liquidityRewardsIncrease,\\n      uint128 yieldProviderLiquidityRatioIncrease\\n    )\\n  {\\n    Types.Tick storage tick = pool.ticks[rate];\\n\\n    if (tick.atlendisLiquidityRatio == 0) {\\n      return (yieldProviderLiquidityRatio, 0, 0, 0);\\n    }\\n\\n    updatedAtlendisLiquidityRatio = tick.atlendisLiquidityRatio;\\n    updatedAccruedFees = tick.accruedFees;\\n\\n    uint128 referenceLiquidityRatio;\\n    if (pool.state.yieldProviderLiquidityRatio > tick.yieldProviderLiquidityRatio) {\\n      referenceLiquidityRatio = pool.state.yieldProviderLiquidityRatio;\\n    } else {\\n      referenceLiquidityRatio = tick.yieldProviderLiquidityRatio;\\n    }\\n    (\\\"referenceLiquidityRatio\\\", referenceLiquidityRatio);\\n    (\\\"yieldProviderLiquidityRatio\\\", yieldProviderLiquidityRatio);\\n    yieldProviderLiquidityRatioIncrease = yieldProviderLiquidityRatio - referenceLiquidityRatio;\\n\\n    // get additional fees from liquidity rewards\\n    liquidityRewardsIncrease = pool.getLiquidityRewardsIncrease(rate);\\n    uint128 currentNormalizedRemainingLiquidityRewards = pool.state.remainingAdjustedLiquidityRewardsReserve.wadRayMul(\\n      yieldProviderLiquidityRatio\\n    );\\n    if (liquidityRewardsIncrease > currentNormalizedRemainingLiquidityRewards) {\\n      liquidityRewardsIncrease = currentNormalizedRemainingLiquidityRewards;\\n    }\\n    // if no ongoing loan, all deposited amount gets the yield provider\\n    // and liquidity rewards so the global liquidity ratio is updated\\n    if (pool.state.currentMaturity == 0) {\\n      updatedAtlendisLiquidityRatio += yieldProviderLiquidityRatioIncrease;\\n      if (tick.adjustedRemainingAmount > 0) {\\n        updatedAtlendisLiquidityRatio += liquidityRewardsIncrease.wadToRay().wadDiv(tick.adjustedRemainingAmount);\\n      }\\n    }\\n    // if ongoing loan, accruing fees components are added, liquidity ratio will be updated at repay time\\n    else {\\n      updatedAccruedFees +=\\n        tick.adjustedRemainingAmount.wadRayMul(yieldProviderLiquidityRatioIncrease) +\\n        liquidityRewardsIncrease;\\n    }\\n    uint128 yearnLiquidity = pool.state.yieldProviderLiquidityRatio;\\n  }\\n\\n  /**\\n   * @dev Computes liquidity rewards amount to be paid to lenders since last fee collection\\n   * Liquidity rewards are paid to the unborrowed amount, and distributed to all ticks depending\\n   * on their normalized amounts\\n   **/\\n  function getLiquidityRewardsIncrease(Types.Pool storage pool, uint128 rate)\\n    internal\\n    view\\n    returns (uint128 liquidityRewardsIncrease)\\n  {\\n    Types.Tick storage tick = pool.ticks[rate];\\n    if (pool.state.normalizedAvailableDeposits > 0) {\\n      liquidityRewardsIncrease = (pool.parameters.LIQUIDITY_REWARDS_DISTRIBUTION_RATE *\\n        (uint128(block.timestamp) - tick.lastFeeDistributionTimestamp))\\n        .wadMul(pool.parameters.MAX_BORROWABLE_AMOUNT - pool.state.normalizedBorrowedAmount)\\n        .wadDiv(pool.parameters.MAX_BORROWABLE_AMOUNT)\\n        .wadMul(tick.adjustedRemainingAmount.wadRayMul(tick.atlendisLiquidityRatio))\\n        .wadDiv(pool.state.normalizedAvailableDeposits);\\n    }\\n  }\\n\\n  function getTickBondPrice(uint128 rate, uint128 loanDuration) public view returns (uint128 price) {\\n    console.log(\\\"~ loanDuration\\\", loanDuration);\\n    console.log(\\\" rate\\\", rate);\\n    price = uint128(WAD).wadDiv(uint128(WAD + (uint256(rate) * uint256(loanDuration)) / uint256(SECONDS_PER_YEAR)));\\n  }\\n\\n  function depositToYieldProvider(\\n    Types.Pool storage pool,\\n    address from,\\n    uint128 normalizedAmount\\n  ) public {\\n    IERC20Upgradeable underlyingToken = IERC20Upgradeable(pool.parameters.UNDERLYING_TOKEN);\\n    uint128 scaledAmount = normalizedAmount.scaleFromWad(pool.parameters.TOKEN_DECIMALS);\\n    YearnFinanceWrapper yieldProvider = pool.parameters.YIELD_PROVIDER;\\n    underlyingToken.safeIncreaseAllowance(address(yieldProvider), scaledAmount);\\n    underlyingToken.safeTransferFrom(from, address(this), scaledAmount);\\n    yieldProvider.deposit(scaledAmount);\\n  }\\n}\\n\",\"keccak256\":\"0x05775bedf567ac779a9e28aa636fb2b7d4ae82ff2326f2d3b4a2a72f2b128f68\",\"license\":\"AGPL-3.0\"},\"src/lib/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nlibrary Roles {\\n  bytes32 public constant BORROWER_ROLE = keccak256(\\\"BORROWER_ROLE\\\");\\n  bytes32 public constant GOVERNANCE_ROLE = keccak256(\\\"GOVERNANCE_ROLE\\\");\\n  bytes32 public constant POSITION_ROLE = keccak256(\\\"POSITION_ROLE\\\");\\n}\\n\",\"keccak256\":\"0x4d1955fc650d8f3dd0bcfed9b58254a8d0b695a0a40e921626cafe59ab2d2dd0\",\"license\":\"AGPL-3.0\"},\"src/lib/Rounding.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Rounding library\\n * @author Atlendis\\n * @dev Rounding utilities to mitigate precision loss when doing wad ray math operations\\n **/\\nlibrary Rounding {\\n  using Rounding for uint128;\\n\\n  uint128 internal constant PRECISION = 1e3;\\n\\n  /**\\n   * @notice rounds the input number with the default precision\\n   **/\\n  function round(uint128 amount) internal pure returns (uint128) {\\n    return (amount / PRECISION) * PRECISION;\\n  }\\n}\\n\",\"keccak256\":\"0x9fa18d911c29545de2bc2164be48281a91cbb2633aeb1219044c24191fc9e991\",\"license\":\"AGPL-3.0\"},\"src/lib/Scaling.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Scaling library\\n * @author Atlendis\\n * @dev Scale an arbitrary number to or from WAD precision\\n **/\\nlibrary Scaling {\\n  uint256 internal constant WAD = 1e18;\\n\\n  /**\\n   * @notice Scales an input amount to wad precision\\n   **/\\n  function scaleToWad(uint128 a, uint256 precision) internal pure returns (uint128) {\\n    return uint128((uint256(a) * WAD) / 10**precision);\\n  }\\n\\n  /**\\n   * @notice Scales an input amount from wad to target precision\\n   **/\\n  function scaleFromWad(uint128 a, uint256 precision) internal pure returns (uint128) {\\n    return uint128((uint256(a) * 10**precision) / WAD);\\n  }\\n}\\n\",\"keccak256\":\"0x6e71c9cffacb1c38cb7badef347ca94c739b1aa576066963293111adc5d3ecac\",\"license\":\"AGPL-3.0\"},\"src/lib/Types.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"../extensions/YearnFinanceWrapper.sol\\\";\\n\\nlibrary Types {\\n  struct PositionDetails {\\n    uint128 adjustedBalance;\\n    uint128 rate;\\n    address ownerAddress;\\n    address underlyingToken;\\n    uint128 bondsIssuanceIndex;\\n    uint128 remainingBonds;\\n    uint128 bondsMaturity;\\n    uint128 creationTimestamp;\\n  }\\n\\n  struct Tick {\\n    mapping(uint128 => uint128) bondsIssuanceIndexMultiplier;\\n    uint128 bondsQuantity;\\n    uint128 adjustedTotalAmount;\\n    uint128 adjustedRemainingAmount;\\n    uint128 adjustedWithdrawnAmount;\\n    uint128 adjustedPendingAmount;\\n    uint128 normalizedLoanedAmount;\\n    uint128 lastFeeDistributionTimestamp;\\n    uint128 atlendisLiquidityRatio;\\n    uint128 yieldProviderLiquidityRatio;\\n    uint128 accruedFees;\\n  }\\n\\n  struct PoolParameters {\\n    address OWNER;\\n    address UNDERLYING_TOKEN;\\n    uint8 TOKEN_DECIMALS;\\n    YearnFinanceWrapper YIELD_PROVIDER;\\n    uint128 MIN_RATE;\\n    uint128 MAX_RATE;\\n    uint128 RATE_SPACING;\\n    uint128 MAX_BORROWABLE_AMOUNT;\\n    uint128 LOAN_DURATION;\\n    uint128 LIQUIDITY_REWARDS_DISTRIBUTION_RATE;\\n    uint128 COOLDOWN_PERIOD;\\n    uint128 REPAYMENT_PERIOD;\\n    uint128 LATE_REPAY_FEE_PER_BOND_RATE;\\n    uint128 ESTABLISHMENT_FEE_RATE;\\n    uint128 REPAYMENT_FEE_RATE;\\n    uint128 LIQUIDITY_REWARDS_ACTIVATION_THRESHOLD;\\n    bool EARLY_REPAY;\\n  }\\n\\n  struct PoolState {\\n    bool active;\\n    bool defaulted;\\n    bool closed;\\n    uint128 currentMaturity;\\n    uint128 bondsIssuedQuantity;\\n    uint128 normalizedBorrowedAmount;\\n    uint128 normalizedAvailableDeposits;\\n    uint128 lowerInterestRate;\\n    uint128 nextLoanMinStart;\\n    uint128 remainingAdjustedLiquidityRewardsReserve;\\n    uint128 yieldProviderLiquidityRatio;\\n    uint128 currentBondsIssuanceIndex;\\n    uint128 defaultTimestamp;\\n  }\\n\\n  struct Pool {\\n    PoolParameters parameters;\\n    PoolState state;\\n    mapping(uint256 => Tick) ticks;\\n  }\\n}\\n\",\"keccak256\":\"0x761b11e96a37c71408a636d0b9ca30762acf200f8ba0a1247157470b6e9c8714\",\"license\":\"AGPL-3.0\"},\"src/lib/Uint128WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./WadRayMath.sol\\\";\\n\\n/**\\n * @title Uint128WadRayMath library\\n **/\\nlibrary Uint128WadRayMath {\\n  using WadRayMath for uint256;\\n\\n  /**\\n   * @dev Multiplies a wad to a ray, making back and forth conversions\\n   * @param a Wad\\n   * @param b Ray\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadRayMul(uint128 a, uint128 b) internal pure returns (uint128) {\\n    return uint128(uint256(a).wadToRay().rayMul(uint256(b)).rayToWad());\\n  }\\n\\n  /**\\n   * @dev Divides a wad to a ray, making back and forth conversions\\n   * @param a Wad\\n   * @param b Ray\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadRayDiv(uint128 a, uint128 b) internal pure returns (uint128) {\\n    return uint128(uint256(a).wadToRay().rayDiv(uint256(b)).rayToWad());\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint128 a, uint128 b) internal pure returns (uint128) {\\n    return uint128(uint256(a).rayDiv(uint256(b)));\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint128 a, uint128 b) internal pure returns (uint128) {\\n    return uint128(uint256(a).wadMul(uint256(b)));\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint128 a, uint128 b) internal pure returns (uint128) {\\n    return uint128(uint256(a).wadDiv(uint256(b)));\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint128 a) internal pure returns (uint128) {\\n    return uint128(uint256(a).wadToRay());\\n  }\\n}\\n\",\"keccak256\":\"0x16b72e9697bdf075947d8a060f38dad7cf800cf9b84faa9df1fa080b2d7f2078\",\"license\":\"AGPL-3.0\"},\"src/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Errors.sol\\\";\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @return One ray, 1e27\\n   **/\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /**\\n   * @return One wad, 1e18\\n   **/\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e27/2\\n   **/\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e18/2\\n   **/\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    if (a > (type(uint256).max - halfWAD) / b) {\\n      revert Errors.MATH_MULTIPLICATION_OVERFLOW();\\n    }\\n\\n    return (a * b + halfWAD) / WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (b == 0) {\\n      revert Errors.MATH_DIVISION_BY_ZERO();\\n    }\\n    uint256 halfB = b / 2;\\n\\n    if (a > (type(uint256).max - halfB) / WAD) {\\n      revert Errors.MATH_MULTIPLICATION_OVERFLOW();\\n    }\\n\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a*b, in ray\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    if (a > (type(uint256).max - halfRAY) / b) {\\n      revert Errors.MATH_MULTIPLICATION_OVERFLOW();\\n    }\\n\\n    return (a * b + halfRAY) / RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (b == 0) {\\n      revert Errors.MATH_DIVISION_BY_ZERO();\\n    }\\n    uint256 halfB = b / 2;\\n\\n    if (a > (type(uint256).max - halfB) / RAY) {\\n      revert Errors.MATH_MULTIPLICATION_OVERFLOW();\\n    }\\n\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @param a Ray\\n   * @return a casted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n    if (result < halfRatio) {\\n      revert Errors.MATH_ADDITION_OVERFLOW();\\n    }\\n\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n    if (result / WAD_RAY_RATIO != a) {\\n      revert Errors.MATH_MULTIPLICATION_OVERFLOW();\\n    }\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xb9ff60d087061905349f37583ed712f057c165912c9cdbc454e927191774689d\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615f1480620000216000396000f3fe608060405234801561001057600080fd5b506004361061021a5760003560e01c806301ffc9a71461021f5780631ecfa93c1461024757806320992c4414610284578063248a9ca314610299578063265cd720146102ba57806327f90f0a146102da5780632f2ff15d1461035e578063326c62fa14610371578063344415901461039257806336568abe146103a5578063402d8883146103b857806345a4b417146103c0578063473d49721461040d57806347ce376f1461043c5780634c804cca146104845780635c975abb146104975780635d5f3f0e146104a25780635f3386db146104b5578063632805f8146104c8578063673a2a1f146104eb578063775ad527146105005780637e5660d9146105135780637f726e581461052657806387da02061461056257806391d148541461062457806392b06322146106375780639611d5dd1461064a57806399b55762146106525780639c68153e146106655780639d82aa3514610678578063a217fddf1461068b578063a480ca7914610693578063a5919727146106a6578063a6b896fd146106ee578063c3d31fce14610701578063c4d66de814610709578063c55ae0381461071c578063c8954db91461072f578063d547741f14610742578063db2de95214610755578063e06cffa814610768578063e823d5cf1461077b578063ec04205b1461078e578063f00bdd5114610842578063f27dd8ab14610855578063fe04d4c514610868575b600080fd5b61023261022d36600461528a565b610891565b60405190151581526020015b60405180910390f35b61025a6102553660046152e9565b6108c8565b604080516001600160801b039485168152928416602084015292169181019190915260600161023e565b61029761029236600461534b565b610afb565b005b6102ac6102a7366004615396565b610d09565b60405190815260200161023e565b6102cd6102c8366004615396565b610d1e565b60405161023e91906153bc565b6102ed6102e83660046153d0565b610d48565b604080516001600160a01b03909c168c526001600160801b039a8b1660208d0152988a16988b019890985295881660608a0152938716608089015291861660a0880152851660c0870152841660e086015283166101008501528216610120840152166101408201526101600161023e565b61029761036c3660046153ed565b610ed9565b61038461037f36600461541d565b610efa565b60405161023e92919061548e565b61025a6103a03660046154a8565b61117f565b6102976103b33660046153ed565b611430565b6102976114b3565b6103f56103ce3660046153d0565b6001600160a01b0316600090815260ca60205260409020600f01546001600160801b031690565b6040516001600160801b03909116815260200161023e565b61023261041b3660046153d0565b6001600160a01b0316600090815260ca602052604090206009015460ff1690565b6103f561044a3660046154fb565b6001600160a01b0391909116600090815260ca602090815260408083206001600160801b0394851684526010019091529020600401541690565b6103f56104923660046154fb565b611aac565b60975460ff16610232565b6103846104b0366004615529565b611b03565b6103f56104c3366004615585565b611d47565b6104db6104d6366004615529565b611ff4565b60405161023e94939291906155b3565b6104f3612111565b60405161023e91906155de565b61029761050e36600461562b565b612173565b610297610521366004615585565b6122bf565b6103f56105343660046153d0565b6001600160a01b0316600090815260ca60205260409020600a0154630100000090046001600160801b031690565b6105e26105703660046154fb565b6001600160a01b0391909116600090815260ca602090815260408083206001600160801b03948516845260100190915290206001810154600282015460038301546004840154600590940154600160801b80850487169793871696948516959285169492819004831693910490911690565b604080516001600160801b03978816815295871660208701529386169385019390935290841660608401528316608083015290911660a082015260c00161023e565b6102326106323660046153ed565b612379565b6103f5610645366004615649565b6123a4565b610297612639565b610297610660366004615585565b61265c565b610297610673366004615585565b612714565b6103846106863660046153d0565b6127ff565b6102ac600081565b6102976106a13660046153d0565b61298d565b6103846106b43660046153d0565b6001600160a01b0316600090815260ca6020526040902060078101546008909101546001600160801b03600160801b909204821692911690565b6102976106fc366004615585565b6129b6565b610297612a6e565b6102976107173660046153d0565b612a8e565b61029761072a36600461562b565b612c20565b61029761073d3660046156ac565b612d6e565b6102976107503660046153ed565b612f7e565b6102976107633660046154fb565b612f9a565b6102976107763660046154fb565b613573565b6102976107893660046153d0565b61359d565b61082a61079c3660046153d0565b6001600160a01b0316600090815260ca60205260409020600a810154600b820154600c830154600d840154600e9094015460ff80851696610100860482169662010000870490921695630100000090046001600160801b039081169581811695600160801b918290048316958382169591839004841694848316949284900483169383831693920490911690565b60405161023e9c9b9a999897969594939291906156c9565b610297610850366004615765565b613901565b6103f56108633660046153d0565b613e74565b6102cd6108763660046153d0565b60c9602052600090815260409020546001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806108c257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001600160a01b038216600090815260ca6020526040808220905163839a9c2960e01b815260048101919091528215156024820152819081908190737964740c2373760B3FE3a3685D9eDDeDA16880b99063839a9c299060440160206040518083038186803b15801561093a57600080fd5b505af415801561094e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610972919061577e565b6001600160a01b038716600090815260ca6020526040908190209051631d398d8d60e21b8152919250610a2c918391737964740c2373760B3FE3a3685D9eDDeDA16880b9916374e63634916109cd9160040190815260200190565b60206040518083038186803b1580156109e557600080fd5b505af41580156109f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1d919061577e565b6001600160801b031690613eba565b6001600160a01b038716600090815260ca60205260409020909350737964740c2373760B3FE3a3685D9eDDeDA16880b990635ccb5f2f90610a6d86856157b1565b6040518363ffffffff1660e01b8152600401610a8a9291906157dc565b60206040518083038186803b158015610aa257600080fd5b505af4158015610ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ada919061577e565b915082610ae783836157b1565b610af191906157b1565b9350509250925092565b600080516020615e5f833981519152610b1381613ed9565b6001600160a01b038416600090815260ca6020526040812060010154610b4d906001600160801b03861690600160a01b900460ff16613ee3565b6001600160a01b03808716600081815260ca6020526040902054929350911614610b8a57604051630951899960e01b815260040160405180910390fd5b6001600160a01b038516600090815260cc60205260409020546001600160801b039081169082161115610bd057604051639f747ffd60e01b815260040160405180910390fd5b6001600160a01b038516600090815260cc602052604081208054839290610c019084906001600160801b03166157f3565b82546001600160801b039182166101009390930a9283029190920219909116179055506001600160a01b03808616600090815260ca6020526040908190206002810154600191909101549151631a4ca37b60e21b8152908316926369328dec92610c74929116908890889060040161581b565b602060405180830381600087803b158015610c8e57600080fd5b505af1158015610ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc69190615847565b507f4e7e16de98f6ba9d5f9254bd51366fd84453a61f6d5767ffc4b00d97d696c50f858285604051610cfa9392919061581b565b60405180910390a15050505050565b60009081526065602052604090206001015490565b60cb8181548110610d2e57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000806000806000806000806000806000610d896040518060400160405280600f81526020016e706f6f6c20706172616d657465727360881b815250613f15565b6001600160a01b038c16600090815260ca60205260409020610dab6001613f58565b8060010160009054906101000a90046001600160a01b03168160030160009054906101000a90046001600160801b03168260030160109054906101000a90046001600160801b03168360040160009054906101000a90046001600160801b03168460040160109054906101000a90046001600160801b03168560050160009054906101000a90046001600160801b03168660050160109054906101000a90046001600160801b03168760060160009054906101000a90046001600160801b03168860060160109054906101000a90046001600160801b03168960070160009054906101000a90046001600160801b03168a60080160109054906101000a90046001600160801b03169b509b509b509b509b509b509b509b509b509b509b505091939597999b90929496989a50565b610ee282610d09565b610eeb81613ed9565b610ef58383613f9d565b505050565b600080610f05614023565b600080516020615ebf833981519152610f1d81613ed9565b6001600160a01b038716600090815260ca60205260409020600a810154610100900460ff1615610f605760405163056efc7b60e01b815260040160405180910390fd5b600a81015460ff16610f855760405163c6d9b58160e01b815260040160405180910390fd5b60018101546001600160a01b03888116911614610fb55760405163623957d360e01b815260040160405180910390fd5b60038101546001600160801b03908116908a161015610fe75760405163fca6b5cd60e01b815260040160405180910390fd5b60038101546001600160801b03600160801b9091048116908a161115611020576040516393c139e960e01b815260040160405180910390fd5b600481015460038201546001600160801b039182169161104191168b6157f3565b61104b9190615876565b6001600160801b0316156110725760405163270955a760e01b815260040160405180910390fd5b604051631cd2ca1960e11b815260009450849350737964740c2373760B3FE3a3685D9eDDeDA16880b9906339a59432906110b49084908d908a9060040161589c565b604080518083038186803b1580156110cb57600080fd5b505af41580156110df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110391906158bb565b604051636839a26160e01b81529195509350737964740c2373760B3FE3a3685D9eDDeDA16880b990636839a261906111439084908a908a906004016158ea565b60006040518083038186803b15801561115b57600080fd5b505af415801561116f573d6000803e3d6000fd5b5050505050509550959350505050565b600080600061118c614023565b600080516020615ebf8339815191526111a481613ed9565b6001600160a01b038816600090815260ca60205260409020600a81015462010000900460ff16156111e85760405163056efc7b60e01b815260040160405180910390fd5b60006111f68a8a8d8a611b03565b5090506001600160801b0381161561122157604051630d290b7960e31b815260040160405180910390fd5b60038201546001600160801b0390811690891610156112535760405163fca6b5cd60e01b815260040160405180910390fd5b60038201546001600160801b03600160801b9091048116908916111561128c576040516393c139e960e01b815260040160405180910390fd5b600482015460038301546001600160801b03918216916112ad91168a6157f3565b6112b79190615876565b6001600160801b0316156112de5760405163270955a760e01b815260040160405180910390fd5b60006112fe6112ee848c8b61406b565b6001600160801b038e16906140b6565b604051636ef48f5760e01b8152909150737964740c2373760B3FE3a3685D9eDDeDA16880b990636ef48f579061133e9086908e9086908e90600401615912565b60206040518083038186803b15801561135657600080fd5b505af415801561136a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138e919061577e565b604051631cd2ca1960e11b8152909550737964740c2373760B3FE3a3685D9eDDeDA16880b9906339a59432906113cc9086908d908a9060040161589c565b604080518083038186803b1580156113e357600080fd5b505af41580156113f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141b91906158bb565b909d909c50949a509398505050505050505050565b6001600160a01b03811633146114a55760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6114af82826140e5565b5050565b6114bb614023565b600080516020615e7f8339815191526114d381613ed9565b33600090815260ca60205260409020600a810154630100000090046001600160801b03161580156115145750600a81015460ff610100909104161515600114155b1561153257604051631e13931b60e21b815260040160405180910390fd5b600a8101544263010000009091046001600160801b03161180801561155c5750600982015460ff16155b1561157a57604051632b604eef60e01b815260040160405180910390fd5b6115838261414c565b604051631d398d8d60e21b815260048101839052600090819081908190737964740c2373760B3FE3a3685D9eDDeDA16880b9906374e636349060240160206040518083038186803b1580156115d757600080fd5b505af41580156115eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160f919061577e565b600c870154909150600160801b90046001600160801b03165b60038701546001600160801b03600160801b90910481169082161161173c57604051634de6e91560e01b81526000908190737964740c2373760B3FE3a3685D9eDDeDA16880b990634de6e91590611687908c908790899060040161589c565b604080518083038186803b15801561169e57600080fd5b505af41580156116b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d691906158bb565b90925090506116e581836157b1565b6116ef90866157b1565b94506116fb81886157b1565b9650600061170a8a8589614253565b905080806117155750865b60048b015490975061173593506001600160801b031691508390506157b1565b9050611628565b50604051635ccb5f2f60e01b8152600090737964740c2373760B3FE3a3685D9eDDeDA16880b990635ccb5f2f90611779908a9087906004016157dc565b60206040518083038186803b15801561179157600080fd5b505af41580156117a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c9919061577e565b90506117d581846157b1565b604051636839a26160e01b8152909350737964740c2373760B3FE3a3685D9eDDeDA16880b990636839a26190611813908a90339088906004016158ea565b60006040518083038186803b15801561182b57600080fd5b505af415801561183f573d6000803e3d6000fd5b505050600688015461185b91506001600160801b0316426157b1565b600d880180546001600160801b039283166001600160801b031991821617909155600b89018054909116905533600090815260cc60205260408120805484939192916118a9918591166157b1565b92506101000a8154816001600160801b0302191690836001600160801b031602179055508287600a0160020160008282829054906101000a90046001600160801b03166118f691906157b1565b82546101009290920a6001600160801b038181021990931691831602179091556006890154600a8a015461193e9350600160801b9091048216916301000000909104166157b1565b6001600160801b03164211156119be57600c870154600d880154604080516001600160801b038088168252808a16602083015280861692820192909252928116606084015216608082015233907f8122edb1a4917454f85f9b09704f29ed2116612cc8f1a2554b80097dceeb5a839060a0015b60405180910390a2611a7e565b600a8701544263010000009091046001600160801b03161115611a2857600c870154600d88015460405133927fc6db71f000708261529893214115dc775666bfdeffe2ae11b7fe243ee0353e5d926119b192889287926001600160801b03918216929116906155b3565b600c870154600d88015460405133927f85aff561fe55576b612fb98de2b2b1b5f64d13c985973d75b6cc4a09376155f192611a7592889287926001600160801b03918216929116906155b3565b60405180910390a25b505050600a840180546301000000600160981b0319169055505050600b0180546001600160801b0316905550565b6001600160a01b038216600090815260ca602090815260408083206001600160801b038086168552601090910190925290912060040154600160801b900416806108c25750676765c793fa10079d601b1b92915050565b6001600160a01b03808516600090815260ca60209081526040808320600281015482516325b0985360e21b81529251949586959294869492909116926396c2614c926004808201939291829003018186803b158015611b6157600080fd5b505afa158015611b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b999190615847565b600e8301549091506001600160801b03600160801b90910481169086161115611bdc576000611bd16001600160801b038816836140b6565b935093505050611d3e565b604051633d29c20960e01b8152600090737964740c2373760B3FE3a3685D9eDDeDA16880b990633d29c20990611c1c9086908c908c908c90600401615912565b604080518083038186803b158015611c3357600080fd5b505af4158015611c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6b91906158bb565b9095509050600080611c7e858b866144a1565b5050604051632ca9e11360e11b81529193509150600090737964740c2373760B3FE3a3685D9eDDeDA16880b990635953c22690611cc59089908f9089908890600401615912565b60206040518083038186803b158015611cdd57600080fd5b505af4158015611cf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d15919061577e565b905080611d2b6001600160801b038616856140b6565b611d3591906157b1565b96505050505050505b94509492505050565b6001600160a01b038116600090815260ca60205260408120600a8101548190630100000090046001600160801b0316151580611d8c5750600a820154610100900460ff165b80611da15750600a82015462010000900460ff165b80611db15750600a82015460ff16155b15611dc1576000925050506108c2565b60048201546001600160801b03600160801b90910481169086161115611df9576004820154600160801b90046001600160801b031694505b6002810154604080516325b0985360e21b815290516000926001600160a01b0316916396c2614c916004808301926020929190829003018186803b158015611e4057600080fd5b505afa158015611e54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e789190615847565b60038401549091506001600160801b03168660005b60048501546003860154611eb4916001600160801b0390811691600160801b9004166157b1565b6001600160801b0316836001600160801b031614611fa1576000611ed98785876144a1565b5050506001600160801b03808616600090815260108a01602052604081206002015492935091611f0a9116836140b6565b9050836001600160801b0316816001600160801b03161015611f5657611f3081856157f3565b9350611f456001600160801b03821686613eba565b611f4f90846157b1565b9250611f80565b611f696001600160801b03851686613eba565b611f7390846157b1565b9250600093505050611fa1565b50506004850154611f9a906001600160801b0316846157b1565b9250611e8d565b816001600160801b0316896001600160801b03161415611fca57600096505050505050506108c2565b611fe7611fd7838b6157f3565b6001600160801b0383169061465b565b9998505050505050505050565b6001600160a01b038416600090815260ca60205260408120600a8101548291829182919060ff166120385760405163c6d9b58160e01b815260040160405180910390fd5b604051633d29c20960e01b8152737964740c2373760B3FE3a3685D9eDDeDA16880b990633d29c209906120759084908c908c908c90600401615912565b604080518083038186803b15801561208c57600080fd5b505af41580156120a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c491906158bb565b955092506120e66120d6828a8961406b565b6001600160801b03871690614673565b935080600a0160000160039054906101000a90046001600160801b0316915050945094509450949050565b606060cb80548060200260200160405190810160405280929190818152602001828054801561216957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161214b575b5050505050905090565b600080516020615e5f83398151915261218b81613ed9565b6001600160a01b0382166121b257604051635342e0a760e11b815260040160405180910390fd5b6001600160a01b0383166121d95760405163f15e745f60e01b815260040160405180910390fd5b6001600160a01b03808316600081815260ca60205260409020549091161461221457604051630951899960e01b815260040160405180910390fd5b6001600160a01b03808316600090815260ca602052604090205484821691161461225157604051637e1c4b1160e11b815260040160405180910390fd5b6001600160a01b03838116600090815260c960205260409081902080546001600160a01b03191692851692909217909155517fa0bdc0fbc09f4ed7d0e01a12537839d8bd60334a4bfa65f0053c2d6972b4c984906122b29085908590615939565b60405180910390a1505050565b600080516020615e5f8339815191526122d781613ed9565b6001600160a01b038216600090815260ca60205260409020600a015460ff1661231357604051630951899960e01b815260040160405180910390fd5b6001600160a01b038216600090815260ca60205260409081902060080180546001600160801b0319166001600160801b038616179055517ff81f6b13c0f245c7eb66e6de718d94a737f90b621fc61e666430cdcba6cf847c906122b29085908590615953565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006123ae614023565b600080516020615ebf8339815191526123c681613ed9565b6001600160a01b038716600090815260ca60205260409020600e8101546123fe90600160801b90046001600160801b031660016157b1565b6001600160801b0316856001600160801b031611156124305760405163019894df60e21b815260040160405180910390fd5b600e8101546001600160801b03600160801b90910481169086161180158161247657506001600160801b0380891660009081526010840160205260409020600201541615155b806124a757508080156124a757506001600160801b0380891660009081526010840160205260409020600301541615155b6124c45760405163436ec62560e01b815260040160405180910390fd5b6000876001600160801b0316116124ee57604051636ba603b360e11b815260040160405180910390fd5b604051636ef48f5760e01b8152737964740c2373760B3FE3a3685D9eDDeDA16880b990636ef48f579061252b9085908c908c908c90600401615912565b60206040518083038186803b15801561254357600080fd5b505af4158015612557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257b919061577e565b600283015460018401549195506001600160a01b03908116916369328dec918116906125bb906001600160801b03891690600160a01b900460ff1661469d565b886040518463ffffffff1660e01b81526004016125da9392919061581b565b602060405180830381600087803b1580156125f457600080fd5b505af1158015612608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262c9190615847565b5050505095945050505050565b600080516020615e5f83398151915261265181613ed9565b6126596146c6565b50565b600080516020615e5f83398151915261267481613ed9565b6001600160a01b03808316600081815260ca6020526040902054909116146126af57604051630951899960e01b815260040160405180910390fd5b6001600160a01b038216600090815260ca60205260409081902060050180546001600160801b03808716600160801b029116179055517f67c55291cb70b5f0144aae4118b87e726866a80bda106e58e132aa625551f857906122b29085908590615953565b600080516020615e5f83398151915261272c81613ed9565b6001600160a01b038216600090815260ca60205260409020600a015460ff1661276857604051630951899960e01b815260040160405180910390fd5b670de0b6b3a7640000836001600160801b0316111561279a57604051633dedb6cb60e21b815260040160405180910390fd5b6001600160a01b038216600090815260ca60205260409081902060070180546001600160801b03808716600160801b029116179055517fefec478f5ee0b516cbe859014d4830648217ffb71b235c17f0015a12a4de224b906122b29085908590615953565b6001600160a01b038116600090815260ca60205260408120600a8101548291908190630100000090046001600160801b031661285b57600482015461285490600160801b90046001600160801b031686611d47565b9350612986565b600381015460009081906001600160801b03165b60048401546003850154612896916001600160801b0390811691600160801b9004166157b1565b6001600160801b0316816001600160801b03161461296d576001600160801b0380821660009081526010870160205260409020600301546128e091600160801b9091041682613eba565b6128ea90846157b1565b6001600160801b03808316600090815260108801602052604090206003015491945061291e91600160801b900416836157b1565b6001600160801b03808316600090815260108801602052604090206003015491935061294b9116876157b1565b6004850154909650612966906001600160801b0316826157b1565b905061286f565b6129806001600160801b0384168361465b565b96505050505b5050915091565b612995614023565b6001600160a01b038116600090815260ca602052604090206114af8161414c565b600080516020615e5f8339815191526129ce81613ed9565b6001600160a01b03808316600081815260ca602052604090205490911614612a0957604051630951899960e01b815260040160405180910390fd5b6001600160a01b038216600090815260ca60205260409081902060040180546001600160801b03808716600160801b029116179055517f1451569f54a4226b25194b628ff0b7be59bf83e6d5f74b486b88d45d7d80d9b4906122b29085908590615953565b600080516020615e5f833981519152612a8681613ed9565b612659614712565b600054610100900460ff1615808015612aae5750600054600160ff909116105b80612ac85750303b158015612ac8575060005460ff166001145b612b2b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161149c565b6000805460ff191660011790558015612b4e576000805461ff0019166101001790555b612b5661474f565b6001600160a01b038216612b68573391505b612b73600083613f9d565b612b8b600080516020615e5f83398151915283613f9d565b612bb1600080516020615e7f833981519152600080516020615e5f833981519152614786565b612bd7600080516020615ebf833981519152600080516020615e5f833981519152614786565b80156114af576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600080516020615e5f833981519152612c3881613ed9565b6001600160a01b038216612c5f57604051635342e0a760e11b815260040160405180910390fd5b6001600160a01b038316612c865760405163f15e745f60e01b815260040160405180910390fd5b6001600160a01b03808316600081815260ca602052604090205490911614612cc157604051630951899960e01b815260040160405180910390fd5b6001600160a01b03808316600090815260ca6020526040902054848216911614612cfe57604051637e1c4b1160e11b815260040160405180910390fd5b612d16600080516020615e7f83398151915284612f7e565b6001600160a01b038316600090815260c960205260409081902080546001600160a01b0319169055517f02e49619408521be07696ec96b8ec59295aca0b168326260f1a22059631e2cdf906122b29085908590615939565b612d76614023565b600080516020615e7f833981519152612d8e81613ed9565b33600090815260ca602052604081206001810154909190612dc3906001600160801b03861690600160a01b900460ff16613ee3565b604051636839a26160e01b8152909150737964740c2373760B3FE3a3685D9eDDeDA16880b990636839a26190612e01908590339086906004016158ea565b60006040518083038186803b158015612e1957600080fd5b505af4158015612e2d573d6000803e3d6000fd5b5050604051631a727b1960e31b815260009250737964740c2373760B3FE3a3685D9eDDeDA16880b9915063d393d8c890612e6d90869086906004016157dc565b60206040518083038186803b158015612e8557600080fd5b505af4158015612e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ebd919061577e565b600a84015490915060ff16158015612f0657506008830154600d8401546001600160801b03600160801b92839004811692612efa920416836140b6565b6001600160801b031610155b15612f4d57600a8301805460ff191660011790558254604051600080516020615e9f83398151915291612f44916001600160a01b03909116906153bc565b60405180910390a15b7f55f3f2d2c632a076fddf6794d5cf693ea328d5223bd13d099d4a4bc5005f4a8f3383604051610cfa929190615975565b612f8782610d09565b612f9081613ed9565b610ef583836140e5565b612fa2614023565b33600090815260c960209081526040808320546001600160a01b0316835260ca9091529020600a810154610100900460ff1615612ff25760405163056efc7b60e01b815260040160405180910390fd5b600a810154630100000090046001600160801b0316158015906130285750600a810154630100000090046001600160801b031642115b1561304657604051630fda546f60e41b815260040160405180910390fd5b600181015460009061306c906001600160801b03851690600160a01b900460ff16613ee3565b6007830154909150600090613094906001600160801b0380851691600160801b900416613eba565b905060006130a282846157f3565b6004850154600b8601549192506001600160801b03600160801b918290048116926130d19287929104166157b1565b6001600160801b031611156130f95760405163aab4fe5160e01b815260040160405180910390fd5b600d8401546001600160801b03164210156131275760405163af26604960e01b815260040160405180910390fd5b6131308461414c565b600c8401546001600160801b0390811690841681101561316357604051634421566d60e11b815260040160405180910390fd5b6004850154600c860154859160009161318f916001600160801b0390811691600160801b9004166157f3565b90505b6000826001600160801b03161180156131c2575060038701546001600160801b03600160801b9091048116908216105b1561331e5760048701546131df906001600160801b0316826157b1565b6001600160801b03808216600090815260108a016020526040902060020154919250161561331957604051634c5e028760e11b81526000908190737964740c2373760B3FE3a3685D9eDDeDA16880b9906398bc050e90613247908c908790899060040161589c565b604080518083038186803b15801561325e57600080fd5b505af4158015613272573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329691906158bb565b60405163ca8701f360e01b81529193509150737964740c2373760B3FE3a3685D9eDDeDA16880b99063ca8701f3906132d8908c90879087908790600401615912565b60006040518083038186803b1580156132f057600080fd5b505af4158015613304573d6000803e3d6000fd5b50505050808461331491906157f3565b935050505b613192565b6001600160801b0382161561334657604051630f0b666f60e01b815260040160405180910390fd5b600a870154630100000090046001600160801b03166133e5576005870154613377906001600160801b031642615997565b600a880180546001600160801b03929092166301000000026301000000600160981b031990921691909117905560405133907fb238c9bb6ccde03fef7caa4e124c6dff77f0a5b70c7df429eb8f37bd3a48f8ba906133d8908790899061548e565b60405180910390a2613429565b336001600160a01b03167faad6575ebfd3574ba48d8611bd3c09b1e51c4ff7ca6980f6eacac7b7ac367315858760405161342092919061548e565b60405180910390a25b33600090815260cc6020526040812080548792906134519084906001600160801b03166157b1565b92506101000a8154816001600160801b0302191690836001600160801b031602179055508587600a0160010160108282829054906101000a90046001600160801b031661349e91906157b1565b82546101009290920a6001600160801b03818102199093169183160217909155600289015460018a01546001600160a01b0391821693506369328dec92918116916134f69190891690600160a01b900460ff1661469d565b8c6040518463ffffffff1660e01b81526004016135159392919061581b565b602060405180830381600087803b15801561352f57600080fd5b505af1158015613543573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135679190615847565b50505050505050505050565b61357b614023565b6001600160a01b038216600090815260ca60205260409020610ef581836147d9565b600080516020615e5f8339815191526135b581613ed9565b6001600160a01b038216600090815260ca60205260409020600a810154610100900460ff16156135f7576040516209157360e41b815260040160405180910390fd5b600a810154630100000090046001600160801b031661362957604051633aa99c9b60e01b815260040160405180910390fd5b6006810154600a820154613657916001600160801b03600160801b90910481169163010000009004166157b1565b6001600160801b031642101561368057604051632b797db960e11b815260040160405180910390fd5b600a8101805461010061ff0019909116179055600f810180546001600160801b031916426001600160801b0316179055604051631d8e67b960e31b815260048101829052600090737964740c2373760B3FE3a3685D9eDDeDA16880b99063ec733dc89060240160206040518083038186803b1580156136fe57600080fd5b505af4158015613712573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613736919061577e565b600d830154909150600090600160801b90046001600160801b0316156138d0576002830154604080516325b0985360e21b815290516000926001600160a01b0316916396c2614c916004808301926020929190829003018186803b15801561379d57600080fd5b505afa1580156137b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137d59190615847565b600d8501549091506137f790600160801b90046001600160801b0316826140b6565b600d850180546001600160801b0390811690915560028601546001600160a01b03898116600090815260ca6020526040902060019081015490890154949650918116936369328dec93929091169161385c9190871690600160a01b900460ff1661469d565b336040518463ffffffff1660e01b815260040161387b9392919061581b565b602060405180830381600087803b15801561389557600080fd5b505af11580156138a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138cd9190615847565b50505b7f846077ed9bc731d4a55621c64a72a5dcdb1c047b3de22f546d448b992e34d87b8583604051610cfa929190615975565b61390a8161489c565b604051806102200160405280336001600160a01b0316815260200182602001602081019061393891906153d0565b6001600160a01b0316815260200182602001602081019061395991906153d0565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561399157600080fd5b505afa1580156139a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139c991906159af565b60ff1681526020016139e160608401604085016153d0565b6001600160a01b031681526020016139ff60808401606085016156ac565b6001600160801b03168152602001613a1d60a08401608085016156ac565b6001600160801b03168152602001613a3b60c0840160a085016156ac565b6001600160801b03168152602001613a5960e0840160c085016156ac565b6001600160801b03168152602001613a78610100840160e085016156ac565b6001600160801b03168152602001613a98610120840161010085016156ac565b6001600160801b03168152602001613ab8610140840161012085016156ac565b6001600160801b03168152602001613ad8610160840161014085016156ac565b6001600160801b03168152602001613af8610180840161016085016156ac565b6001600160801b03168152602001613b186101a0840161018085016156ac565b6001600160801b03168152602001613b386101c084016101a085016156ac565b6001600160801b03168152602001613b586101e084016101c085016156ac565b6001600160801b03168152602001613b7861020084016101e085016159d2565b1515905233600090815260ca6020908152604091829020835181546001600160a01b03199081166001600160a01b0392831617835592850151600183018054878701519284166001600160a81b031990911617600160a01b60ff90931692909202919091179055606080860151600284018054909516921691909117909255608084015160a08501516001600160801b03918216600160801b918316820217600384015560c086015160e08701519083169083168202176004840155610100860151610120870151908316908316820217600584015561014086015161016087015190831690831682021760068401556101808601516101a087015190831690831682021760078401556101c08601516101e0870151908316921602176008820155610200909301516009909301805460ff191693151593909317909255613cc49183019083016153d0565b6001600160a01b03166396c2614c6040518163ffffffff1660e01b815260040160206040518083038186803b158015613cfc57600080fd5b505afa158015613d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d349190615847565b33600081815260ca60209081526040808320600e0180546001600160801b0319166001600160801b03969096169590951790945560c9905282812080546001600160a01b0319908116841790915560cb805460018101825592527fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb90910180549091169091179055517fa77a23a7d9735be89f9068c8700c055a4e28b9199f9370c5f761b436e5ee010390613dea9083906159ed565b60405180910390a133600090815260ca6020526040902060080154600160801b90046001600160801b03166126595733600090815260ca602052604090819020600a8101805460ff19166001179055549051600080516020615e9f83398151915291613e62916001600160a01b0391909116906153bc565b60405180910390a16126596003613f58565b6001600160a01b038116600090815260ca602090815260408083206001015460cc9092528220546108c2916001600160801b0390911690600160a01b900460ff1661469d565b6000613ed26001600160801b0384811690841661499f565b9392505050565b6126598133614a2a565b6000613ef082600a615c7d565b613f0b670de0b6b3a76400006001600160801b038616615c89565b613ed29190615ca8565b61265981604051602401613f299190615ce8565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052614a8e565b61265981604051602401613f6e91815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f82c50f160e01b179052614a8e565b613fa78282612379565b6114af5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055613fdf3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60975460ff16156140695760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161149c565b565b6001600160801b03808316600090815260108501602090815260408083208585168452918290529091205490911690816140ae57676765c793fa10079d601b1b91505b509392505050565b6000613ed26140e0836001600160801b03166140da866001600160801b0316614aaf565b90614aee565b614b6b565b6140ef8282612379565b156114af5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6002810154604080516325b0985360e21b815290516000926001600160a01b0316916396c2614c916004808301926020929190829003018186803b15801561419357600080fd5b505afa1580156141a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141cb9190615847565b600c830154909150600160801b90046001600160801b03165b60038301546001600160801b03600160801b90910481169082161161422d5761420e838284614bc4565b6004830154614226906001600160801b0316826157b1565b90506141e4565b50600e9190910180546001600160801b0319166001600160801b03909216919091179055565b6001600160801b0380831660009081526010850160205260408120600381015491929091161561449657826142cf57600e85018054600191906010906142aa908490600160801b90046001600160801b03166157b1565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b6004810154600e8601546142f7916001600160801b0391821691600160801b90910416614e2e565b600e86018054600160801b908190046001600160801b0390811660009081526020869052604080822080546001600160801b0319169684169690961790955592549190910481168252918120546003840154919261435892811691166140b6565b600e870154600384015491925061437b916001600160801b0390811691166140b6565b600c870180546000906143989084906001600160801b03166157b1565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550808260010160108282829054906101000a90046001600160801b03166143e291906157b1565b82546101009290920a6001600160801b038181021990931691831602179091556001840154600285018054600160801b90920483166001600160801b031992831617905560038501805490911690558754604080516001600160a01b039092168252888316602083015291841691810191909152851560608201527fd56b2e5a640a6b5979db99e9a69997e0e14f83b4edabdfce985a1f7be59647c7915060800160405180910390a1600192505050613ed2565b506000949350505050565b6001600160801b0380831660009081526010850160205260408120600481015491928392839283929091600160801b9004166144eb57856000806000945094509450945050614652565b60048101546005820154600e8a01546001600160801b03600160801b938490048116985092820483169650600092918216911611156145385750600e8801546001600160801b0316614548565b5060058101546001600160801b03165b61455281886157f3565b925061455e8989614e46565b600d8a015490945060009061458390600160801b90046001600160801b0316896140b6565b9050806001600160801b0316856001600160801b031611156145a3578094505b600a8a0154630100000090046001600160801b031661461d576145c684886157b1565b60028401549097506001600160801b03161561461857600283015461460b906001600160801b03908116906145fc908816614f1c565b6001600160801b03169061465b565b61461590886157b1565b96505b61464e565b60028301548590614637906001600160801b0316866140b6565b61464191906157b1565b61464b90876157b1565b95505b5050505b93509350935093565b6000613ed26001600160801b03848116908416614f30565b6000613ed26140e0836001600160801b0316614697866001600160801b0316614aaf565b90614fc5565b6000670de0b6b3a76400006146b383600a615c7d565b613f0b906001600160801b038616615c89565b6146ce61504c565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405161470891906153bc565b60405180910390a1565b61471a614023565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586146fb3390565b600054610100900460ff166147765760405162461bcd60e51b815260040161149c90615d1b565b61477e615095565b6140696150bc565b600061479183610d09565b600084815260656020526040808220600101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6002820154604080516325b0985360e21b815290516000926001600160a01b0316916396c2614c916004808301926020929190829003018186803b15801561482057600080fd5b505afa158015614834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148589190615847565b9050614865838383614bc4565b6001600160801b039182166000908152601090930160205260409092206005018054919092166001600160801b0319909116179055565b6148ac60c0820160a083016156ac565b6148bc60808301606084016156ac565b6148cc60a08401608085016156ac565b6148d691906157f3565b6148e09190615876565b6001600160801b031615614907576040516334cc2fed60e01b815260040160405180910390fd5b3361492557604051635342e0a760e11b815260040160405180910390fd5b33600090815260ca60205260409020546001600160a01b03161561495c57604051631953bac160e11b815260040160405180910390fd5b670de0b6b3a76400006149776101a0830161018084016156ac565b6001600160801b0316111561265957604051633dedb6cb60e21b815260040160405180910390fd5b60008215806149ac575081155b156149b9575060006108c2565b816149cd6002670de0b6b3a7640000615ca8565b6149d990600019615d66565b6149e39190615ca8565b831115614a025760405162a748d160e21b815260040160405180910390fd5b670de0b6b3a7640000614a16600282615ca8565b614a208486615c89565b613f0b9190615997565b614a348282612379565b6114af57614a4c816001600160a01b031660146150ef565b614a578360206150ef565b604051602001614a68929190615d7d565b60408051601f198184030181529082905262461bcd60e51b825261149c91600401615ce8565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600080614ac0633b9aca0084615c89565b905082614ad1633b9aca0083615ca8565b146108c25760405162a748d160e21b815260040160405180910390fd5b6000821580614afb575081155b15614b08575060006108c2565b81614b1f6002676765c793fa10079d601b1b615ca8565b614b2b90600019615d66565b614b359190615ca8565b831115614b545760405162a748d160e21b815260040160405180910390fd5b676765c793fa10079d601b1b614a16600282615ca8565b600080614b7d6002633b9aca00615ca8565b90506000614b8b8483615997565b905081811015614bae576040516307af724160e11b815260040160405180910390fd5b614bbc633b9aca0082615ca8565b949350505050565b6001600160801b0380831660009081526010850160205260409020600481015490914291161015614e28576000808080614bff8888886144a1565b92965090945092509050614c1c6001600160801b03831687614673565b600d89018054601090614c40908490600160801b90046001600160801b03166157f3565b82546101009290920a6001600160801b038181021990931691831602179091556002870154614c71925016826140b6565b614c7b90836157b1565b600c89018054600090614c989084906001600160801b03166157b1565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555060008560050160109054906101000a90046001600160801b031684614ce191906157f3565b6004870154909150600160801b90046001600160801b0316614d6b576005860180546001600160801b0319166001600160801b038981169182179092558a54604080516001600160a01b039092168252928b166020820152918201527f6f0af1abcf1ba2094b30510b922c357e153645953c99cedcd9c731cf49c0e4919060600160405180910390a15b6005860180546001600160801b03908116600160801b8783168102919091179092556001600160801b03198782168302164282161760048901558a54600d8c01547f22f7e29f1509fbd47f3e61026d7920c0dd79fd86b88861a8e5f0f7d130a584e3936001600160a01b03909216928c92614de89204168b6140b6565b604080516001600160a01b0390941684526001600160801b039283166020850152908216908301528316606082015260800160405180910390a150505050505b50505050565b6000613ed26001600160801b03848116908416614fc5565b6001600160801b0380821660009081526010840160205260408120600c850154919290911615614f1557600c84015460048201546002830154614f12926001600160801b03908116926145fc92614ea89290811691600160801b9004166140b6565b6004880154600b890154610a1d916001600160801b03600160801b918290048116926145fc92614edb92910416836157f3565b6004890154614ef3906001600160801b0316426157f3565b60058d0154610a1d9190600160801b90046001600160801b0316615dec565b91505b5092915050565b60006108c2826001600160801b0316614aaf565b600081614f50576040516308693c7b60e31b815260040160405180910390fd5b6000614f5d600284615ca8565b9050670de0b6b3a7640000614f7482600019615d66565b614f7e9190615ca8565b841115614f9d5760405162a748d160e21b815260040160405180910390fd5b8281614fb1670de0b6b3a764000087615c89565b614fbb9190615997565b614f129190615ca8565b600081614fe5576040516308693c7b60e31b815260040160405180910390fd5b6000614ff2600284615ca8565b9050676765c793fa10079d601b1b61500c82600019615d66565b6150169190615ca8565b8411156150355760405162a748d160e21b815260040160405180910390fd5b8281614fb1676765c793fa10079d601b1b87615c89565b60975460ff166140695760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161149c565b600054610100900460ff166140695760405162461bcd60e51b815260040161149c90615d1b565b600054610100900460ff166150e35760405162461bcd60e51b815260040161149c90615d1b565b6097805460ff19169055565b606060006150fe836002615c89565b615109906002615997565b6001600160401b0381111561512057615120615e1b565b6040519080825280601f01601f19166020018201604052801561514a576020820181803683370190505b509050600360fc1b8160008151811061516557615165615e31565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061519457615194615e31565b60200101906001600160f81b031916908160001a90535060006151b8846002615c89565b6151c3906001615997565b90505b600181111561523b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106151f7576151f7615e31565b1a60f81b82828151811061520d5761520d615e31565b60200101906001600160f81b031916908160001a90535060049490941c9361523481615e47565b90506151c6565b508315613ed25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161149c565b60006020828403121561529c57600080fd5b81356001600160e01b031981168114613ed257600080fd5b6001600160a01b038116811461265957600080fd5b80356152d4816152b4565b919050565b803580151581146152d457600080fd5b600080604083850312156152fc57600080fd5b8235615307816152b4565b9150615315602084016152d9565b90509250929050565b6001600160801b03169052565b6001600160801b038116811461265957600080fd5b80356152d48161532b565b60008060006060848603121561536057600080fd5b833561536b816152b4565b9250602084013561537b8161532b565b9150604084013561538b816152b4565b809150509250925092565b6000602082840312156153a857600080fd5b5035919050565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b6000602082840312156153e257600080fd5b8135613ed2816152b4565b6000806040838503121561540057600080fd5b823591506020830135615412816152b4565b809150509250929050565b600080600080600060a0868803121561543557600080fd5b85356154408161532b565b94506020860135615450816152b4565b93506040860135615460816152b4565b92506060860135615470816152b4565b915060808601356154808161532b565b809150509295509295909350565b6001600160801b0392831681529116602082015260400190565b600080600080600060a086880312156154c057600080fd5b85356154cb8161532b565b945060208601356154db816152b4565b935060408601356154eb8161532b565b925060608601356154708161532b565b6000806040838503121561550e57600080fd5b8235615519816152b4565b915060208301356154128161532b565b6000806000806080858703121561553f57600080fd5b843561554a816152b4565b9350602085013561555a8161532b565b9250604085013561556a8161532b565b9150606085013561557a8161532b565b939692955090935050565b6000806040838503121561559857600080fd5b82356155a38161532b565b91506020830135615412816152b4565b6001600160801b03948516815292841660208401529083166040830152909116606082015260800190565b6020808252825182820181905260009190848201906040850190845b8181101561561f5783516001600160a01b0316835292840192918401916001016155fa565b50909695505050505050565b6000806040838503121561563e57600080fd5b82356155a3816152b4565b600080600080600060a0868803121561566157600080fd5b853561566c816152b4565b9450602086013561567c8161532b565b9350604086013561568c8161532b565b9250606086013561569c8161532b565b91506080860135615480816152b4565b6000602082840312156156be57600080fd5b8135613ed28161532b565b8c151581528b151560208201528a151560408201526001600160801b038a811660608301528981166080830152881660a0820152610180810161570f60c083018961531e565b61571c60e083018861531e565b61572a61010083018761531e565b61573861012083018661531e565b61574661014083018561531e565b61575461016083018461531e565b9d9c50505050505050505050505050565b6000610200828403121561577857600080fd5b50919050565b60006020828403121561579057600080fd5b8151613ed28161532b565b634e487b7160e01b600052601160045260246000fd5b60006001600160801b038281168482168083038211156157d3576157d361579b565b01949350505050565b9182526001600160801b0316602082015260400190565b60006001600160801b03838116908316818110156158135761581361579b565b039392505050565b6001600160a01b0393841681526001600160801b03929092166020830152909116604082015260600190565b60006020828403121561585957600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b60006001600160801b038381168061589057615890615860565b92169190910692915050565b9283526001600160801b03918216602084015216604082015260600190565b600080604083850312156158ce57600080fd5b82516158d98161532b565b60208401519092506154128161532b565b9283526001600160a01b039190911660208301526001600160801b0316604082015260600190565b9384526001600160801b039283166020850152908216604084015216606082015260800190565b6001600160a01b0392831681529116602082015260400190565b6001600160801b039290921682526001600160a01b0316602082015260400190565b6001600160a01b039290921682526001600160801b0316602082015260400190565b600082198211156159aa576159aa61579b565b500190565b6000602082840312156159c157600080fd5b815160ff81168114613ed257600080fd5b6000602082840312156159e457600080fd5b613ed2826152d9565b6102008101615a04826159ff856152c9565b6153af565b615a10602084016152c9565b615a1d60208401826153af565b50615a2a604084016152c9565b615a3760408401826153af565b50615a4460608401615340565b615a51606084018261531e565b50615a5e60808401615340565b615a6b608084018261531e565b50615a7860a08401615340565b615a8560a084018261531e565b50615a9260c08401615340565b615a9f60c084018261531e565b50615aac60e08401615340565b615ab960e084018261531e565b50610100615ac8818501615340565b615ad48285018261531e565b5050610120615ae4818501615340565b615af08285018261531e565b5050610140615b00818501615340565b615b0c8285018261531e565b5050610160615b1c818501615340565b615b288285018261531e565b5050610180615b38818501615340565b615b448285018261531e565b50506101a0615b54818501615340565b615b608285018261531e565b50506101c0615b70818501615340565b615b7c8285018261531e565b50506101e0615b8c8185016152d9565b1515920191909152919050565b600181815b80851115615bd4578160001904821115615bba57615bba61579b565b80851615615bc757918102915b93841c9390800290615b9e565b509250929050565b600082615beb575060016108c2565b81615bf8575060006108c2565b8160018114615c0e5760028114615c1857615c34565b60019150506108c2565b60ff841115615c2957615c2961579b565b50506001821b6108c2565b5060208310610133831016604e8410600b8410161715615c57575081810a6108c2565b615c618383615b99565b8060001904821115615c7557615c7561579b565b029392505050565b6000613ed28383615bdc565b6000816000190483118215151615615ca357615ca361579b565b500290565b600082615cb757615cb7615860565b500490565b60005b83811015615cd7578181015183820152602001615cbf565b83811115614e285750506000910152565b6020815260008251806020840152615d07816040850160208701615cbc565b601f01601f19169190910160400192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082821015615d7857615d7861579b565b500390565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351615daf816017850160208801615cbc565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615de0816028840160208801615cbc565b01602801949350505050565b60006001600160801b0382811684821681151582840482111615615e1257615e1261579b565b02949350505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081615e5657615e5661579b565b50600019019056fe71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb12344277e405079ec07749d374ba0b5862a4e45a6a05ac889dbb4a991c6f9354d5f1a2aad6c8125c39041f4e0e90bc4516abd322bec644d29276f7acc4b183ffe27160668f6d81898b09bdae61c61d2c7d23fe33a52ae9b38e5b92f00ced3806ba2646970667358221220fa410dc4d7d124b992ed95a3b0eef99f67f7da6d5b7a7e8e4e525448080fef6c64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021a5760003560e01c806301ffc9a71461021f5780631ecfa93c1461024757806320992c4414610284578063248a9ca314610299578063265cd720146102ba57806327f90f0a146102da5780632f2ff15d1461035e578063326c62fa14610371578063344415901461039257806336568abe146103a5578063402d8883146103b857806345a4b417146103c0578063473d49721461040d57806347ce376f1461043c5780634c804cca146104845780635c975abb146104975780635d5f3f0e146104a25780635f3386db146104b5578063632805f8146104c8578063673a2a1f146104eb578063775ad527146105005780637e5660d9146105135780637f726e581461052657806387da02061461056257806391d148541461062457806392b06322146106375780639611d5dd1461064a57806399b55762146106525780639c68153e146106655780639d82aa3514610678578063a217fddf1461068b578063a480ca7914610693578063a5919727146106a6578063a6b896fd146106ee578063c3d31fce14610701578063c4d66de814610709578063c55ae0381461071c578063c8954db91461072f578063d547741f14610742578063db2de95214610755578063e06cffa814610768578063e823d5cf1461077b578063ec04205b1461078e578063f00bdd5114610842578063f27dd8ab14610855578063fe04d4c514610868575b600080fd5b61023261022d36600461528a565b610891565b60405190151581526020015b60405180910390f35b61025a6102553660046152e9565b6108c8565b604080516001600160801b039485168152928416602084015292169181019190915260600161023e565b61029761029236600461534b565b610afb565b005b6102ac6102a7366004615396565b610d09565b60405190815260200161023e565b6102cd6102c8366004615396565b610d1e565b60405161023e91906153bc565b6102ed6102e83660046153d0565b610d48565b604080516001600160a01b03909c168c526001600160801b039a8b1660208d0152988a16988b019890985295881660608a0152938716608089015291861660a0880152851660c0870152841660e086015283166101008501528216610120840152166101408201526101600161023e565b61029761036c3660046153ed565b610ed9565b61038461037f36600461541d565b610efa565b60405161023e92919061548e565b61025a6103a03660046154a8565b61117f565b6102976103b33660046153ed565b611430565b6102976114b3565b6103f56103ce3660046153d0565b6001600160a01b0316600090815260ca60205260409020600f01546001600160801b031690565b6040516001600160801b03909116815260200161023e565b61023261041b3660046153d0565b6001600160a01b0316600090815260ca602052604090206009015460ff1690565b6103f561044a3660046154fb565b6001600160a01b0391909116600090815260ca602090815260408083206001600160801b0394851684526010019091529020600401541690565b6103f56104923660046154fb565b611aac565b60975460ff16610232565b6103846104b0366004615529565b611b03565b6103f56104c3366004615585565b611d47565b6104db6104d6366004615529565b611ff4565b60405161023e94939291906155b3565b6104f3612111565b60405161023e91906155de565b61029761050e36600461562b565b612173565b610297610521366004615585565b6122bf565b6103f56105343660046153d0565b6001600160a01b0316600090815260ca60205260409020600a0154630100000090046001600160801b031690565b6105e26105703660046154fb565b6001600160a01b0391909116600090815260ca602090815260408083206001600160801b03948516845260100190915290206001810154600282015460038301546004840154600590940154600160801b80850487169793871696948516959285169492819004831693910490911690565b604080516001600160801b03978816815295871660208701529386169385019390935290841660608401528316608083015290911660a082015260c00161023e565b6102326106323660046153ed565b612379565b6103f5610645366004615649565b6123a4565b610297612639565b610297610660366004615585565b61265c565b610297610673366004615585565b612714565b6103846106863660046153d0565b6127ff565b6102ac600081565b6102976106a13660046153d0565b61298d565b6103846106b43660046153d0565b6001600160a01b0316600090815260ca6020526040902060078101546008909101546001600160801b03600160801b909204821692911690565b6102976106fc366004615585565b6129b6565b610297612a6e565b6102976107173660046153d0565b612a8e565b61029761072a36600461562b565b612c20565b61029761073d3660046156ac565b612d6e565b6102976107503660046153ed565b612f7e565b6102976107633660046154fb565b612f9a565b6102976107763660046154fb565b613573565b6102976107893660046153d0565b61359d565b61082a61079c3660046153d0565b6001600160a01b0316600090815260ca60205260409020600a810154600b820154600c830154600d840154600e9094015460ff80851696610100860482169662010000870490921695630100000090046001600160801b039081169581811695600160801b918290048316958382169591839004841694848316949284900483169383831693920490911690565b60405161023e9c9b9a999897969594939291906156c9565b610297610850366004615765565b613901565b6103f56108633660046153d0565b613e74565b6102cd6108763660046153d0565b60c9602052600090815260409020546001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806108c257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001600160a01b038216600090815260ca6020526040808220905163839a9c2960e01b81526004810191909152821515602482015281908190819073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__9063839a9c299060440160206040518083038186803b15801561093a57600080fd5b505af415801561094e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610972919061577e565b6001600160a01b038716600090815260ca6020526040908190209051631d398d8d60e21b8152919250610a2c91839173__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__916374e63634916109cd9160040190815260200190565b60206040518083038186803b1580156109e557600080fd5b505af41580156109f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1d919061577e565b6001600160801b031690613eba565b6001600160a01b038716600090815260ca6020526040902090935073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90635ccb5f2f90610a6d86856157b1565b6040518363ffffffff1660e01b8152600401610a8a9291906157dc565b60206040518083038186803b158015610aa257600080fd5b505af4158015610ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ada919061577e565b915082610ae783836157b1565b610af191906157b1565b9350509250925092565b600080516020615e5f833981519152610b1381613ed9565b6001600160a01b038416600090815260ca6020526040812060010154610b4d906001600160801b03861690600160a01b900460ff16613ee3565b6001600160a01b03808716600081815260ca6020526040902054929350911614610b8a57604051630951899960e01b815260040160405180910390fd5b6001600160a01b038516600090815260cc60205260409020546001600160801b039081169082161115610bd057604051639f747ffd60e01b815260040160405180910390fd5b6001600160a01b038516600090815260cc602052604081208054839290610c019084906001600160801b03166157f3565b82546001600160801b039182166101009390930a9283029190920219909116179055506001600160a01b03808616600090815260ca6020526040908190206002810154600191909101549151631a4ca37b60e21b8152908316926369328dec92610c74929116908890889060040161581b565b602060405180830381600087803b158015610c8e57600080fd5b505af1158015610ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc69190615847565b507f4e7e16de98f6ba9d5f9254bd51366fd84453a61f6d5767ffc4b00d97d696c50f858285604051610cfa9392919061581b565b60405180910390a15050505050565b60009081526065602052604090206001015490565b60cb8181548110610d2e57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000806000806000806000806000806000610d896040518060400160405280600f81526020016e706f6f6c20706172616d657465727360881b815250613f15565b6001600160a01b038c16600090815260ca60205260409020610dab6001613f58565b8060010160009054906101000a90046001600160a01b03168160030160009054906101000a90046001600160801b03168260030160109054906101000a90046001600160801b03168360040160009054906101000a90046001600160801b03168460040160109054906101000a90046001600160801b03168560050160009054906101000a90046001600160801b03168660050160109054906101000a90046001600160801b03168760060160009054906101000a90046001600160801b03168860060160109054906101000a90046001600160801b03168960070160009054906101000a90046001600160801b03168a60080160109054906101000a90046001600160801b03169b509b509b509b509b509b509b509b509b509b509b505091939597999b90929496989a50565b610ee282610d09565b610eeb81613ed9565b610ef58383613f9d565b505050565b600080610f05614023565b600080516020615ebf833981519152610f1d81613ed9565b6001600160a01b038716600090815260ca60205260409020600a810154610100900460ff1615610f605760405163056efc7b60e01b815260040160405180910390fd5b600a81015460ff16610f855760405163c6d9b58160e01b815260040160405180910390fd5b60018101546001600160a01b03888116911614610fb55760405163623957d360e01b815260040160405180910390fd5b60038101546001600160801b03908116908a161015610fe75760405163fca6b5cd60e01b815260040160405180910390fd5b60038101546001600160801b03600160801b9091048116908a161115611020576040516393c139e960e01b815260040160405180910390fd5b600481015460038201546001600160801b039182169161104191168b6157f3565b61104b9190615876565b6001600160801b0316156110725760405163270955a760e01b815260040160405180910390fd5b604051631cd2ca1960e11b81526000945084935073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__906339a59432906110b49084908d908a9060040161589c565b604080518083038186803b1580156110cb57600080fd5b505af41580156110df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110391906158bb565b604051636839a26160e01b8152919550935073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90636839a261906111439084908a908a906004016158ea565b60006040518083038186803b15801561115b57600080fd5b505af415801561116f573d6000803e3d6000fd5b5050505050509550959350505050565b600080600061118c614023565b600080516020615ebf8339815191526111a481613ed9565b6001600160a01b038816600090815260ca60205260409020600a81015462010000900460ff16156111e85760405163056efc7b60e01b815260040160405180910390fd5b60006111f68a8a8d8a611b03565b5090506001600160801b0381161561122157604051630d290b7960e31b815260040160405180910390fd5b60038201546001600160801b0390811690891610156112535760405163fca6b5cd60e01b815260040160405180910390fd5b60038201546001600160801b03600160801b9091048116908916111561128c576040516393c139e960e01b815260040160405180910390fd5b600482015460038301546001600160801b03918216916112ad91168a6157f3565b6112b79190615876565b6001600160801b0316156112de5760405163270955a760e01b815260040160405180910390fd5b60006112fe6112ee848c8b61406b565b6001600160801b038e16906140b6565b604051636ef48f5760e01b815290915073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90636ef48f579061133e9086908e9086908e90600401615912565b60206040518083038186803b15801561135657600080fd5b505af415801561136a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138e919061577e565b604051631cd2ca1960e11b815290955073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__906339a59432906113cc9086908d908a9060040161589c565b604080518083038186803b1580156113e357600080fd5b505af41580156113f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141b91906158bb565b909d909c50949a509398505050505050505050565b6001600160a01b03811633146114a55760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6114af82826140e5565b5050565b6114bb614023565b600080516020615e7f8339815191526114d381613ed9565b33600090815260ca60205260409020600a810154630100000090046001600160801b03161580156115145750600a81015460ff610100909104161515600114155b1561153257604051631e13931b60e21b815260040160405180910390fd5b600a8101544263010000009091046001600160801b03161180801561155c5750600982015460ff16155b1561157a57604051632b604eef60e01b815260040160405180910390fd5b6115838261414c565b604051631d398d8d60e21b81526004810183905260009081908190819073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__906374e636349060240160206040518083038186803b1580156115d757600080fd5b505af41580156115eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160f919061577e565b600c870154909150600160801b90046001600160801b03165b60038701546001600160801b03600160801b90910481169082161161173c57604051634de6e91560e01b8152600090819073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90634de6e91590611687908c908790899060040161589c565b604080518083038186803b15801561169e57600080fd5b505af41580156116b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d691906158bb565b90925090506116e581836157b1565b6116ef90866157b1565b94506116fb81886157b1565b9650600061170a8a8589614253565b905080806117155750865b60048b015490975061173593506001600160801b031691508390506157b1565b9050611628565b50604051635ccb5f2f60e01b815260009073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90635ccb5f2f90611779908a9087906004016157dc565b60206040518083038186803b15801561179157600080fd5b505af41580156117a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c9919061577e565b90506117d581846157b1565b604051636839a26160e01b815290935073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90636839a26190611813908a90339088906004016158ea565b60006040518083038186803b15801561182b57600080fd5b505af415801561183f573d6000803e3d6000fd5b505050600688015461185b91506001600160801b0316426157b1565b600d880180546001600160801b039283166001600160801b031991821617909155600b89018054909116905533600090815260cc60205260408120805484939192916118a9918591166157b1565b92506101000a8154816001600160801b0302191690836001600160801b031602179055508287600a0160020160008282829054906101000a90046001600160801b03166118f691906157b1565b82546101009290920a6001600160801b038181021990931691831602179091556006890154600a8a015461193e9350600160801b9091048216916301000000909104166157b1565b6001600160801b03164211156119be57600c870154600d880154604080516001600160801b038088168252808a16602083015280861692820192909252928116606084015216608082015233907f8122edb1a4917454f85f9b09704f29ed2116612cc8f1a2554b80097dceeb5a839060a0015b60405180910390a2611a7e565b600a8701544263010000009091046001600160801b03161115611a2857600c870154600d88015460405133927fc6db71f000708261529893214115dc775666bfdeffe2ae11b7fe243ee0353e5d926119b192889287926001600160801b03918216929116906155b3565b600c870154600d88015460405133927f85aff561fe55576b612fb98de2b2b1b5f64d13c985973d75b6cc4a09376155f192611a7592889287926001600160801b03918216929116906155b3565b60405180910390a25b505050600a840180546301000000600160981b0319169055505050600b0180546001600160801b0316905550565b6001600160a01b038216600090815260ca602090815260408083206001600160801b038086168552601090910190925290912060040154600160801b900416806108c25750676765c793fa10079d601b1b92915050565b6001600160a01b03808516600090815260ca60209081526040808320600281015482516325b0985360e21b81529251949586959294869492909116926396c2614c926004808201939291829003018186803b158015611b6157600080fd5b505afa158015611b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b999190615847565b600e8301549091506001600160801b03600160801b90910481169086161115611bdc576000611bd16001600160801b038816836140b6565b935093505050611d3e565b604051633d29c20960e01b815260009073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90633d29c20990611c1c9086908c908c908c90600401615912565b604080518083038186803b158015611c3357600080fd5b505af4158015611c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6b91906158bb565b9095509050600080611c7e858b866144a1565b5050604051632ca9e11360e11b8152919350915060009073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90635953c22690611cc59089908f9089908890600401615912565b60206040518083038186803b158015611cdd57600080fd5b505af4158015611cf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d15919061577e565b905080611d2b6001600160801b038616856140b6565b611d3591906157b1565b96505050505050505b94509492505050565b6001600160a01b038116600090815260ca60205260408120600a8101548190630100000090046001600160801b0316151580611d8c5750600a820154610100900460ff165b80611da15750600a82015462010000900460ff165b80611db15750600a82015460ff16155b15611dc1576000925050506108c2565b60048201546001600160801b03600160801b90910481169086161115611df9576004820154600160801b90046001600160801b031694505b6002810154604080516325b0985360e21b815290516000926001600160a01b0316916396c2614c916004808301926020929190829003018186803b158015611e4057600080fd5b505afa158015611e54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e789190615847565b60038401549091506001600160801b03168660005b60048501546003860154611eb4916001600160801b0390811691600160801b9004166157b1565b6001600160801b0316836001600160801b031614611fa1576000611ed98785876144a1565b5050506001600160801b03808616600090815260108a01602052604081206002015492935091611f0a9116836140b6565b9050836001600160801b0316816001600160801b03161015611f5657611f3081856157f3565b9350611f456001600160801b03821686613eba565b611f4f90846157b1565b9250611f80565b611f696001600160801b03851686613eba565b611f7390846157b1565b9250600093505050611fa1565b50506004850154611f9a906001600160801b0316846157b1565b9250611e8d565b816001600160801b0316896001600160801b03161415611fca57600096505050505050506108c2565b611fe7611fd7838b6157f3565b6001600160801b0383169061465b565b9998505050505050505050565b6001600160a01b038416600090815260ca60205260408120600a8101548291829182919060ff166120385760405163c6d9b58160e01b815260040160405180910390fd5b604051633d29c20960e01b815273__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90633d29c209906120759084908c908c908c90600401615912565b604080518083038186803b15801561208c57600080fd5b505af41580156120a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c491906158bb565b955092506120e66120d6828a8961406b565b6001600160801b03871690614673565b935080600a0160000160039054906101000a90046001600160801b0316915050945094509450949050565b606060cb80548060200260200160405190810160405280929190818152602001828054801561216957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161214b575b5050505050905090565b600080516020615e5f83398151915261218b81613ed9565b6001600160a01b0382166121b257604051635342e0a760e11b815260040160405180910390fd5b6001600160a01b0383166121d95760405163f15e745f60e01b815260040160405180910390fd5b6001600160a01b03808316600081815260ca60205260409020549091161461221457604051630951899960e01b815260040160405180910390fd5b6001600160a01b03808316600090815260ca602052604090205484821691161461225157604051637e1c4b1160e11b815260040160405180910390fd5b6001600160a01b03838116600090815260c960205260409081902080546001600160a01b03191692851692909217909155517fa0bdc0fbc09f4ed7d0e01a12537839d8bd60334a4bfa65f0053c2d6972b4c984906122b29085908590615939565b60405180910390a1505050565b600080516020615e5f8339815191526122d781613ed9565b6001600160a01b038216600090815260ca60205260409020600a015460ff1661231357604051630951899960e01b815260040160405180910390fd5b6001600160a01b038216600090815260ca60205260409081902060080180546001600160801b0319166001600160801b038616179055517ff81f6b13c0f245c7eb66e6de718d94a737f90b621fc61e666430cdcba6cf847c906122b29085908590615953565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006123ae614023565b600080516020615ebf8339815191526123c681613ed9565b6001600160a01b038716600090815260ca60205260409020600e8101546123fe90600160801b90046001600160801b031660016157b1565b6001600160801b0316856001600160801b031611156124305760405163019894df60e21b815260040160405180910390fd5b600e8101546001600160801b03600160801b90910481169086161180158161247657506001600160801b0380891660009081526010840160205260409020600201541615155b806124a757508080156124a757506001600160801b0380891660009081526010840160205260409020600301541615155b6124c45760405163436ec62560e01b815260040160405180910390fd5b6000876001600160801b0316116124ee57604051636ba603b360e11b815260040160405180910390fd5b604051636ef48f5760e01b815273__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90636ef48f579061252b9085908c908c908c90600401615912565b60206040518083038186803b15801561254357600080fd5b505af4158015612557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257b919061577e565b600283015460018401549195506001600160a01b03908116916369328dec918116906125bb906001600160801b03891690600160a01b900460ff1661469d565b886040518463ffffffff1660e01b81526004016125da9392919061581b565b602060405180830381600087803b1580156125f457600080fd5b505af1158015612608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262c9190615847565b5050505095945050505050565b600080516020615e5f83398151915261265181613ed9565b6126596146c6565b50565b600080516020615e5f83398151915261267481613ed9565b6001600160a01b03808316600081815260ca6020526040902054909116146126af57604051630951899960e01b815260040160405180910390fd5b6001600160a01b038216600090815260ca60205260409081902060050180546001600160801b03808716600160801b029116179055517f67c55291cb70b5f0144aae4118b87e726866a80bda106e58e132aa625551f857906122b29085908590615953565b600080516020615e5f83398151915261272c81613ed9565b6001600160a01b038216600090815260ca60205260409020600a015460ff1661276857604051630951899960e01b815260040160405180910390fd5b670de0b6b3a7640000836001600160801b0316111561279a57604051633dedb6cb60e21b815260040160405180910390fd5b6001600160a01b038216600090815260ca60205260409081902060070180546001600160801b03808716600160801b029116179055517fefec478f5ee0b516cbe859014d4830648217ffb71b235c17f0015a12a4de224b906122b29085908590615953565b6001600160a01b038116600090815260ca60205260408120600a8101548291908190630100000090046001600160801b031661285b57600482015461285490600160801b90046001600160801b031686611d47565b9350612986565b600381015460009081906001600160801b03165b60048401546003850154612896916001600160801b0390811691600160801b9004166157b1565b6001600160801b0316816001600160801b03161461296d576001600160801b0380821660009081526010870160205260409020600301546128e091600160801b9091041682613eba565b6128ea90846157b1565b6001600160801b03808316600090815260108801602052604090206003015491945061291e91600160801b900416836157b1565b6001600160801b03808316600090815260108801602052604090206003015491935061294b9116876157b1565b6004850154909650612966906001600160801b0316826157b1565b905061286f565b6129806001600160801b0384168361465b565b96505050505b5050915091565b612995614023565b6001600160a01b038116600090815260ca602052604090206114af8161414c565b600080516020615e5f8339815191526129ce81613ed9565b6001600160a01b03808316600081815260ca602052604090205490911614612a0957604051630951899960e01b815260040160405180910390fd5b6001600160a01b038216600090815260ca60205260409081902060040180546001600160801b03808716600160801b029116179055517f1451569f54a4226b25194b628ff0b7be59bf83e6d5f74b486b88d45d7d80d9b4906122b29085908590615953565b600080516020615e5f833981519152612a8681613ed9565b612659614712565b600054610100900460ff1615808015612aae5750600054600160ff909116105b80612ac85750303b158015612ac8575060005460ff166001145b612b2b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161149c565b6000805460ff191660011790558015612b4e576000805461ff0019166101001790555b612b5661474f565b6001600160a01b038216612b68573391505b612b73600083613f9d565b612b8b600080516020615e5f83398151915283613f9d565b612bb1600080516020615e7f833981519152600080516020615e5f833981519152614786565b612bd7600080516020615ebf833981519152600080516020615e5f833981519152614786565b80156114af576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600080516020615e5f833981519152612c3881613ed9565b6001600160a01b038216612c5f57604051635342e0a760e11b815260040160405180910390fd5b6001600160a01b038316612c865760405163f15e745f60e01b815260040160405180910390fd5b6001600160a01b03808316600081815260ca602052604090205490911614612cc157604051630951899960e01b815260040160405180910390fd5b6001600160a01b03808316600090815260ca6020526040902054848216911614612cfe57604051637e1c4b1160e11b815260040160405180910390fd5b612d16600080516020615e7f83398151915284612f7e565b6001600160a01b038316600090815260c960205260409081902080546001600160a01b0319169055517f02e49619408521be07696ec96b8ec59295aca0b168326260f1a22059631e2cdf906122b29085908590615939565b612d76614023565b600080516020615e7f833981519152612d8e81613ed9565b33600090815260ca602052604081206001810154909190612dc3906001600160801b03861690600160a01b900460ff16613ee3565b604051636839a26160e01b815290915073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__90636839a26190612e01908590339086906004016158ea565b60006040518083038186803b158015612e1957600080fd5b505af4158015612e2d573d6000803e3d6000fd5b5050604051631a727b1960e31b81526000925073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__915063d393d8c890612e6d90869086906004016157dc565b60206040518083038186803b158015612e8557600080fd5b505af4158015612e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ebd919061577e565b600a84015490915060ff16158015612f0657506008830154600d8401546001600160801b03600160801b92839004811692612efa920416836140b6565b6001600160801b031610155b15612f4d57600a8301805460ff191660011790558254604051600080516020615e9f83398151915291612f44916001600160a01b03909116906153bc565b60405180910390a15b7f55f3f2d2c632a076fddf6794d5cf693ea328d5223bd13d099d4a4bc5005f4a8f3383604051610cfa929190615975565b612f8782610d09565b612f9081613ed9565b610ef583836140e5565b612fa2614023565b33600090815260c960209081526040808320546001600160a01b0316835260ca9091529020600a810154610100900460ff1615612ff25760405163056efc7b60e01b815260040160405180910390fd5b600a810154630100000090046001600160801b0316158015906130285750600a810154630100000090046001600160801b031642115b1561304657604051630fda546f60e41b815260040160405180910390fd5b600181015460009061306c906001600160801b03851690600160a01b900460ff16613ee3565b6007830154909150600090613094906001600160801b0380851691600160801b900416613eba565b905060006130a282846157f3565b6004850154600b8601549192506001600160801b03600160801b918290048116926130d19287929104166157b1565b6001600160801b031611156130f95760405163aab4fe5160e01b815260040160405180910390fd5b600d8401546001600160801b03164210156131275760405163af26604960e01b815260040160405180910390fd5b6131308461414c565b600c8401546001600160801b0390811690841681101561316357604051634421566d60e11b815260040160405180910390fd5b6004850154600c860154859160009161318f916001600160801b0390811691600160801b9004166157f3565b90505b6000826001600160801b03161180156131c2575060038701546001600160801b03600160801b9091048116908216105b1561331e5760048701546131df906001600160801b0316826157b1565b6001600160801b03808216600090815260108a016020526040902060020154919250161561331957604051634c5e028760e11b8152600090819073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__906398bc050e90613247908c908790899060040161589c565b604080518083038186803b15801561325e57600080fd5b505af4158015613272573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329691906158bb565b60405163ca8701f360e01b8152919350915073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__9063ca8701f3906132d8908c90879087908790600401615912565b60006040518083038186803b1580156132f057600080fd5b505af4158015613304573d6000803e3d6000fd5b50505050808461331491906157f3565b935050505b613192565b6001600160801b0382161561334657604051630f0b666f60e01b815260040160405180910390fd5b600a870154630100000090046001600160801b03166133e5576005870154613377906001600160801b031642615997565b600a880180546001600160801b03929092166301000000026301000000600160981b031990921691909117905560405133907fb238c9bb6ccde03fef7caa4e124c6dff77f0a5b70c7df429eb8f37bd3a48f8ba906133d8908790899061548e565b60405180910390a2613429565b336001600160a01b03167faad6575ebfd3574ba48d8611bd3c09b1e51c4ff7ca6980f6eacac7b7ac367315858760405161342092919061548e565b60405180910390a25b33600090815260cc6020526040812080548792906134519084906001600160801b03166157b1565b92506101000a8154816001600160801b0302191690836001600160801b031602179055508587600a0160010160108282829054906101000a90046001600160801b031661349e91906157b1565b82546101009290920a6001600160801b03818102199093169183160217909155600289015460018a01546001600160a01b0391821693506369328dec92918116916134f69190891690600160a01b900460ff1661469d565b8c6040518463ffffffff1660e01b81526004016135159392919061581b565b602060405180830381600087803b15801561352f57600080fd5b505af1158015613543573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135679190615847565b50505050505050505050565b61357b614023565b6001600160a01b038216600090815260ca60205260409020610ef581836147d9565b600080516020615e5f8339815191526135b581613ed9565b6001600160a01b038216600090815260ca60205260409020600a810154610100900460ff16156135f7576040516209157360e41b815260040160405180910390fd5b600a810154630100000090046001600160801b031661362957604051633aa99c9b60e01b815260040160405180910390fd5b6006810154600a820154613657916001600160801b03600160801b90910481169163010000009004166157b1565b6001600160801b031642101561368057604051632b797db960e11b815260040160405180910390fd5b600a8101805461010061ff0019909116179055600f810180546001600160801b031916426001600160801b0316179055604051631d8e67b960e31b81526004810182905260009073__$ca2bba44fde77ee89f0ecd8cad9e71ea90$__9063ec733dc89060240160206040518083038186803b1580156136fe57600080fd5b505af4158015613712573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613736919061577e565b600d830154909150600090600160801b90046001600160801b0316156138d0576002830154604080516325b0985360e21b815290516000926001600160a01b0316916396c2614c916004808301926020929190829003018186803b15801561379d57600080fd5b505afa1580156137b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137d59190615847565b600d8501549091506137f790600160801b90046001600160801b0316826140b6565b600d850180546001600160801b0390811690915560028601546001600160a01b03898116600090815260ca6020526040902060019081015490890154949650918116936369328dec93929091169161385c9190871690600160a01b900460ff1661469d565b336040518463ffffffff1660e01b815260040161387b9392919061581b565b602060405180830381600087803b15801561389557600080fd5b505af11580156138a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138cd9190615847565b50505b7f846077ed9bc731d4a55621c64a72a5dcdb1c047b3de22f546d448b992e34d87b8583604051610cfa929190615975565b61390a8161489c565b604051806102200160405280336001600160a01b0316815260200182602001602081019061393891906153d0565b6001600160a01b0316815260200182602001602081019061395991906153d0565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561399157600080fd5b505afa1580156139a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139c991906159af565b60ff1681526020016139e160608401604085016153d0565b6001600160a01b031681526020016139ff60808401606085016156ac565b6001600160801b03168152602001613a1d60a08401608085016156ac565b6001600160801b03168152602001613a3b60c0840160a085016156ac565b6001600160801b03168152602001613a5960e0840160c085016156ac565b6001600160801b03168152602001613a78610100840160e085016156ac565b6001600160801b03168152602001613a98610120840161010085016156ac565b6001600160801b03168152602001613ab8610140840161012085016156ac565b6001600160801b03168152602001613ad8610160840161014085016156ac565b6001600160801b03168152602001613af8610180840161016085016156ac565b6001600160801b03168152602001613b186101a0840161018085016156ac565b6001600160801b03168152602001613b386101c084016101a085016156ac565b6001600160801b03168152602001613b586101e084016101c085016156ac565b6001600160801b03168152602001613b7861020084016101e085016159d2565b1515905233600090815260ca6020908152604091829020835181546001600160a01b03199081166001600160a01b0392831617835592850151600183018054878701519284166001600160a81b031990911617600160a01b60ff90931692909202919091179055606080860151600284018054909516921691909117909255608084015160a08501516001600160801b03918216600160801b918316820217600384015560c086015160e08701519083169083168202176004840155610100860151610120870151908316908316820217600584015561014086015161016087015190831690831682021760068401556101808601516101a087015190831690831682021760078401556101c08601516101e0870151908316921602176008820155610200909301516009909301805460ff191693151593909317909255613cc49183019083016153d0565b6001600160a01b03166396c2614c6040518163ffffffff1660e01b815260040160206040518083038186803b158015613cfc57600080fd5b505afa158015613d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d349190615847565b33600081815260ca60209081526040808320600e0180546001600160801b0319166001600160801b03969096169590951790945560c9905282812080546001600160a01b0319908116841790915560cb805460018101825592527fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb90910180549091169091179055517fa77a23a7d9735be89f9068c8700c055a4e28b9199f9370c5f761b436e5ee010390613dea9083906159ed565b60405180910390a133600090815260ca6020526040902060080154600160801b90046001600160801b03166126595733600090815260ca602052604090819020600a8101805460ff19166001179055549051600080516020615e9f83398151915291613e62916001600160a01b0391909116906153bc565b60405180910390a16126596003613f58565b6001600160a01b038116600090815260ca602090815260408083206001015460cc9092528220546108c2916001600160801b0390911690600160a01b900460ff1661469d565b6000613ed26001600160801b0384811690841661499f565b9392505050565b6126598133614a2a565b6000613ef082600a615c7d565b613f0b670de0b6b3a76400006001600160801b038616615c89565b613ed29190615ca8565b61265981604051602401613f299190615ce8565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052614a8e565b61265981604051602401613f6e91815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f82c50f160e01b179052614a8e565b613fa78282612379565b6114af5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055613fdf3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60975460ff16156140695760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161149c565b565b6001600160801b03808316600090815260108501602090815260408083208585168452918290529091205490911690816140ae57676765c793fa10079d601b1b91505b509392505050565b6000613ed26140e0836001600160801b03166140da866001600160801b0316614aaf565b90614aee565b614b6b565b6140ef8282612379565b156114af5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6002810154604080516325b0985360e21b815290516000926001600160a01b0316916396c2614c916004808301926020929190829003018186803b15801561419357600080fd5b505afa1580156141a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141cb9190615847565b600c830154909150600160801b90046001600160801b03165b60038301546001600160801b03600160801b90910481169082161161422d5761420e838284614bc4565b6004830154614226906001600160801b0316826157b1565b90506141e4565b50600e9190910180546001600160801b0319166001600160801b03909216919091179055565b6001600160801b0380831660009081526010850160205260408120600381015491929091161561449657826142cf57600e85018054600191906010906142aa908490600160801b90046001600160801b03166157b1565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b6004810154600e8601546142f7916001600160801b0391821691600160801b90910416614e2e565b600e86018054600160801b908190046001600160801b0390811660009081526020869052604080822080546001600160801b0319169684169690961790955592549190910481168252918120546003840154919261435892811691166140b6565b600e870154600384015491925061437b916001600160801b0390811691166140b6565b600c870180546000906143989084906001600160801b03166157b1565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550808260010160108282829054906101000a90046001600160801b03166143e291906157b1565b82546101009290920a6001600160801b038181021990931691831602179091556001840154600285018054600160801b90920483166001600160801b031992831617905560038501805490911690558754604080516001600160a01b039092168252888316602083015291841691810191909152851560608201527fd56b2e5a640a6b5979db99e9a69997e0e14f83b4edabdfce985a1f7be59647c7915060800160405180910390a1600192505050613ed2565b506000949350505050565b6001600160801b0380831660009081526010850160205260408120600481015491928392839283929091600160801b9004166144eb57856000806000945094509450945050614652565b60048101546005820154600e8a01546001600160801b03600160801b938490048116985092820483169650600092918216911611156145385750600e8801546001600160801b0316614548565b5060058101546001600160801b03165b61455281886157f3565b925061455e8989614e46565b600d8a015490945060009061458390600160801b90046001600160801b0316896140b6565b9050806001600160801b0316856001600160801b031611156145a3578094505b600a8a0154630100000090046001600160801b031661461d576145c684886157b1565b60028401549097506001600160801b03161561461857600283015461460b906001600160801b03908116906145fc908816614f1c565b6001600160801b03169061465b565b61461590886157b1565b96505b61464e565b60028301548590614637906001600160801b0316866140b6565b61464191906157b1565b61464b90876157b1565b95505b5050505b93509350935093565b6000613ed26001600160801b03848116908416614f30565b6000613ed26140e0836001600160801b0316614697866001600160801b0316614aaf565b90614fc5565b6000670de0b6b3a76400006146b383600a615c7d565b613f0b906001600160801b038616615c89565b6146ce61504c565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405161470891906153bc565b60405180910390a1565b61471a614023565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586146fb3390565b600054610100900460ff166147765760405162461bcd60e51b815260040161149c90615d1b565b61477e615095565b6140696150bc565b600061479183610d09565b600084815260656020526040808220600101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6002820154604080516325b0985360e21b815290516000926001600160a01b0316916396c2614c916004808301926020929190829003018186803b15801561482057600080fd5b505afa158015614834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148589190615847565b9050614865838383614bc4565b6001600160801b039182166000908152601090930160205260409092206005018054919092166001600160801b0319909116179055565b6148ac60c0820160a083016156ac565b6148bc60808301606084016156ac565b6148cc60a08401608085016156ac565b6148d691906157f3565b6148e09190615876565b6001600160801b031615614907576040516334cc2fed60e01b815260040160405180910390fd5b3361492557604051635342e0a760e11b815260040160405180910390fd5b33600090815260ca60205260409020546001600160a01b03161561495c57604051631953bac160e11b815260040160405180910390fd5b670de0b6b3a76400006149776101a0830161018084016156ac565b6001600160801b0316111561265957604051633dedb6cb60e21b815260040160405180910390fd5b60008215806149ac575081155b156149b9575060006108c2565b816149cd6002670de0b6b3a7640000615ca8565b6149d990600019615d66565b6149e39190615ca8565b831115614a025760405162a748d160e21b815260040160405180910390fd5b670de0b6b3a7640000614a16600282615ca8565b614a208486615c89565b613f0b9190615997565b614a348282612379565b6114af57614a4c816001600160a01b031660146150ef565b614a578360206150ef565b604051602001614a68929190615d7d565b60408051601f198184030181529082905262461bcd60e51b825261149c91600401615ce8565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600080614ac0633b9aca0084615c89565b905082614ad1633b9aca0083615ca8565b146108c25760405162a748d160e21b815260040160405180910390fd5b6000821580614afb575081155b15614b08575060006108c2565b81614b1f6002676765c793fa10079d601b1b615ca8565b614b2b90600019615d66565b614b359190615ca8565b831115614b545760405162a748d160e21b815260040160405180910390fd5b676765c793fa10079d601b1b614a16600282615ca8565b600080614b7d6002633b9aca00615ca8565b90506000614b8b8483615997565b905081811015614bae576040516307af724160e11b815260040160405180910390fd5b614bbc633b9aca0082615ca8565b949350505050565b6001600160801b0380831660009081526010850160205260409020600481015490914291161015614e28576000808080614bff8888886144a1565b92965090945092509050614c1c6001600160801b03831687614673565b600d89018054601090614c40908490600160801b90046001600160801b03166157f3565b82546101009290920a6001600160801b038181021990931691831602179091556002870154614c71925016826140b6565b614c7b90836157b1565b600c89018054600090614c989084906001600160801b03166157b1565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555060008560050160109054906101000a90046001600160801b031684614ce191906157f3565b6004870154909150600160801b90046001600160801b0316614d6b576005860180546001600160801b0319166001600160801b038981169182179092558a54604080516001600160a01b039092168252928b166020820152918201527f6f0af1abcf1ba2094b30510b922c357e153645953c99cedcd9c731cf49c0e4919060600160405180910390a15b6005860180546001600160801b03908116600160801b8783168102919091179092556001600160801b03198782168302164282161760048901558a54600d8c01547f22f7e29f1509fbd47f3e61026d7920c0dd79fd86b88861a8e5f0f7d130a584e3936001600160a01b03909216928c92614de89204168b6140b6565b604080516001600160a01b0390941684526001600160801b039283166020850152908216908301528316606082015260800160405180910390a150505050505b50505050565b6000613ed26001600160801b03848116908416614fc5565b6001600160801b0380821660009081526010840160205260408120600c850154919290911615614f1557600c84015460048201546002830154614f12926001600160801b03908116926145fc92614ea89290811691600160801b9004166140b6565b6004880154600b890154610a1d916001600160801b03600160801b918290048116926145fc92614edb92910416836157f3565b6004890154614ef3906001600160801b0316426157f3565b60058d0154610a1d9190600160801b90046001600160801b0316615dec565b91505b5092915050565b60006108c2826001600160801b0316614aaf565b600081614f50576040516308693c7b60e31b815260040160405180910390fd5b6000614f5d600284615ca8565b9050670de0b6b3a7640000614f7482600019615d66565b614f7e9190615ca8565b841115614f9d5760405162a748d160e21b815260040160405180910390fd5b8281614fb1670de0b6b3a764000087615c89565b614fbb9190615997565b614f129190615ca8565b600081614fe5576040516308693c7b60e31b815260040160405180910390fd5b6000614ff2600284615ca8565b9050676765c793fa10079d601b1b61500c82600019615d66565b6150169190615ca8565b8411156150355760405162a748d160e21b815260040160405180910390fd5b8281614fb1676765c793fa10079d601b1b87615c89565b60975460ff166140695760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161149c565b600054610100900460ff166140695760405162461bcd60e51b815260040161149c90615d1b565b600054610100900460ff166150e35760405162461bcd60e51b815260040161149c90615d1b565b6097805460ff19169055565b606060006150fe836002615c89565b615109906002615997565b6001600160401b0381111561512057615120615e1b565b6040519080825280601f01601f19166020018201604052801561514a576020820181803683370190505b509050600360fc1b8160008151811061516557615165615e31565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061519457615194615e31565b60200101906001600160f81b031916908160001a90535060006151b8846002615c89565b6151c3906001615997565b90505b600181111561523b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106151f7576151f7615e31565b1a60f81b82828151811061520d5761520d615e31565b60200101906001600160f81b031916908160001a90535060049490941c9361523481615e47565b90506151c6565b508315613ed25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161149c565b60006020828403121561529c57600080fd5b81356001600160e01b031981168114613ed257600080fd5b6001600160a01b038116811461265957600080fd5b80356152d4816152b4565b919050565b803580151581146152d457600080fd5b600080604083850312156152fc57600080fd5b8235615307816152b4565b9150615315602084016152d9565b90509250929050565b6001600160801b03169052565b6001600160801b038116811461265957600080fd5b80356152d48161532b565b60008060006060848603121561536057600080fd5b833561536b816152b4565b9250602084013561537b8161532b565b9150604084013561538b816152b4565b809150509250925092565b6000602082840312156153a857600080fd5b5035919050565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b6000602082840312156153e257600080fd5b8135613ed2816152b4565b6000806040838503121561540057600080fd5b823591506020830135615412816152b4565b809150509250929050565b600080600080600060a0868803121561543557600080fd5b85356154408161532b565b94506020860135615450816152b4565b93506040860135615460816152b4565b92506060860135615470816152b4565b915060808601356154808161532b565b809150509295509295909350565b6001600160801b0392831681529116602082015260400190565b600080600080600060a086880312156154c057600080fd5b85356154cb8161532b565b945060208601356154db816152b4565b935060408601356154eb8161532b565b925060608601356154708161532b565b6000806040838503121561550e57600080fd5b8235615519816152b4565b915060208301356154128161532b565b6000806000806080858703121561553f57600080fd5b843561554a816152b4565b9350602085013561555a8161532b565b9250604085013561556a8161532b565b9150606085013561557a8161532b565b939692955090935050565b6000806040838503121561559857600080fd5b82356155a38161532b565b91506020830135615412816152b4565b6001600160801b03948516815292841660208401529083166040830152909116606082015260800190565b6020808252825182820181905260009190848201906040850190845b8181101561561f5783516001600160a01b0316835292840192918401916001016155fa565b50909695505050505050565b6000806040838503121561563e57600080fd5b82356155a3816152b4565b600080600080600060a0868803121561566157600080fd5b853561566c816152b4565b9450602086013561567c8161532b565b9350604086013561568c8161532b565b9250606086013561569c8161532b565b91506080860135615480816152b4565b6000602082840312156156be57600080fd5b8135613ed28161532b565b8c151581528b151560208201528a151560408201526001600160801b038a811660608301528981166080830152881660a0820152610180810161570f60c083018961531e565b61571c60e083018861531e565b61572a61010083018761531e565b61573861012083018661531e565b61574661014083018561531e565b61575461016083018461531e565b9d9c50505050505050505050505050565b6000610200828403121561577857600080fd5b50919050565b60006020828403121561579057600080fd5b8151613ed28161532b565b634e487b7160e01b600052601160045260246000fd5b60006001600160801b038281168482168083038211156157d3576157d361579b565b01949350505050565b9182526001600160801b0316602082015260400190565b60006001600160801b03838116908316818110156158135761581361579b565b039392505050565b6001600160a01b0393841681526001600160801b03929092166020830152909116604082015260600190565b60006020828403121561585957600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b60006001600160801b038381168061589057615890615860565b92169190910692915050565b9283526001600160801b03918216602084015216604082015260600190565b600080604083850312156158ce57600080fd5b82516158d98161532b565b60208401519092506154128161532b565b9283526001600160a01b039190911660208301526001600160801b0316604082015260600190565b9384526001600160801b039283166020850152908216604084015216606082015260800190565b6001600160a01b0392831681529116602082015260400190565b6001600160801b039290921682526001600160a01b0316602082015260400190565b6001600160a01b039290921682526001600160801b0316602082015260400190565b600082198211156159aa576159aa61579b565b500190565b6000602082840312156159c157600080fd5b815160ff81168114613ed257600080fd5b6000602082840312156159e457600080fd5b613ed2826152d9565b6102008101615a04826159ff856152c9565b6153af565b615a10602084016152c9565b615a1d60208401826153af565b50615a2a604084016152c9565b615a3760408401826153af565b50615a4460608401615340565b615a51606084018261531e565b50615a5e60808401615340565b615a6b608084018261531e565b50615a7860a08401615340565b615a8560a084018261531e565b50615a9260c08401615340565b615a9f60c084018261531e565b50615aac60e08401615340565b615ab960e084018261531e565b50610100615ac8818501615340565b615ad48285018261531e565b5050610120615ae4818501615340565b615af08285018261531e565b5050610140615b00818501615340565b615b0c8285018261531e565b5050610160615b1c818501615340565b615b288285018261531e565b5050610180615b38818501615340565b615b448285018261531e565b50506101a0615b54818501615340565b615b608285018261531e565b50506101c0615b70818501615340565b615b7c8285018261531e565b50506101e0615b8c8185016152d9565b1515920191909152919050565b600181815b80851115615bd4578160001904821115615bba57615bba61579b565b80851615615bc757918102915b93841c9390800290615b9e565b509250929050565b600082615beb575060016108c2565b81615bf8575060006108c2565b8160018114615c0e5760028114615c1857615c34565b60019150506108c2565b60ff841115615c2957615c2961579b565b50506001821b6108c2565b5060208310610133831016604e8410600b8410161715615c57575081810a6108c2565b615c618383615b99565b8060001904821115615c7557615c7561579b565b029392505050565b6000613ed28383615bdc565b6000816000190483118215151615615ca357615ca361579b565b500290565b600082615cb757615cb7615860565b500490565b60005b83811015615cd7578181015183820152602001615cbf565b83811115614e285750506000910152565b6020815260008251806020840152615d07816040850160208701615cbc565b601f01601f19169190910160400192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082821015615d7857615d7861579b565b500390565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351615daf816017850160208801615cbc565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615de0816028840160208801615cbc565b01602801949350505050565b60006001600160801b0382811684821681151582840482111615615e1257615e1261579b565b02949350505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081615e5657615e5661579b565b50600019019056fe71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb12344277e405079ec07749d374ba0b5862a4e45a6a05ac889dbb4a991c6f9354d5f1a2aad6c8125c39041f4e0e90bc4516abd322bec644d29276f7acc4b183ffe27160668f6d81898b09bdae61c61d2c7d23fe33a52ae9b38e5b92f00ced3806ba2646970667358221220fa410dc4d7d124b992ed95a3b0eef99f67f7da6d5b7a7e8e4e525448080fef6c64736f6c63430008090033",
  "libraries": {
    "PoolLogic": "0x7964740c2373760B3FE3a3685D9eDDeDA16880b9"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allow(address,address)": {
        "params": {
          "borrowerAddress": "The address to allow",
          "ownerAddress": "The identifier of the pool*"
        }
      },
      "borrow(address,uint128)": {
        "params": {
          "loanAmount": "The total amount of the loan*",
          "to": "The address to which the borrowed funds should be sent."
        }
      },
      "claimProtocolFees(address,uint128,address)": {
        "params": {
          "amount": "The amount of tokens claimed",
          "ownerAddress": "The identifier of the pool",
          "to": "The address receiving the fees*"
        }
      },
      "collectFees(address)": {
        "params": {
          "ownerAddress": "The identifier of the pool*"
        }
      },
      "collectFeesForTick(address,uint128)": {
        "params": {
          "ownerAddress": "The identifier of the pool*"
        }
      },
      "createNewPool((address,address,address,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,bool))": {
        "params": {
          "params": "The parameters of the new pool*"
        }
      },
      "deposit(uint128,address,address,address,uint128)": {
        "params": {
          "normalizedAmount": "The amount of the given asset to deposit",
          "ownerAddress": "The identifier of the pool",
          "rate": "The rate at which to bid for a bond",
          "sender": "The lender address who calls the deposit function on the Position",
          "underlyingToken": "Contract' address of the token to be deposited"
        },
        "returns": {
          "adjustedAmount": "Deposited amount adjusted with current liquidity index",
          "bondsIssuanceIndex": "The identifier of the borrow group to which the deposit has been allocated*"
        }
      },
      "disallow(address,address)": {
        "params": {
          "borrowerAddress": "The address to disallow",
          "ownerAddress": "The identifier of the pool*"
        }
      },
      "estimateLoanRate(uint128,address)": {
        "params": {
          "normalizedBorrowedAmount": "The amount to be borrowed from the pool",
          "ownerAddress": "The identifier of the pool"
        },
        "returns": {
          "estimatedRate": "The estimated loan rate for the current state of the pool*"
        }
      },
      "getAmountRepartition(address,uint128,uint128,uint128)": {
        "params": {
          "adjustedAmount": "Adjusted amount of tokens currently on third party yield provider",
          "bondsIssuanceIndex": "The identifier of the borrow group",
          "ownerAddress": "The identifier of the pool",
          "rate": "Tick's rate"
        },
        "returns": {
          "bondsQuantity": "Quantity of bonds held",
          "normalizedDepositedAmount": "Amount of deposit currently on third party yield provider*"
        }
      },
      "getDefaultTimestamp(address)": {
        "returns": {
          "defaultTimestamp": "The timestamp at which the pool was defaulted*"
        }
      },
      "getPoolAggregates(address)": {
        "params": {
          "ownerAddress": "The identifier of the pool"
        },
        "returns": {
          "adjustedPendingDeposits": "Amount of tokens deposited after bond issuance and currently on third party yield provider*",
          "weightedAverageLendingRate": "The average deposit bidding rate in the order book"
        }
      },
      "getPoolFeeRates(address)": {
        "returns": {
          "establishmentFeeRate": "Amount of fees paid to the protocol at borrow time",
          "repaymentFeeRate": "Amount of fees paid to the protocol at repay time*"
        }
      },
      "getPoolMaturity(address)": {
        "params": {
          "ownerAddress": "The identifier of the pool"
        },
        "returns": {
          "poolCurrentMaturity": "The pool's current maturity*"
        }
      },
      "getPoolParameters(address)": {
        "params": {
          "ownerAddress": "The identifier of the pool"
        },
        "returns": {
          "cooldownPeriod": "Period after a loan during which a borrower cannot take another loan",
          "lateRepayFeePerBondRate": "Penalty a borrower has to pay when it repays late",
          "liquidityRewardsActivationThreshold": "Minimum amount of liqudity rewards a borrower has to deposit to active the pool*",
          "liquidityRewardsDistributionRate": "Rate at which liquidity rewards are distributed to lenders",
          "loanDuration": "Duration of a loan in the pool",
          "maxBorrowableAmount": "Maximum amount of tokens that can be borrowed from the pool",
          "maxRate": "Maximum rate of deposits accepted in the pool",
          "minRate": "Minimum rate of deposits accepted in the pool",
          "rateSpacing": "Difference between two rates in the pool",
          "repaymentPeriod": "Period after a loan end during which a borrower can repay without penalty",
          "underlyingToken": "Address of the underlying token of the pool"
        }
      },
      "getPoolState(address)": {
        "params": {
          "ownerAddress": "The identifier of the pool"
        },
        "returns": {
          "active": "Signals if a pool is active and ready to accept deposits",
          "bondsIssuedQuantity": "Amount of bonds issued, to be repaid at maturity",
          "closed": "Signals if a pool was closed",
          "currentBondsIssuanceIndex": "Current borrow period identifier of the pool*",
          "currentMaturity": "End timestamp of current loan",
          "defaulted": "Signals if a pool was defaulted",
          "lowerInterestRate": "Minimum rate at which a deposit was made",
          "nextLoanMinStart": "Cool down period, minimum timestamp after which a new loan can be taken",
          "normalizedAvailableDeposits": "Actual amount of tokens available to be borrowed",
          "normalizedBorrowedAmount": "Actual amount of tokens that were borrowed",
          "remainingAdjustedLiquidityRewardsReserve": "Remaining liquidity rewards to be distributed to lenders",
          "yieldProviderLiquidityRatio": "Last recorded yield provider liquidity ratio"
        }
      },
      "getPools()": {
        "returns": {
          "_0": "pools array with pools created*"
        }
      },
      "getRepayAmounts(address,bool)": {
        "params": {
          "ownerAddress": "The identifier of the pool"
        },
        "returns": {
          "normalizedRepayAmount": "Total repay amount*"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTickAmounts(address,uint128)": {
        "params": {
          "ownerAddress": "The identifier of the pool",
          "rate": "The tick rate from which to get data"
        },
        "returns": {
          "accruedFees": "The total fees claimable in the current tick, either from yield provider interests or liquidity rewards accrual*",
          "adjustedPendingAmount": "Amount of deposit in tick deposited with the underlying yield provider that were deposited after bond issuance",
          "adjustedRemainingAmount": "Amount of tokens in tick deposited with the underlying yield provider that were deposited before bond issuance",
          "adjustedTotalAmount": "Total amount of deposit in the tick, excluding the pending amounts",
          "atlendisLiquidityRatio": "The liquidity ratio of the given tick",
          "bondsQuantity": "The quantity of bonds within the tick"
        }
      },
      "getTickLastUpdate(address,uint128)": {
        "params": {
          "ownerAddress": "The identifier of the pool pool",
          "rate": "The tick rate from which to get data"
        },
        "returns": {
          "lastFeeDistributionTimestamp": "Timestamp of the last fee's distribution to the tick*"
        }
      },
      "getTickLiquidityRatio(address,uint128)": {
        "params": {
          "ownerAddress": "The identifier of the pool",
          "rate": "The tick rate from which to extract the liquidity ratio"
        },
        "returns": {
          "liquidityRatio": "The liquidity ratio of the given tick*"
        }
      },
      "getWithdrawAmounts(address,uint128,uint128,uint128)": {
        "details": "This method is meant to be used exclusively with the withdraw() method Under certain circumstances, this method can return incorrect values, that would otherwise be rejected by the checks made in the withdraw() method",
        "params": {
          "adjustedAmount": "The amount of tokens in the position, adjusted to the deposit liquidity ratio",
          "bondsIssuanceIndex": "An index determining deposit timing",
          "ownerAddress": "The identifier of the pool",
          "rate": "The rate the position is bidding for"
        },
        "returns": {
          "adjustedAmountToWithdraw": "The amount of tokens to withdraw, adjuste for borrow pool use",
          "bondsMaturity": "The maturity of bonds remaining within the position after withdraw*",
          "depositedAmountToWithdraw": "The amount of tokens to withdraw, adjuste for position use",
          "remainingBondsQuantity": "The quantity of bonds remaining within the position"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isEarlyRepay(address)": {
        "returns": {
          "earlyRepay": "Flag that signifies whether the early repay feature is activated or not*"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setDefault(address)": {
        "params": {
          "ownerAddress": "The identifier of the pool to default*"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "topUpLiquidityRewards(uint128)": {
        "params": {
          "amount": "Amount of tokens that will be add up to the pool's liquidity rewards reserve*"
        }
      },
      "updateRate(uint128,address,uint128,uint128,uint128)": {
        "params": {
          "adjustedAmount": "The adjusted balance of tokens of the given position",
          "newRate": "The new rate of the position",
          "oldBondsIssuanceIndex": "The identifier of the borrow group from the given position",
          "oldRate": "The current rate of the position",
          "ownerAddress": "The identifier of the pool"
        },
        "returns": {
          "newAdjustedAmount": "The updated amount of tokens of the position adjusted by the new tick's global liquidity ratio",
          "newBondsIssuanceIndex": "The new borrow group id to which the updated position is linked*"
        }
      },
      "withdraw(address,uint128,uint128,uint128,address)": {
        "params": {
          "adjustedAmountToWithdraw": "The actual amount of tokens to withdraw from the position",
          "bondsIssuanceIndex": "An index determining deposit timing",
          "owner": "The address to which the withdrawns funds are sent",
          "ownerAddress": "The identifier of the pool",
          "rate": "The rate the position is bidding for"
        },
        "returns": {
          "normalizedDepositedAmountToWithdraw": "Actual amount of tokens withdrawn and sent to the lender*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Borrow(address,uint128,uint128)": {
        "notice": "Emitted after a successful borrow"
      },
      "BorrowerAllowed(address,address)": {
        "notice": "Emitted after a borrower address was allowed to borrow from a pool"
      },
      "BorrowerDisallowed(address,address)": {
        "notice": "Emitted after a borrower address was disallowed to borrow from a pool"
      },
      "ClaimProtocolFees(address,uint128,address)": {
        "notice": "Emitted after governance claims the fees associated with a pool"
      },
      "CollectFeesForTick(address,uint128,uint128,uint128)": {
        "notice": "Emitted when liquidity rewards are distributed to a tick"
      },
      "Default(address,uint128)": {
        "notice": "Emitted when a pool defaults on its loan repayment"
      },
      "EarlyRepay(address,uint128,uint128,uint128,uint128)": {
        "notice": "Emitted after a successful early repay"
      },
      "FurtherBorrow(address,uint128,uint128)": {
        "notice": "Emitted after a successful further borrow"
      },
      "LateRepay(address,uint128,uint128,uint128,uint128,uint128)": {
        "notice": "Emitted after a successful repay, made after the repayment period Includes a late repay fee"
      },
      "PoolActivated(address)": {
        "notice": "Emitted when a pool is active, i.e. after the borrower deposits enough tokens in its pool liquidity rewards reserve as agreed before the pool creation"
      },
      "PoolClosed(address,uint128)": {
        "notice": "Emitted after pool is closed"
      },
      "PoolCreated((address,address,address,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,bool))": {
        "notice": "Emitted after a pool was creted*"
      },
      "Repay(address,uint128,uint128,uint128,uint128)": {
        "notice": "Emitted after a successful repay"
      },
      "SetEstablishmentFeeRate(uint128,address)": {
        "notice": "Emitted after governance sets the establishment fee for a pool*"
      },
      "SetLiquidityRewardsDistributionRate(uint128,address)": {
        "notice": "Emitted after governance sets the liquidity rewards distribution rate for a pool*"
      },
      "SetMaxBorrowableAmount(uint128,address)": {
        "notice": "Emitted after governance sets the maximum borrowable amount for a pool*"
      },
      "SetRepaymentFeeRate(uint128,address)": {
        "notice": "Emitted after governance sets the repayment fee for a pool*"
      },
      "TickBorrow(address,uint128,uint128,uint128,uint128,uint128)": {
        "notice": "Emitted when a borrow successfully impacts a tick"
      },
      "TickInitialized(address,uint128,uint128)": {
        "notice": "Emitted when a tick is initialized, i.e. when its first deposited in"
      },
      "TickLoanDeposit(address,uint128,uint128)": {
        "notice": "Emitted after a deposit on a tick that was done during a loan"
      },
      "TickNoLoanDeposit(address,uint128,uint128,uint128)": {
        "notice": "Emitted after a deposit on a tick that was done without an active loan"
      },
      "TickPendingDeposit(address,uint128,uint128,bool)": {
        "notice": "Emitted when pending amounts are merged with the rest of the pool during a repay"
      },
      "TickRepay(address,uint128,uint128,uint128)": {
        "notice": "Emitted when funds from a tick are repaid by the borrower"
      },
      "TickWithdrawPending(address,uint128,uint128)": {
        "notice": "Emitted when a withdraw is done outside of a loan on the tick"
      },
      "TickWithdrawRemaining(address,uint128,uint128,uint128,uint128)": {
        "notice": "Emitted when a withdraw is done during a loan on the tick"
      },
      "TopUpLiquidityRewards(address,uint128)": {
        "notice": "Emitted after a borrower successfully deposits tokens in its pool liquidity rewards reserve"
      }
    },
    "kind": "user",
    "methods": {
      "allow(address,address)": {
        "notice": "Allow an address to interact with a borrower pool"
      },
      "borrow(address,uint128)": {
        "notice": "Called by the borrower to sell bonds to the order book. The affected ticks get updated according the amount of bonds sold."
      },
      "claimProtocolFees(address,uint128,address)": {
        "notice": "Withdraws protocol fees to a target address"
      },
      "collectFees(address)": {
        "notice": "Collect yield provider fees as well as liquidity rewards for the whole pool Iterates over all pool initialized ticks"
      },
      "collectFeesForTick(address,uint128)": {
        "notice": "Collect yield provider fees as well as liquidity rewards for the target tick"
      },
      "createNewPool((address,address,address,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,uint128,bool))": {
        "notice": "Creates a new pool"
      },
      "deposit(uint128,address,address,address,uint128)": {
        "notice": "Gets called within the Position.deposit() function and enables a lender to deposit assets into a given pool's order book. The lender specifies a rate (price) at which it is willing to lend out its assets (bid on the zero coupon bond). The full amount will initially be deposited on the underlying yield provider until the borrower sells bonds at the specified rate."
      },
      "disallow(address,address)": {
        "notice": "Remove borrower pool interaction rights from an address"
      },
      "estimateLoanRate(uint128,address)": {
        "notice": "Estimates the lending rate corresponding to the input amount, depending on the current state of the pool"
      },
      "freezePool()": {
        "notice": "Stops all actions on all pools*"
      },
      "getAmountRepartition(address,uint128,uint128,uint128)": {
        "notice": "Returns the token amount's repartition between bond quantity and normalized deposited amount currently placed on third party yield provider"
      },
      "getDefaultTimestamp(address)": {
        "notice": "Returns the state of a pool"
      },
      "getPoolAggregates(address)": {
        "notice": "Returns the current state of the pool's parameters"
      },
      "getPoolFeeRates(address)": {
        "notice": "Returns the fee rates of a pool"
      },
      "getPoolMaturity(address)": {
        "notice": "Returns the current maturity of the pool"
      },
      "getPoolParameters(address)": {
        "notice": "Returns the parameters of a pool"
      },
      "getPoolState(address)": {
        "notice": "Returns the state of a pool"
      },
      "getPools()": {
        "notice": "Returns all the pools created"
      },
      "getRepayAmounts(address,bool)": {
        "notice": "Returns the total amount a borrower has to repay to a pool. Includes borrowed amount, late repay fees and protocol fees"
      },
      "getTickAmounts(address,uint128)": {
        "notice": "Returns the repartition between bonds and deposits of the given tick."
      },
      "getTickLastUpdate(address,uint128)": {
        "notice": "Returns the timestamp of the last fee distribution to the tick"
      },
      "getTickLiquidityRatio(address,uint128)": {
        "notice": "Returns the liquidity ratio of a given tick in a pool's order book. The liquidity ratio is an accounting construct to deduce the accrued interest over time."
      },
      "getWithdrawAmounts(address,uint128,uint128,uint128)": {
        "notice": "Gets called within the Position.withdraw() function and enables a lender to evaluate the exact amount of tokens it is allowed to withdraw"
      },
      "isEarlyRepay(address)": {
        "notice": "Returns the state of a pool"
      },
      "repay()": {
        "notice": "Repays a currently outstanding bonds of the given pool.*"
      },
      "setDefault(address)": {
        "notice": "Flags the pool as defaulted"
      },
      "setEstablishmentFeeRate(uint128,address)": {
        "notice": "Set the pool establishment protocol fee rate*"
      },
      "setLiquidityRewardsDistributionRate(uint128,address)": {
        "notice": "Set the pool liquidity rewards distribution rate*"
      },
      "setMaxBorrowableAmount(uint128,address)": {
        "notice": "Set the maximum amount of tokens that can be borrowed in the target pool*"
      },
      "setRepaymentFeeRate(uint128,address)": {
        "notice": "Set the pool repayment protocol fee rate*"
      },
      "topUpLiquidityRewards(uint128)": {
        "notice": "Called by the borrower to top up liquidity rewards' reserve that is distributed to liquidity providers at the pre-defined distribution rate."
      },
      "unfreezePool()": {
        "notice": "Cancel a freeze, makes actions available again on all pools*"
      },
      "updateRate(uint128,address,uint128,uint128,uint128)": {
        "notice": "Gets called within Position.updateRate() and updates the order book ticks affected by the position updating its rate. This is only possible as long as there are no bonds in the position, i.e the full position currently lies with the yield provider"
      },
      "withdraw(address,uint128,uint128,uint128,address)": {
        "notice": "Gets called within the Position.withdraw() function and enables a lender to withdraw assets that are deposited with the underlying yield provider"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 419,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 422,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3058,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3328,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 584,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 689,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15797,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "borrowerAuthorizedPools",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 15802,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "pools",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_struct(Pool)23963_storage)"
      },
      {
        "astId": 15805,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "poolsAddresses",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 15809,
        "contract": "src/BorrowerPools.sol:BorrowerPools",
        "label": "protocolFees",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_uint128)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(YearnFinanceWrapper)20428": {
        "encoding": "inplace",
        "label": "contract YearnFinanceWrapper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Pool)23963_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Types.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)23963_storage"
      },
      "t_mapping(t_address,t_uint128)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint128,t_uint128)": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_mapping(t_uint256,t_struct(Tick)23888_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Types.Tick)",
        "numberOfBytes": "32",
        "value": "t_struct(Tick)23888_storage"
      },
      "t_struct(Pool)23963_storage": {
        "encoding": "inplace",
        "label": "struct Types.Pool",
        "members": [
          {
            "astId": 23954,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "parameters",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(PoolParameters)23924_storage"
          },
          {
            "astId": 23957,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "state",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(PoolState)23951_storage"
          },
          {
            "astId": 23962,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "ticks",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_struct(Tick)23888_storage)"
          }
        ],
        "numberOfBytes": "544"
      },
      "t_struct(PoolParameters)23924_storage": {
        "encoding": "inplace",
        "label": "struct Types.PoolParameters",
        "members": [
          {
            "astId": 23890,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "OWNER",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 23892,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "UNDERLYING_TOKEN",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 23894,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "TOKEN_DECIMALS",
            "offset": 20,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 23897,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "YIELD_PROVIDER",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(YearnFinanceWrapper)20428"
          },
          {
            "astId": 23899,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "MIN_RATE",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 23901,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "MAX_RATE",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 23903,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "RATE_SPACING",
            "offset": 0,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 23905,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "MAX_BORROWABLE_AMOUNT",
            "offset": 16,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 23907,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "LOAN_DURATION",
            "offset": 0,
            "slot": "5",
            "type": "t_uint128"
          },
          {
            "astId": 23909,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "LIQUIDITY_REWARDS_DISTRIBUTION_RATE",
            "offset": 16,
            "slot": "5",
            "type": "t_uint128"
          },
          {
            "astId": 23911,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "COOLDOWN_PERIOD",
            "offset": 0,
            "slot": "6",
            "type": "t_uint128"
          },
          {
            "astId": 23913,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "REPAYMENT_PERIOD",
            "offset": 16,
            "slot": "6",
            "type": "t_uint128"
          },
          {
            "astId": 23915,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "LATE_REPAY_FEE_PER_BOND_RATE",
            "offset": 0,
            "slot": "7",
            "type": "t_uint128"
          },
          {
            "astId": 23917,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "ESTABLISHMENT_FEE_RATE",
            "offset": 16,
            "slot": "7",
            "type": "t_uint128"
          },
          {
            "astId": 23919,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "REPAYMENT_FEE_RATE",
            "offset": 0,
            "slot": "8",
            "type": "t_uint128"
          },
          {
            "astId": 23921,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "LIQUIDITY_REWARDS_ACTIVATION_THRESHOLD",
            "offset": 16,
            "slot": "8",
            "type": "t_uint128"
          },
          {
            "astId": 23923,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "EARLY_REPAY",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(PoolState)23951_storage": {
        "encoding": "inplace",
        "label": "struct Types.PoolState",
        "members": [
          {
            "astId": 23926,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "active",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 23928,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "defaulted",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 23930,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "closed",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 23932,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "currentMaturity",
            "offset": 3,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 23934,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "bondsIssuedQuantity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 23936,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "normalizedBorrowedAmount",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 23938,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "normalizedAvailableDeposits",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 23940,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "lowerInterestRate",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 23942,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "nextLoanMinStart",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 23944,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "remainingAdjustedLiquidityRewardsReserve",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 23946,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "yieldProviderLiquidityRatio",
            "offset": 0,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 23948,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "currentBondsIssuanceIndex",
            "offset": 16,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 23950,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "defaultTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Tick)23888_storage": {
        "encoding": "inplace",
        "label": "struct Types.Tick",
        "members": [
          {
            "astId": 23867,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "bondsIssuanceIndexMultiplier",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint128,t_uint128)"
          },
          {
            "astId": 23869,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "bondsQuantity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 23871,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "adjustedTotalAmount",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 23873,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "adjustedRemainingAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 23875,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "adjustedWithdrawnAmount",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 23877,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "adjustedPendingAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 23879,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "normalizedLoanedAmount",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 23881,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "lastFeeDistributionTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 23883,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "atlendisLiquidityRatio",
            "offset": 16,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 23885,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "yieldProviderLiquidityRatio",
            "offset": 0,
            "slot": "5",
            "type": "t_uint128"
          },
          {
            "astId": 23887,
            "contract": "src/BorrowerPools.sol:BorrowerPools",
            "label": "accruedFees",
            "offset": 16,
            "slot": "5",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}